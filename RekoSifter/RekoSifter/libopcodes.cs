// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace libopcodes
{
    public enum DisInsnType
    {
        DisNoninsn = 0,
        DisNonbranch = 1,
        DisBranch = 2,
        DisCondbranch = 3,
        DisJsr = 4,
        DisCondjsr = 5,
        DisDref = 6,
        DisDref2 = 7
    }

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate int FprintfFtype(global::System.IntPtr _0, [MarshalAs(UnmanagedType.LPUTF8Str)] string _1, IntPtr args);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate int DisassemblerFtype(ulong _0, global::System.IntPtr _1);

    public unsafe partial class DisassembleInfo : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 248)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr fprintf_func;

            [FieldOffset(8)]
            internal global::System.IntPtr stream;

            [FieldOffset(16)]
            internal global::System.IntPtr application_data;

            [FieldOffset(24)]
            internal global::libopcodes.BfdFlavour flavour;

            [FieldOffset(28)]
            internal global::libopcodes.BfdArchitecture arch;

            [FieldOffset(32)]
            internal uint mach;

            [FieldOffset(36)]
            internal global::libopcodes.BfdEndian endian;

            [FieldOffset(40)]
            internal global::libopcodes.BfdEndian endian_code;

            [FieldOffset(48)]
            internal global::System.IntPtr section;

            [FieldOffset(56)]
            internal global::System.IntPtr symbols;

            [FieldOffset(64)]
            internal int num_symbols;

            [FieldOffset(72)]
            internal global::System.IntPtr symtab;

            [FieldOffset(80)]
            internal int symtab_pos;

            [FieldOffset(84)]
            internal int symtab_size;

            [FieldOffset(88)]
            internal uint flags;

            [FieldOffset(96)]
            internal global::System.IntPtr private_data;

            [FieldOffset(104)]
            internal global::System.IntPtr read_memory_func;

            [FieldOffset(112)]
            internal global::System.IntPtr memory_error_func;

            [FieldOffset(120)]
            internal global::System.IntPtr print_address_func;

            [FieldOffset(128)]
            internal global::System.IntPtr symbol_at_address_func;

            [FieldOffset(136)]
            internal global::System.IntPtr symbol_is_valid;

            [FieldOffset(144)]
            internal global::System.IntPtr buffer;

            [FieldOffset(152)]
            internal ulong buffer_vma;

            [FieldOffset(160)]
            internal ulong buffer_length;

            [FieldOffset(168)]
            internal int bytes_per_line;

            [FieldOffset(172)]
            internal int bytes_per_chunk;

            [FieldOffset(176)]
            internal global::libopcodes.BfdEndian display_endian;

            [FieldOffset(180)]
            internal uint octets_per_byte;

            [FieldOffset(184)]
            internal uint skip_zeroes;

            [FieldOffset(188)]
            internal uint skip_zeroes_at_end;

            [FieldOffset(192)]
            internal int disassembler_needs_relocs;

            [FieldOffset(196)]
            internal sbyte insn_info_valid;

            [FieldOffset(197)]
            internal sbyte branch_delay_insns;

            [FieldOffset(198)]
            internal sbyte data_size;

            [FieldOffset(200)]
            internal global::libopcodes.DisInsnType insn_type;

            [FieldOffset(208)]
            internal ulong target;

            [FieldOffset(216)]
            internal ulong target2;

            [FieldOffset(224)]
            internal global::System.IntPtr disassembler_options;

            [FieldOffset(232)]
            internal ulong stop_vma;

            [FieldOffset(240)]
            internal ulong stop_offset;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0disassemble_info@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.DisassembleInfo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.DisassembleInfo>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::libopcodes.DisassembleInfo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::libopcodes.DisassembleInfo(native.ToPointer(), skipVTables);
        }

        internal static global::libopcodes.DisassembleInfo __CreateInstance(global::libopcodes.DisassembleInfo.__Internal native, bool skipVTables = false)
        {
            return new global::libopcodes.DisassembleInfo(native, skipVTables);
        }

        private static void* __CopyValue(global::libopcodes.DisassembleInfo.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::libopcodes.DisassembleInfo.__Internal));
            *(global::libopcodes.DisassembleInfo.__Internal*) ret = native;
            return ret.ToPointer();
        }

        public DisassembleInfo(global::libopcodes.DisassembleInfo.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public DisassembleInfo(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public DisassembleInfo()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::libopcodes.DisassembleInfo.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public DisassembleInfo(global::libopcodes.DisassembleInfo _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::libopcodes.DisassembleInfo.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::libopcodes.DisassembleInfo.__Internal*) __Instance) = *((global::libopcodes.DisassembleInfo.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::libopcodes.DisassembleInfo __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::libopcodes.FprintfFtype FprintfFunc
        {
            get
            {
                var __ptr0 = ((global::libopcodes.DisassembleInfo.__Internal*) __Instance)->fprintf_func;
                return __ptr0 == IntPtr.Zero? null : (global::libopcodes.FprintfFtype) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::libopcodes.FprintfFtype));
            }

            set
            {
                ((global::libopcodes.DisassembleInfo.__Internal*)__Instance)->fprintf_func = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::System.IntPtr Stream
        {
            get
            {
                return ((global::libopcodes.DisassembleInfo.__Internal*) __Instance)->stream;
            }

            set
            {
                ((global::libopcodes.DisassembleInfo.__Internal*)__Instance)->stream = (global::System.IntPtr) value;
            }
        }

        public global::System.IntPtr ApplicationData
        {
            get
            {
                return ((global::libopcodes.DisassembleInfo.__Internal*) __Instance)->application_data;
            }

            set
            {
                ((global::libopcodes.DisassembleInfo.__Internal*)__Instance)->application_data = (global::System.IntPtr) value;
            }
        }

        public global::libopcodes.BfdFlavour Flavour
        {
            get
            {
                return ((global::libopcodes.DisassembleInfo.__Internal*) __Instance)->flavour;
            }

            set
            {
                ((global::libopcodes.DisassembleInfo.__Internal*)__Instance)->flavour = value;
            }
        }

        public global::libopcodes.BfdArchitecture Arch
        {
            get
            {
                return ((global::libopcodes.DisassembleInfo.__Internal*) __Instance)->arch;
            }

            set
            {
                ((global::libopcodes.DisassembleInfo.__Internal*)__Instance)->arch = value;
            }
        }

        public uint Mach
        {
            get
            {
                return ((global::libopcodes.DisassembleInfo.__Internal*) __Instance)->mach;
            }

            set
            {
                ((global::libopcodes.DisassembleInfo.__Internal*)__Instance)->mach = value;
            }
        }

        public global::libopcodes.BfdEndian Endian
        {
            get
            {
                return ((global::libopcodes.DisassembleInfo.__Internal*) __Instance)->endian;
            }

            set
            {
                ((global::libopcodes.DisassembleInfo.__Internal*)__Instance)->endian = value;
            }
        }

        public global::libopcodes.BfdEndian EndianCode
        {
            get
            {
                return ((global::libopcodes.DisassembleInfo.__Internal*) __Instance)->endian_code;
            }

            set
            {
                ((global::libopcodes.DisassembleInfo.__Internal*)__Instance)->endian_code = value;
            }
        }

        public global::libopcodes.BfdSection Section
        {
            get
            {
                global::libopcodes.BfdSection __result0;
                if (((global::libopcodes.DisassembleInfo.__Internal*) __Instance)->section == IntPtr.Zero) __result0 = null;
                else if (global::libopcodes.BfdSection.NativeToManagedMap.ContainsKey(((global::libopcodes.DisassembleInfo.__Internal*) __Instance)->section))
                    __result0 = (global::libopcodes.BfdSection) global::libopcodes.BfdSection.NativeToManagedMap[((global::libopcodes.DisassembleInfo.__Internal*) __Instance)->section];
                else __result0 = global::libopcodes.BfdSection.__CreateInstance(((global::libopcodes.DisassembleInfo.__Internal*) __Instance)->section);
                return __result0;
            }

            set
            {
                ((global::libopcodes.DisassembleInfo.__Internal*)__Instance)->section = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public global::libopcodes.BfdSymbol Symbols
        {
            get
            {
                global::libopcodes.BfdSymbol __result0;
                if (((global::libopcodes.DisassembleInfo.__Internal*) __Instance)->symbols == IntPtr.Zero) __result0 = null;
                else if (global::libopcodes.BfdSymbol.NativeToManagedMap.ContainsKey(((global::libopcodes.DisassembleInfo.__Internal*) __Instance)->symbols))
                    __result0 = (global::libopcodes.BfdSymbol) global::libopcodes.BfdSymbol.NativeToManagedMap[((global::libopcodes.DisassembleInfo.__Internal*) __Instance)->symbols];
                else __result0 = global::libopcodes.BfdSymbol.__CreateInstance(((global::libopcodes.DisassembleInfo.__Internal*) __Instance)->symbols);
                return __result0;
            }

            set
            {
                var __value = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                ((global::libopcodes.DisassembleInfo.__Internal*)__Instance)->symbols = new global::System.IntPtr(&__value);
            }
        }

        public int NumSymbols
        {
            get
            {
                return ((global::libopcodes.DisassembleInfo.__Internal*) __Instance)->num_symbols;
            }

            set
            {
                ((global::libopcodes.DisassembleInfo.__Internal*)__Instance)->num_symbols = value;
            }
        }

        public global::libopcodes.BfdSymbol Symtab
        {
            get
            {
                global::libopcodes.BfdSymbol __result0;
                if (((global::libopcodes.DisassembleInfo.__Internal*) __Instance)->symtab == IntPtr.Zero) __result0 = null;
                else if (global::libopcodes.BfdSymbol.NativeToManagedMap.ContainsKey(((global::libopcodes.DisassembleInfo.__Internal*) __Instance)->symtab))
                    __result0 = (global::libopcodes.BfdSymbol) global::libopcodes.BfdSymbol.NativeToManagedMap[((global::libopcodes.DisassembleInfo.__Internal*) __Instance)->symtab];
                else __result0 = global::libopcodes.BfdSymbol.__CreateInstance(((global::libopcodes.DisassembleInfo.__Internal*) __Instance)->symtab);
                return __result0;
            }

            set
            {
                var __value = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                ((global::libopcodes.DisassembleInfo.__Internal*)__Instance)->symtab = new global::System.IntPtr(&__value);
            }
        }

        public int SymtabPos
        {
            get
            {
                return ((global::libopcodes.DisassembleInfo.__Internal*) __Instance)->symtab_pos;
            }

            set
            {
                ((global::libopcodes.DisassembleInfo.__Internal*)__Instance)->symtab_pos = value;
            }
        }

        public int SymtabSize
        {
            get
            {
                return ((global::libopcodes.DisassembleInfo.__Internal*) __Instance)->symtab_size;
            }

            set
            {
                ((global::libopcodes.DisassembleInfo.__Internal*)__Instance)->symtab_size = value;
            }
        }

        public uint Flags
        {
            get
            {
                return ((global::libopcodes.DisassembleInfo.__Internal*) __Instance)->flags;
            }

            set
            {
                ((global::libopcodes.DisassembleInfo.__Internal*)__Instance)->flags = value;
            }
        }

        public global::System.IntPtr PrivateData
        {
            get
            {
                return ((global::libopcodes.DisassembleInfo.__Internal*) __Instance)->private_data;
            }

            set
            {
                ((global::libopcodes.DisassembleInfo.__Internal*)__Instance)->private_data = (global::System.IntPtr) value;
            }
        }

        public global::libopcodes.Delegates.Func_int_ulong_bytePtr_uint_IntPtr ReadMemoryFunc
        {
            get
            {
                var __ptr0 = ((global::libopcodes.DisassembleInfo.__Internal*) __Instance)->read_memory_func;
                return __ptr0 == IntPtr.Zero? null : (global::libopcodes.Delegates.Func_int_ulong_bytePtr_uint_IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::libopcodes.Delegates.Func_int_ulong_bytePtr_uint_IntPtr));
            }

            set
            {
                ((global::libopcodes.DisassembleInfo.__Internal*)__Instance)->read_memory_func = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::libopcodes.Delegates.Action_int_ulong_IntPtr MemoryErrorFunc
        {
            get
            {
                var __ptr0 = ((global::libopcodes.DisassembleInfo.__Internal*) __Instance)->memory_error_func;
                return __ptr0 == IntPtr.Zero? null : (global::libopcodes.Delegates.Action_int_ulong_IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::libopcodes.Delegates.Action_int_ulong_IntPtr));
            }

            set
            {
                ((global::libopcodes.DisassembleInfo.__Internal*)__Instance)->memory_error_func = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::libopcodes.Delegates.Action_ulong_IntPtr PrintAddressFunc
        {
            get
            {
                var __ptr0 = ((global::libopcodes.DisassembleInfo.__Internal*) __Instance)->print_address_func;
                return __ptr0 == IntPtr.Zero? null : (global::libopcodes.Delegates.Action_ulong_IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::libopcodes.Delegates.Action_ulong_IntPtr));
            }

            set
            {
                ((global::libopcodes.DisassembleInfo.__Internal*)__Instance)->print_address_func = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::libopcodes.Delegates.Func_int_ulong_IntPtr SymbolAtAddressFunc
        {
            get
            {
                var __ptr0 = ((global::libopcodes.DisassembleInfo.__Internal*) __Instance)->symbol_at_address_func;
                return __ptr0 == IntPtr.Zero? null : (global::libopcodes.Delegates.Func_int_ulong_IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::libopcodes.Delegates.Func_int_ulong_IntPtr));
            }

            set
            {
                ((global::libopcodes.DisassembleInfo.__Internal*)__Instance)->symbol_at_address_func = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::libopcodes.Delegates.Func_int_IntPtr_IntPtr SymbolIsValid
        {
            get
            {
                var __ptr0 = ((global::libopcodes.DisassembleInfo.__Internal*) __Instance)->symbol_is_valid;
                return __ptr0 == IntPtr.Zero? null : (global::libopcodes.Delegates.Func_int_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::libopcodes.Delegates.Func_int_IntPtr_IntPtr));
            }

            set
            {
                ((global::libopcodes.DisassembleInfo.__Internal*)__Instance)->symbol_is_valid = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public byte* Buffer
        {
            get
            {
                return (byte*) ((global::libopcodes.DisassembleInfo.__Internal*) __Instance)->buffer;
            }

            set
            {
                ((global::libopcodes.DisassembleInfo.__Internal*)__Instance)->buffer = (global::System.IntPtr) value;
            }
        }

        public ulong BufferVma
        {
            get
            {
                return ((global::libopcodes.DisassembleInfo.__Internal*) __Instance)->buffer_vma;
            }

            set
            {
                ((global::libopcodes.DisassembleInfo.__Internal*)__Instance)->buffer_vma = value;
            }
        }

        public ulong BufferLength
        {
            get
            {
                return ((global::libopcodes.DisassembleInfo.__Internal*) __Instance)->buffer_length;
            }

            set
            {
                ((global::libopcodes.DisassembleInfo.__Internal*)__Instance)->buffer_length = value;
            }
        }

        public int BytesPerLine
        {
            get
            {
                return ((global::libopcodes.DisassembleInfo.__Internal*) __Instance)->bytes_per_line;
            }

            set
            {
                ((global::libopcodes.DisassembleInfo.__Internal*)__Instance)->bytes_per_line = value;
            }
        }

        public int BytesPerChunk
        {
            get
            {
                return ((global::libopcodes.DisassembleInfo.__Internal*) __Instance)->bytes_per_chunk;
            }

            set
            {
                ((global::libopcodes.DisassembleInfo.__Internal*)__Instance)->bytes_per_chunk = value;
            }
        }

        public global::libopcodes.BfdEndian DisplayEndian
        {
            get
            {
                return ((global::libopcodes.DisassembleInfo.__Internal*) __Instance)->display_endian;
            }

            set
            {
                ((global::libopcodes.DisassembleInfo.__Internal*)__Instance)->display_endian = value;
            }
        }

        public uint OctetsPerByte
        {
            get
            {
                return ((global::libopcodes.DisassembleInfo.__Internal*) __Instance)->octets_per_byte;
            }

            set
            {
                ((global::libopcodes.DisassembleInfo.__Internal*)__Instance)->octets_per_byte = value;
            }
        }

        public uint SkipZeroes
        {
            get
            {
                return ((global::libopcodes.DisassembleInfo.__Internal*) __Instance)->skip_zeroes;
            }

            set
            {
                ((global::libopcodes.DisassembleInfo.__Internal*)__Instance)->skip_zeroes = value;
            }
        }

        public uint SkipZeroesAtEnd
        {
            get
            {
                return ((global::libopcodes.DisassembleInfo.__Internal*) __Instance)->skip_zeroes_at_end;
            }

            set
            {
                ((global::libopcodes.DisassembleInfo.__Internal*)__Instance)->skip_zeroes_at_end = value;
            }
        }

        public int DisassemblerNeedsRelocs
        {
            get
            {
                return ((global::libopcodes.DisassembleInfo.__Internal*) __Instance)->disassembler_needs_relocs;
            }

            set
            {
                ((global::libopcodes.DisassembleInfo.__Internal*)__Instance)->disassembler_needs_relocs = value;
            }
        }

        public sbyte InsnInfoValid
        {
            get
            {
                return ((global::libopcodes.DisassembleInfo.__Internal*) __Instance)->insn_info_valid;
            }

            set
            {
                ((global::libopcodes.DisassembleInfo.__Internal*)__Instance)->insn_info_valid = value;
            }
        }

        public sbyte BranchDelayInsns
        {
            get
            {
                return ((global::libopcodes.DisassembleInfo.__Internal*) __Instance)->branch_delay_insns;
            }

            set
            {
                ((global::libopcodes.DisassembleInfo.__Internal*)__Instance)->branch_delay_insns = value;
            }
        }

        public sbyte DataSize
        {
            get
            {
                return ((global::libopcodes.DisassembleInfo.__Internal*) __Instance)->data_size;
            }

            set
            {
                ((global::libopcodes.DisassembleInfo.__Internal*)__Instance)->data_size = value;
            }
        }

        public global::libopcodes.DisInsnType InsnType
        {
            get
            {
                return ((global::libopcodes.DisassembleInfo.__Internal*) __Instance)->insn_type;
            }

            set
            {
                ((global::libopcodes.DisassembleInfo.__Internal*)__Instance)->insn_type = value;
            }
        }

        public ulong Target
        {
            get
            {
                return ((global::libopcodes.DisassembleInfo.__Internal*) __Instance)->target;
            }

            set
            {
                ((global::libopcodes.DisassembleInfo.__Internal*)__Instance)->target = value;
            }
        }

        public ulong Target2
        {
            get
            {
                return ((global::libopcodes.DisassembleInfo.__Internal*) __Instance)->target2;
            }

            set
            {
                ((global::libopcodes.DisassembleInfo.__Internal*)__Instance)->target2 = value;
            }
        }

        public string DisassemblerOptions
        {
            get
            {
                if (((global::libopcodes.DisassembleInfo.__Internal*) __Instance)->disassembler_options == global::System.IntPtr.Zero)
                    return default(string);
                var __retPtr = (byte*) ((global::libopcodes.DisassembleInfo.__Internal*) __Instance)->disassembler_options;
                int __length = 0;
                while (*(__retPtr++) != 0) __length += sizeof(byte);
                return global::System.Text.Encoding.UTF8.GetString((byte*) ((global::libopcodes.DisassembleInfo.__Internal*) __Instance)->disassembler_options, __length);
            }

            set
            {
                byte[] __bytes0 = global::System.Text.Encoding.UTF8.GetBytes(value);
                fixed (byte* __bytePtr0 = __bytes0)
                {
                    ((global::libopcodes.DisassembleInfo.__Internal*)__Instance)->disassembler_options = (global::System.IntPtr) new global::System.IntPtr(__bytePtr0);
                }
            }
        }

        public ulong StopVma
        {
            get
            {
                return ((global::libopcodes.DisassembleInfo.__Internal*) __Instance)->stop_vma;
            }

            set
            {
                ((global::libopcodes.DisassembleInfo.__Internal*)__Instance)->stop_vma = value;
            }
        }

        public ulong StopOffset
        {
            get
            {
                return ((global::libopcodes.DisassembleInfo.__Internal*) __Instance)->stop_offset;
            }

            set
            {
                ((global::libopcodes.DisassembleInfo.__Internal*)__Instance)->stop_offset = value;
            }
        }
    }

    public unsafe partial class DisasmOptionArgT : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr name;

            [FieldOffset(8)]
            internal global::System.IntPtr values;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0disasm_option_arg_t@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.DisasmOptionArgT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.DisasmOptionArgT>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::libopcodes.DisasmOptionArgT __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::libopcodes.DisasmOptionArgT(native.ToPointer(), skipVTables);
        }

        internal static global::libopcodes.DisasmOptionArgT __CreateInstance(global::libopcodes.DisasmOptionArgT.__Internal native, bool skipVTables = false)
        {
            return new global::libopcodes.DisasmOptionArgT(native, skipVTables);
        }

        private static void* __CopyValue(global::libopcodes.DisasmOptionArgT.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::libopcodes.DisasmOptionArgT.__Internal));
            *(global::libopcodes.DisasmOptionArgT.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private DisasmOptionArgT(global::libopcodes.DisasmOptionArgT.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected DisasmOptionArgT(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public DisasmOptionArgT()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::libopcodes.DisasmOptionArgT.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public DisasmOptionArgT(global::libopcodes.DisasmOptionArgT _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::libopcodes.DisasmOptionArgT.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::libopcodes.DisasmOptionArgT.__Internal*) __Instance) = *((global::libopcodes.DisasmOptionArgT.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::libopcodes.DisasmOptionArgT __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public string Name
        {
            get
            {
                if (((global::libopcodes.DisasmOptionArgT.__Internal*) __Instance)->name == global::System.IntPtr.Zero)
                    return default(string);
                var __retPtr = (byte*) ((global::libopcodes.DisasmOptionArgT.__Internal*) __Instance)->name;
                int __length = 0;
                while (*(__retPtr++) != 0) __length += sizeof(byte);
                return global::System.Text.Encoding.UTF8.GetString((byte*) ((global::libopcodes.DisasmOptionArgT.__Internal*) __Instance)->name, __length);
            }

            set
            {
                byte[] __bytes0 = global::System.Text.Encoding.UTF8.GetBytes(value);
                fixed (byte* __bytePtr0 = __bytes0)
                {
                    ((global::libopcodes.DisasmOptionArgT.__Internal*)__Instance)->name = (global::System.IntPtr) new global::System.IntPtr(__bytePtr0);
                }
            }
        }
    }

    public unsafe partial class DisasmOptionsT : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr name;

            [FieldOffset(8)]
            internal global::System.IntPtr description;

            [FieldOffset(16)]
            internal global::System.IntPtr arg;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0disasm_options_t@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.DisasmOptionsT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.DisasmOptionsT>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::libopcodes.DisasmOptionsT __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::libopcodes.DisasmOptionsT(native.ToPointer(), skipVTables);
        }

        internal static global::libopcodes.DisasmOptionsT __CreateInstance(global::libopcodes.DisasmOptionsT.__Internal native, bool skipVTables = false)
        {
            return new global::libopcodes.DisasmOptionsT(native, skipVTables);
        }

        private static void* __CopyValue(global::libopcodes.DisasmOptionsT.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::libopcodes.DisasmOptionsT.__Internal));
            *(global::libopcodes.DisasmOptionsT.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private DisasmOptionsT(global::libopcodes.DisasmOptionsT.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected DisasmOptionsT(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public DisasmOptionsT()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::libopcodes.DisasmOptionsT.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public DisasmOptionsT(global::libopcodes.DisasmOptionsT _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::libopcodes.DisasmOptionsT.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::libopcodes.DisasmOptionsT.__Internal*) __Instance) = *((global::libopcodes.DisasmOptionsT.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::libopcodes.DisasmOptionsT __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::libopcodes.DisasmOptionArgT Arg
        {
            get
            {
                global::libopcodes.DisasmOptionArgT __result0;
                if (((global::libopcodes.DisasmOptionsT.__Internal*) __Instance)->arg == IntPtr.Zero) __result0 = null;
                else if (global::libopcodes.DisasmOptionArgT.NativeToManagedMap.ContainsKey(((global::libopcodes.DisasmOptionsT.__Internal*) __Instance)->arg))
                    __result0 = (global::libopcodes.DisasmOptionArgT) global::libopcodes.DisasmOptionArgT.NativeToManagedMap[((global::libopcodes.DisasmOptionsT.__Internal*) __Instance)->arg];
                else __result0 = global::libopcodes.DisasmOptionArgT.__CreateInstance(((global::libopcodes.DisasmOptionsT.__Internal*) __Instance)->arg);
                return __result0;
            }

            set
            {
                var __value = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                ((global::libopcodes.DisasmOptionsT.__Internal*)__Instance)->arg = new global::System.IntPtr(&__value);
            }
        }
    }

    public unsafe partial class DisasmOptionsAndArgsT : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 32)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::libopcodes.DisasmOptionsT.__Internal options;

            [FieldOffset(24)]
            internal global::System.IntPtr args;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0disasm_options_and_args_t@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.DisasmOptionsAndArgsT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.DisasmOptionsAndArgsT>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::libopcodes.DisasmOptionsAndArgsT __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::libopcodes.DisasmOptionsAndArgsT(native.ToPointer(), skipVTables);
        }

        internal static global::libopcodes.DisasmOptionsAndArgsT __CreateInstance(global::libopcodes.DisasmOptionsAndArgsT.__Internal native, bool skipVTables = false)
        {
            return new global::libopcodes.DisasmOptionsAndArgsT(native, skipVTables);
        }

        private static void* __CopyValue(global::libopcodes.DisasmOptionsAndArgsT.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::libopcodes.DisasmOptionsAndArgsT.__Internal));
            *(global::libopcodes.DisasmOptionsAndArgsT.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private DisasmOptionsAndArgsT(global::libopcodes.DisasmOptionsAndArgsT.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected DisasmOptionsAndArgsT(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public DisasmOptionsAndArgsT()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::libopcodes.DisasmOptionsAndArgsT.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public DisasmOptionsAndArgsT(global::libopcodes.DisasmOptionsAndArgsT _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::libopcodes.DisasmOptionsAndArgsT.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::libopcodes.DisasmOptionsAndArgsT.__Internal*) __Instance) = *((global::libopcodes.DisasmOptionsAndArgsT.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::libopcodes.DisasmOptionsAndArgsT __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::libopcodes.DisasmOptionsT Options
        {
            get
            {
                return global::libopcodes.DisasmOptionsT.__CreateInstance(new global::System.IntPtr(&((global::libopcodes.DisasmOptionsAndArgsT.__Internal*) __Instance)->options));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::libopcodes.DisasmOptionsAndArgsT.__Internal*)__Instance)->options = *(global::libopcodes.DisasmOptionsT.__Internal*) value.__Instance;
            }
        }

        public global::libopcodes.DisasmOptionArgT Args
        {
            get
            {
                global::libopcodes.DisasmOptionArgT __result0;
                if (((global::libopcodes.DisasmOptionsAndArgsT.__Internal*) __Instance)->args == IntPtr.Zero) __result0 = null;
                else if (global::libopcodes.DisasmOptionArgT.NativeToManagedMap.ContainsKey(((global::libopcodes.DisasmOptionsAndArgsT.__Internal*) __Instance)->args))
                    __result0 = (global::libopcodes.DisasmOptionArgT) global::libopcodes.DisasmOptionArgT.NativeToManagedMap[((global::libopcodes.DisasmOptionsAndArgsT.__Internal*) __Instance)->args];
                else __result0 = global::libopcodes.DisasmOptionArgT.__CreateInstance(((global::libopcodes.DisasmOptionsAndArgsT.__Internal*) __Instance)->args);
                return __result0;
            }

            set
            {
                ((global::libopcodes.DisasmOptionsAndArgsT.__Internal*)__Instance)->args = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }
    }

    public unsafe partial class dis_asm
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="print_insn_m32c")]
            internal static extern int PrintInsnM32c(ulong _0, global::System.IntPtr _1);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="print_insn_mep")]
            internal static extern int PrintInsnMep(ulong _0, global::System.IntPtr _1);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="print_insn_s12z")]
            internal static extern int PrintInsnS12z(ulong _0, global::System.IntPtr _1);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="print_insn_sh")]
            internal static extern int PrintInsnSh(ulong _0, global::System.IntPtr _1);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="print_insn_sparc")]
            internal static extern int PrintInsnSparc(ulong _0, global::System.IntPtr _1);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="print_insn_rx")]
            internal static extern int PrintInsnRx(ulong _0, global::System.IntPtr _1);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="print_insn_rl78")]
            internal static extern int PrintInsnRl78(ulong _0, global::System.IntPtr _1);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="print_insn_rl78_g10")]
            internal static extern int PrintInsnRl78G10(ulong _0, global::System.IntPtr _1);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="print_insn_rl78_g13")]
            internal static extern int PrintInsnRl78G13(ulong _0, global::System.IntPtr _1);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="print_insn_rl78_g14")]
            internal static extern int PrintInsnRl78G14(ulong _0, global::System.IntPtr _1);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="arc_get_disassembler")]
            internal static extern global::System.IntPtr ArcGetDisassembler(global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cris_get_disassembler")]
            internal static extern global::System.IntPtr CrisGetDisassembler(global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="print_aarch64_disassembler_options")]
            internal static extern void PrintAarch64DisassemblerOptions(global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="print_i386_disassembler_options")]
            internal static extern void PrintI386DisassemblerOptions(global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="print_mips_disassembler_options")]
            internal static extern void PrintMipsDisassemblerOptions(global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="print_nfp_disassembler_options")]
            internal static extern void PrintNfpDisassemblerOptions(global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="print_ppc_disassembler_options")]
            internal static extern void PrintPpcDisassemblerOptions(global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="print_riscv_disassembler_options")]
            internal static extern void PrintRiscvDisassemblerOptions(global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="print_arm_disassembler_options")]
            internal static extern void PrintArmDisassemblerOptions(global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="print_arc_disassembler_options")]
            internal static extern void PrintArcDisassemblerOptions(global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="print_s390_disassembler_options")]
            internal static extern void PrintS390DisassemblerOptions(global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="print_wasm32_disassembler_options")]
            internal static extern void PrintWasm32DisassemblerOptions(global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="aarch64_symbol_is_valid")]
            internal static extern int Aarch64SymbolIsValid(global::System.IntPtr _0, global::System.IntPtr _1);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="arm_symbol_is_valid")]
            internal static extern int ArmSymbolIsValid(global::System.IntPtr _0, global::System.IntPtr _1);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="csky_symbol_is_valid")]
            internal static extern int CskySymbolIsValid(global::System.IntPtr _0, global::System.IntPtr _1);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="riscv_symbol_is_valid")]
            internal static extern int RiscvSymbolIsValid(global::System.IntPtr _0, global::System.IntPtr _1);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="disassemble_init_powerpc")]
            internal static extern void DisassembleInitPowerpc(global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="disassemble_init_s390")]
            internal static extern void DisassembleInitS390(global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="disassemble_init_wasm32")]
            internal static extern void DisassembleInitWasm32(global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="disassemble_init_nds32")]
            internal static extern void DisassembleInitNds32(global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="disassembler_options_arm")]
            internal static extern global::System.IntPtr DisassemblerOptionsArm();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="disassembler_options_mips")]
            internal static extern global::System.IntPtr DisassemblerOptionsMips();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="disassembler_options_powerpc")]
            internal static extern global::System.IntPtr DisassemblerOptionsPowerpc();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="disassembler_options_s390")]
            internal static extern global::System.IntPtr DisassemblerOptionsS390();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="disassembler")]
            internal static extern global::System.IntPtr Disassembler(global::libopcodes.BfdArchitecture arc, int big, uint mach, global::System.IntPtr abfd);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="disassemble_init_for_target")]
            internal static extern void DisassembleInitForTarget(global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="disassemble_free_target")]
            internal static extern void DisassembleFreeTarget(global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="disassembler_usage")]
            internal static extern void DisassemblerUsage(global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="remove_whitespace_and_extra_commas")]
            internal static extern sbyte* RemoveWhitespaceAndExtraCommas(sbyte* _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="disassembler_options_cmp")]
            internal static extern int DisassemblerOptionsCmp([MarshalAs(UnmanagedType.LPUTF8Str)] string _0, [MarshalAs(UnmanagedType.LPUTF8Str)] string _1);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?next_disassembler_option@@YAPEBDPEBD@Z")]
            internal static extern global::System.IntPtr NextDisassemblerOption([MarshalAs(UnmanagedType.LPUTF8Str)] string options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="buffer_read_memory")]
            internal static extern int BufferReadMemory(ulong _0, byte* _1, uint _2, global::System.IntPtr _3);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="perror_memory")]
            internal static extern void PerrorMemory(int _0, ulong _1, global::System.IntPtr _2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="generic_print_address")]
            internal static extern void GenericPrintAddress(ulong _0, global::System.IntPtr _1);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="generic_symbol_at_address")]
            internal static extern int GenericSymbolAtAddress(ulong _0, global::System.IntPtr _1);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="generic_symbol_is_valid")]
            internal static extern int GenericSymbolIsValid(global::System.IntPtr _0, global::System.IntPtr _1);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="init_disassemble_info")]
            internal static extern void InitDisassembleInfo(global::System.IntPtr dinfo, global::System.IntPtr stream, global::System.IntPtr fprintf_func);
        }

        public static int PrintInsnM32c(ulong _0, global::libopcodes.DisassembleInfo _1)
        {
            var __arg1 = ReferenceEquals(_1, null) ? global::System.IntPtr.Zero : _1.__Instance;
            var __ret = __Internal.PrintInsnM32c(_0, __arg1);
            return __ret;
        }

        public static int PrintInsnMep(ulong _0, global::libopcodes.DisassembleInfo _1)
        {
            var __arg1 = ReferenceEquals(_1, null) ? global::System.IntPtr.Zero : _1.__Instance;
            var __ret = __Internal.PrintInsnMep(_0, __arg1);
            return __ret;
        }

        public static int PrintInsnS12z(ulong _0, global::libopcodes.DisassembleInfo _1)
        {
            var __arg1 = ReferenceEquals(_1, null) ? global::System.IntPtr.Zero : _1.__Instance;
            var __ret = __Internal.PrintInsnS12z(_0, __arg1);
            return __ret;
        }

        public static int PrintInsnSh(ulong _0, global::libopcodes.DisassembleInfo _1)
        {
            var __arg1 = ReferenceEquals(_1, null) ? global::System.IntPtr.Zero : _1.__Instance;
            var __ret = __Internal.PrintInsnSh(_0, __arg1);
            return __ret;
        }

        public static int PrintInsnSparc(ulong _0, global::libopcodes.DisassembleInfo _1)
        {
            var __arg1 = ReferenceEquals(_1, null) ? global::System.IntPtr.Zero : _1.__Instance;
            var __ret = __Internal.PrintInsnSparc(_0, __arg1);
            return __ret;
        }

        public static int PrintInsnRx(ulong _0, global::libopcodes.DisassembleInfo _1)
        {
            var __arg1 = ReferenceEquals(_1, null) ? global::System.IntPtr.Zero : _1.__Instance;
            var __ret = __Internal.PrintInsnRx(_0, __arg1);
            return __ret;
        }

        public static int PrintInsnRl78(ulong _0, global::libopcodes.DisassembleInfo _1)
        {
            var __arg1 = ReferenceEquals(_1, null) ? global::System.IntPtr.Zero : _1.__Instance;
            var __ret = __Internal.PrintInsnRl78(_0, __arg1);
            return __ret;
        }

        public static int PrintInsnRl78G10(ulong _0, global::libopcodes.DisassembleInfo _1)
        {
            var __arg1 = ReferenceEquals(_1, null) ? global::System.IntPtr.Zero : _1.__Instance;
            var __ret = __Internal.PrintInsnRl78G10(_0, __arg1);
            return __ret;
        }

        public static int PrintInsnRl78G13(ulong _0, global::libopcodes.DisassembleInfo _1)
        {
            var __arg1 = ReferenceEquals(_1, null) ? global::System.IntPtr.Zero : _1.__Instance;
            var __ret = __Internal.PrintInsnRl78G13(_0, __arg1);
            return __ret;
        }

        public static int PrintInsnRl78G14(ulong _0, global::libopcodes.DisassembleInfo _1)
        {
            var __arg1 = ReferenceEquals(_1, null) ? global::System.IntPtr.Zero : _1.__Instance;
            var __ret = __Internal.PrintInsnRl78G14(_0, __arg1);
            return __ret;
        }

        public static global::libopcodes.DisassemblerFtype ArcGetDisassembler(global::libopcodes.Bfd _0)
        {
            var __arg0 = ReferenceEquals(_0, null) ? global::System.IntPtr.Zero : _0.__Instance;
            var __ret = __Internal.ArcGetDisassembler(__arg0);
            var __ptr0 = __ret;
            return __ptr0 == IntPtr.Zero? null : (global::libopcodes.DisassemblerFtype) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::libopcodes.DisassemblerFtype));
        }

        public static global::libopcodes.DisassemblerFtype CrisGetDisassembler(global::libopcodes.Bfd _0)
        {
            var __arg0 = ReferenceEquals(_0, null) ? global::System.IntPtr.Zero : _0.__Instance;
            var __ret = __Internal.CrisGetDisassembler(__arg0);
            var __ptr0 = __ret;
            return __ptr0 == IntPtr.Zero? null : (global::libopcodes.DisassemblerFtype) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::libopcodes.DisassemblerFtype));
        }

        public static void PrintAarch64DisassemblerOptions(global::System.IntPtr _0)
        {
            __Internal.PrintAarch64DisassemblerOptions(_0);
        }

        public static void PrintI386DisassemblerOptions(global::System.IntPtr _0)
        {
            __Internal.PrintI386DisassemblerOptions(_0);
        }

        public static void PrintMipsDisassemblerOptions(global::System.IntPtr _0)
        {
            __Internal.PrintMipsDisassemblerOptions(_0);
        }

        public static void PrintNfpDisassemblerOptions(global::System.IntPtr _0)
        {
            __Internal.PrintNfpDisassemblerOptions(_0);
        }

        public static void PrintPpcDisassemblerOptions(global::System.IntPtr _0)
        {
            __Internal.PrintPpcDisassemblerOptions(_0);
        }

        public static void PrintRiscvDisassemblerOptions(global::System.IntPtr _0)
        {
            __Internal.PrintRiscvDisassemblerOptions(_0);
        }

        public static void PrintArmDisassemblerOptions(global::System.IntPtr _0)
        {
            __Internal.PrintArmDisassemblerOptions(_0);
        }

        public static void PrintArcDisassemblerOptions(global::System.IntPtr _0)
        {
            __Internal.PrintArcDisassemblerOptions(_0);
        }

        public static void PrintS390DisassemblerOptions(global::System.IntPtr _0)
        {
            __Internal.PrintS390DisassemblerOptions(_0);
        }

        public static void PrintWasm32DisassemblerOptions(global::System.IntPtr _0)
        {
            __Internal.PrintWasm32DisassemblerOptions(_0);
        }

        public static int Aarch64SymbolIsValid(global::libopcodes.BfdSymbol _0, global::libopcodes.DisassembleInfo _1)
        {
            var __arg0 = ReferenceEquals(_0, null) ? global::System.IntPtr.Zero : _0.__Instance;
            var __arg1 = ReferenceEquals(_1, null) ? global::System.IntPtr.Zero : _1.__Instance;
            var __ret = __Internal.Aarch64SymbolIsValid(__arg0, __arg1);
            return __ret;
        }

        public static int ArmSymbolIsValid(global::libopcodes.BfdSymbol _0, global::libopcodes.DisassembleInfo _1)
        {
            var __arg0 = ReferenceEquals(_0, null) ? global::System.IntPtr.Zero : _0.__Instance;
            var __arg1 = ReferenceEquals(_1, null) ? global::System.IntPtr.Zero : _1.__Instance;
            var __ret = __Internal.ArmSymbolIsValid(__arg0, __arg1);
            return __ret;
        }

        public static int CskySymbolIsValid(global::libopcodes.BfdSymbol _0, global::libopcodes.DisassembleInfo _1)
        {
            var __arg0 = ReferenceEquals(_0, null) ? global::System.IntPtr.Zero : _0.__Instance;
            var __arg1 = ReferenceEquals(_1, null) ? global::System.IntPtr.Zero : _1.__Instance;
            var __ret = __Internal.CskySymbolIsValid(__arg0, __arg1);
            return __ret;
        }

        public static int RiscvSymbolIsValid(global::libopcodes.BfdSymbol _0, global::libopcodes.DisassembleInfo _1)
        {
            var __arg0 = ReferenceEquals(_0, null) ? global::System.IntPtr.Zero : _0.__Instance;
            var __arg1 = ReferenceEquals(_1, null) ? global::System.IntPtr.Zero : _1.__Instance;
            var __ret = __Internal.RiscvSymbolIsValid(__arg0, __arg1);
            return __ret;
        }

        public static void DisassembleInitPowerpc(global::libopcodes.DisassembleInfo _0)
        {
            var __arg0 = ReferenceEquals(_0, null) ? global::System.IntPtr.Zero : _0.__Instance;
            __Internal.DisassembleInitPowerpc(__arg0);
        }

        public static void DisassembleInitS390(global::libopcodes.DisassembleInfo _0)
        {
            var __arg0 = ReferenceEquals(_0, null) ? global::System.IntPtr.Zero : _0.__Instance;
            __Internal.DisassembleInitS390(__arg0);
        }

        public static void DisassembleInitWasm32(global::libopcodes.DisassembleInfo _0)
        {
            var __arg0 = ReferenceEquals(_0, null) ? global::System.IntPtr.Zero : _0.__Instance;
            __Internal.DisassembleInitWasm32(__arg0);
        }

        public static void DisassembleInitNds32(global::libopcodes.DisassembleInfo _0)
        {
            var __arg0 = ReferenceEquals(_0, null) ? global::System.IntPtr.Zero : _0.__Instance;
            __Internal.DisassembleInitNds32(__arg0);
        }

        public static global::libopcodes.DisasmOptionsAndArgsT DisassemblerOptionsArm()
        {
            var __ret = __Internal.DisassemblerOptionsArm();
            global::libopcodes.DisasmOptionsAndArgsT __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::libopcodes.DisasmOptionsAndArgsT.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::libopcodes.DisasmOptionsAndArgsT) global::libopcodes.DisasmOptionsAndArgsT.NativeToManagedMap[__ret];
            else __result0 = global::libopcodes.DisasmOptionsAndArgsT.__CreateInstance(__ret);
            return __result0;
        }

        public static global::libopcodes.DisasmOptionsAndArgsT DisassemblerOptionsMips()
        {
            var __ret = __Internal.DisassemblerOptionsMips();
            global::libopcodes.DisasmOptionsAndArgsT __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::libopcodes.DisasmOptionsAndArgsT.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::libopcodes.DisasmOptionsAndArgsT) global::libopcodes.DisasmOptionsAndArgsT.NativeToManagedMap[__ret];
            else __result0 = global::libopcodes.DisasmOptionsAndArgsT.__CreateInstance(__ret);
            return __result0;
        }

        public static global::libopcodes.DisasmOptionsAndArgsT DisassemblerOptionsPowerpc()
        {
            var __ret = __Internal.DisassemblerOptionsPowerpc();
            global::libopcodes.DisasmOptionsAndArgsT __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::libopcodes.DisasmOptionsAndArgsT.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::libopcodes.DisasmOptionsAndArgsT) global::libopcodes.DisasmOptionsAndArgsT.NativeToManagedMap[__ret];
            else __result0 = global::libopcodes.DisasmOptionsAndArgsT.__CreateInstance(__ret);
            return __result0;
        }

        public static global::libopcodes.DisasmOptionsAndArgsT DisassemblerOptionsS390()
        {
            var __ret = __Internal.DisassemblerOptionsS390();
            global::libopcodes.DisasmOptionsAndArgsT __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::libopcodes.DisasmOptionsAndArgsT.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::libopcodes.DisasmOptionsAndArgsT) global::libopcodes.DisasmOptionsAndArgsT.NativeToManagedMap[__ret];
            else __result0 = global::libopcodes.DisasmOptionsAndArgsT.__CreateInstance(__ret);
            return __result0;
        }

        public static global::libopcodes.DisassemblerFtype Disassembler(global::libopcodes.BfdArchitecture arc, int big, uint mach, global::libopcodes.Bfd abfd)
        {
            var __arg3 = ReferenceEquals(abfd, null) ? global::System.IntPtr.Zero : abfd.__Instance;
            var __ret = __Internal.Disassembler(arc, big, mach, __arg3);
            var __ptr0 = __ret;
            return __ptr0 == IntPtr.Zero? null : (global::libopcodes.DisassemblerFtype) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::libopcodes.DisassemblerFtype));
        }

        public static void DisassembleInitForTarget(global::libopcodes.DisassembleInfo _0)
        {
            var __arg0 = ReferenceEquals(_0, null) ? global::System.IntPtr.Zero : _0.__Instance;
            __Internal.DisassembleInitForTarget(__arg0);
        }

        public static void DisassembleFreeTarget(global::libopcodes.DisassembleInfo _0)
        {
            var __arg0 = ReferenceEquals(_0, null) ? global::System.IntPtr.Zero : _0.__Instance;
            __Internal.DisassembleFreeTarget(__arg0);
        }

        public static void DisassemblerUsage(global::System.IntPtr _0)
        {
            __Internal.DisassemblerUsage(_0);
        }

        public static sbyte* RemoveWhitespaceAndExtraCommas(sbyte* _0)
        {
            var __ret = __Internal.RemoveWhitespaceAndExtraCommas(_0);
            return __ret;
        }

        public static int DisassemblerOptionsCmp(string _0, string _1)
        {
            var __ret = __Internal.DisassemblerOptionsCmp(_0, _1);
            return __ret;
        }

        public static string NextDisassemblerOption(string options)
        {
            var __ret = __Internal.NextDisassemblerOption(options);
            if (__ret == global::System.IntPtr.Zero)
                return default(string);
            var __retPtr = (byte*) __ret;
            int __length = 0;
            while (*(__retPtr++) != 0) __length += sizeof(byte);
            return global::System.Text.Encoding.UTF8.GetString((byte*) __ret, __length);
        }

        public static int BufferReadMemory(ulong _0, byte* _1, uint _2, global::libopcodes.DisassembleInfo _3)
        {
            var __arg3 = ReferenceEquals(_3, null) ? global::System.IntPtr.Zero : _3.__Instance;
            var __ret = __Internal.BufferReadMemory(_0, _1, _2, __arg3);
            return __ret;
        }

        public static void PerrorMemory(int _0, ulong _1, global::libopcodes.DisassembleInfo _2)
        {
            var __arg2 = ReferenceEquals(_2, null) ? global::System.IntPtr.Zero : _2.__Instance;
            __Internal.PerrorMemory(_0, _1, __arg2);
        }

        public static void GenericPrintAddress(ulong _0, global::libopcodes.DisassembleInfo _1)
        {
            var __arg1 = ReferenceEquals(_1, null) ? global::System.IntPtr.Zero : _1.__Instance;
            __Internal.GenericPrintAddress(_0, __arg1);
        }

        public static int GenericSymbolAtAddress(ulong _0, global::libopcodes.DisassembleInfo _1)
        {
            var __arg1 = ReferenceEquals(_1, null) ? global::System.IntPtr.Zero : _1.__Instance;
            var __ret = __Internal.GenericSymbolAtAddress(_0, __arg1);
            return __ret;
        }

        public static int GenericSymbolIsValid(global::libopcodes.BfdSymbol _0, global::libopcodes.DisassembleInfo _1)
        {
            var __arg0 = ReferenceEquals(_0, null) ? global::System.IntPtr.Zero : _0.__Instance;
            var __arg1 = ReferenceEquals(_1, null) ? global::System.IntPtr.Zero : _1.__Instance;
            var __ret = __Internal.GenericSymbolIsValid(__arg0, __arg1);
            return __ret;
        }

        public static void InitDisassembleInfo(global::libopcodes.DisassembleInfo dinfo, global::System.IntPtr stream, global::libopcodes.FprintfFtype fprintf_func)
        {
            var __arg0 = ReferenceEquals(dinfo, null) ? global::System.IntPtr.Zero : dinfo.__Instance;
            var __arg2 = fprintf_func == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(fprintf_func);
            __Internal.InitDisassembleInfo(__arg0, stream, __arg2);
        }
    }

    public enum BfdFlavour
    {
        BfdTargetUnknownFlavour = 0,
        BfdTargetAoutFlavour = 1,
        BfdTargetCoffFlavour = 2,
        BfdTargetEcoffFlavour = 3,
        BfdTargetXcoffFlavour = 4,
        BfdTargetElfFlavour = 5,
        BfdTargetTekhexFlavour = 6,
        BfdTargetSrecFlavour = 7,
        BfdTargetVerilogFlavour = 8,
        BfdTargetIhexFlavour = 9,
        BfdTargetSomFlavour = 10,
        BfdTargetOs9kFlavour = 11,
        BfdTargetVersadosFlavour = 12,
        BfdTargetMsdosFlavour = 13,
        BfdTargetOvaxFlavour = 14,
        BfdTargetEvaxFlavour = 15,
        BfdTargetMmoFlavour = 16,
        BfdTargetMachOFlavour = 17,
        BfdTargetPefFlavour = 18,
        BfdTargetPefXlibFlavour = 19,
        BfdTargetSymFlavour = 20
    }

    public enum BfdEndian
    {
        BFD_ENDIAN_BIG = 0,
        BFD_ENDIAN_LITTLE = 1,
        BFD_ENDIAN_UNKNOWN = 2
    }

    public enum ComplainOverflow
    {
        ComplainOverflowDont = 0,
        ComplainOverflowBitfield = 1,
        ComplainOverflowSigned = 2,
        ComplainOverflowUnsigned = 3
    }

    public enum BfdRelocStatus
    {
        BfdRelocOk = 2,
        BfdRelocOverflow = 3,
        BfdRelocOutofrange = 4,
        BfdRelocContinue = 5,
        BfdRelocNotsupported = 6,
        BfdRelocOther = 7,
        BfdRelocUndefined = 8,
        BfdRelocDangerous = 9
    }

    public enum BfdPrintSymbol
    {
        BfdPrintSymbolName = 0,
        BfdPrintSymbolMore = 1,
        BfdPrintSymbolAll = 2
    }

    public enum BfdRelocCodeReal
    {
        DummyFirstBfdRelocCodeReal = 0,
        BFD_RELOC_64 = 1,
        BFD_RELOC_32 = 2,
        BFD_RELOC_26 = 3,
        BFD_RELOC_24 = 4,
        BFD_RELOC_16 = 5,
        BFD_RELOC_14 = 6,
        BFD_RELOC_8 = 7,
        BFD_RELOC_64PCREL = 8,
        BFD_RELOC_32PCREL = 9,
        BFD_RELOC_24PCREL = 10,
        BFD_RELOC_16PCREL = 11,
        BFD_RELOC_12PCREL = 12,
        BFD_RELOC_8PCREL = 13,
        BFD_RELOC_32SECREL = 14,
        BFD_RELOC_32GOT_PCREL = 15,
        BFD_RELOC_16GOT_PCREL = 16,
        BFD_RELOC_8GOT_PCREL = 17,
        BFD_RELOC_32GOTOFF = 18,
        BFD_RELOC_16GOTOFF = 19,
        BFD_RELOC_LO16GOTOFF = 20,
        BFD_RELOC_HI16GOTOFF = 21,
        BFD_RELOC_HI16S_GOTOFF = 22,
        BFD_RELOC_8GOTOFF = 23,
        BFD_RELOC_64PLT_PCREL = 24,
        BFD_RELOC_32PLT_PCREL = 25,
        BFD_RELOC_24PLT_PCREL = 26,
        BFD_RELOC_16PLT_PCREL = 27,
        BFD_RELOC_8PLT_PCREL = 28,
        BFD_RELOC_64PLTOFF = 29,
        BFD_RELOC_32PLTOFF = 30,
        BFD_RELOC_16PLTOFF = 31,
        BFD_RELOC_LO16PLTOFF = 32,
        BFD_RELOC_HI16PLTOFF = 33,
        BFD_RELOC_HI16S_PLTOFF = 34,
        BFD_RELOC_8PLTOFF = 35,
        BFD_RELOC_SIZE32 = 36,
        BFD_RELOC_SIZE64 = 37,
        BFD_RELOC_68K_GLOB_DAT = 38,
        BFD_RELOC_68K_JMP_SLOT = 39,
        BFD_RELOC_68K_RELATIVE = 40,
        BFD_RELOC_68K_TLS_GD32 = 41,
        BFD_RELOC_68K_TLS_GD16 = 42,
        BFD_RELOC_68K_TLS_GD8 = 43,
        BFD_RELOC_68K_TLS_LDM32 = 44,
        BFD_RELOC_68K_TLS_LDM16 = 45,
        BFD_RELOC_68K_TLS_LDM8 = 46,
        BFD_RELOC_68K_TLS_LDO32 = 47,
        BFD_RELOC_68K_TLS_LDO16 = 48,
        BFD_RELOC_68K_TLS_LDO8 = 49,
        BFD_RELOC_68K_TLS_IE32 = 50,
        BFD_RELOC_68K_TLS_IE16 = 51,
        BFD_RELOC_68K_TLS_IE8 = 52,
        BFD_RELOC_68K_TLS_LE32 = 53,
        BFD_RELOC_68K_TLS_LE16 = 54,
        BFD_RELOC_68K_TLS_LE8 = 55,
        BFD_RELOC_32BASEREL = 56,
        BFD_RELOC_16BASEREL = 57,
        BFD_RELOC_LO16BASEREL = 58,
        BFD_RELOC_HI16BASEREL = 59,
        BFD_RELOC_HI16S_BASEREL = 60,
        BFD_RELOC_8BASEREL = 61,
        BFD_RELOC_RVA = 62,
        BFD_RELOC_8FFnn = 63,
        BFD_RELOC_32PCREL_S2 = 64,
        BFD_RELOC_16PCREL_S2 = 65,
        BFD_RELOC_23PCREL_S2 = 66,
        BFD_RELOC_HI22 = 67,
        BFD_RELOC_LO10 = 68,
        BFD_RELOC_GPREL16 = 69,
        BFD_RELOC_GPREL32 = 70,
        BFD_RELOC_NONE = 71,
        BFD_RELOC_SPARC_WDISP22 = 72,
        BFD_RELOC_SPARC22 = 73,
        BFD_RELOC_SPARC13 = 74,
        BFD_RELOC_SPARC_GOT10 = 75,
        BFD_RELOC_SPARC_GOT13 = 76,
        BFD_RELOC_SPARC_GOT22 = 77,
        BFD_RELOC_SPARC_PC10 = 78,
        BFD_RELOC_SPARC_PC22 = 79,
        BFD_RELOC_SPARC_WPLT30 = 80,
        BFD_RELOC_SPARC_COPY = 81,
        BFD_RELOC_SPARC_GLOB_DAT = 82,
        BFD_RELOC_SPARC_JMP_SLOT = 83,
        BFD_RELOC_SPARC_RELATIVE = 84,
        BFD_RELOC_SPARC_UA16 = 85,
        BFD_RELOC_SPARC_UA32 = 86,
        BFD_RELOC_SPARC_UA64 = 87,
        BFD_RELOC_SPARC_GOTDATA_HIX22 = 88,
        BFD_RELOC_SPARC_GOTDATA_LOX10 = 89,
        BFD_RELOC_SPARC_GOTDATA_OP_HIX22 = 90,
        BFD_RELOC_SPARC_GOTDATA_OP_LOX10 = 91,
        BFD_RELOC_SPARC_GOTDATA_OP = 92,
        BFD_RELOC_SPARC_JMP_IREL = 93,
        BFD_RELOC_SPARC_IRELATIVE = 94,
        BFD_RELOC_SPARC_BASE13 = 95,
        BFD_RELOC_SPARC_BASE22 = 96,
        BFD_RELOC_SPARC_10 = 97,
        BFD_RELOC_SPARC_11 = 98,
        BFD_RELOC_SPARC_OLO10 = 99,
        BFD_RELOC_SPARC_HH22 = 100,
        BFD_RELOC_SPARC_HM10 = 101,
        BFD_RELOC_SPARC_LM22 = 102,
        BFD_RELOC_SPARC_PC_HH22 = 103,
        BFD_RELOC_SPARC_PC_HM10 = 104,
        BFD_RELOC_SPARC_PC_LM22 = 105,
        BFD_RELOC_SPARC_WDISP16 = 106,
        BFD_RELOC_SPARC_WDISP19 = 107,
        BFD_RELOC_SPARC_7 = 108,
        BFD_RELOC_SPARC_6 = 109,
        BFD_RELOC_SPARC_5 = 110,
        BFD_RELOC_SPARC_PLT32 = 111,
        BFD_RELOC_SPARC_PLT64 = 112,
        BFD_RELOC_SPARC_HIX22 = 113,
        BFD_RELOC_SPARC_LOX10 = 114,
        BFD_RELOC_SPARC_H44 = 115,
        BFD_RELOC_SPARC_M44 = 116,
        BFD_RELOC_SPARC_L44 = 117,
        BFD_RELOC_SPARC_REGISTER = 118,
        BFD_RELOC_SPARC_H34 = 119,
        BFD_RELOC_SPARC_SIZE32 = 120,
        BFD_RELOC_SPARC_SIZE64 = 121,
        BFD_RELOC_SPARC_WDISP10 = 122,
        BFD_RELOC_SPARC_REV32 = 123,
        BFD_RELOC_SPARC_TLS_GD_HI22 = 124,
        BFD_RELOC_SPARC_TLS_GD_LO10 = 125,
        BFD_RELOC_SPARC_TLS_GD_ADD = 126,
        BFD_RELOC_SPARC_TLS_GD_CALL = 127,
        BFD_RELOC_SPARC_TLS_LDM_HI22 = 128,
        BFD_RELOC_SPARC_TLS_LDM_LO10 = 129,
        BFD_RELOC_SPARC_TLS_LDM_ADD = 130,
        BFD_RELOC_SPARC_TLS_LDM_CALL = 131,
        BFD_RELOC_SPARC_TLS_LDO_HIX22 = 132,
        BFD_RELOC_SPARC_TLS_LDO_LOX10 = 133,
        BFD_RELOC_SPARC_TLS_LDO_ADD = 134,
        BFD_RELOC_SPARC_TLS_IE_HI22 = 135,
        BFD_RELOC_SPARC_TLS_IE_LO10 = 136,
        BFD_RELOC_SPARC_TLS_IE_LD = 137,
        BFD_RELOC_SPARC_TLS_IE_LDX = 138,
        BFD_RELOC_SPARC_TLS_IE_ADD = 139,
        BFD_RELOC_SPARC_TLS_LE_HIX22 = 140,
        BFD_RELOC_SPARC_TLS_LE_LOX10 = 141,
        BFD_RELOC_SPARC_TLS_DTPMOD32 = 142,
        BFD_RELOC_SPARC_TLS_DTPMOD64 = 143,
        BFD_RELOC_SPARC_TLS_DTPOFF32 = 144,
        BFD_RELOC_SPARC_TLS_DTPOFF64 = 145,
        BFD_RELOC_SPARC_TLS_TPOFF32 = 146,
        BFD_RELOC_SPARC_TLS_TPOFF64 = 147,
        BFD_RELOC_SPU_IMM7 = 148,
        BFD_RELOC_SPU_IMM8 = 149,
        BFD_RELOC_SPU_IMM10 = 150,
        BFD_RELOC_SPU_IMM10W = 151,
        BFD_RELOC_SPU_IMM16 = 152,
        BFD_RELOC_SPU_IMM16W = 153,
        BFD_RELOC_SPU_IMM18 = 154,
        BFD_RELOC_SPU_PCREL9a = 155,
        BFD_RELOC_SPU_PCREL9b = 156,
        BFD_RELOC_SPU_PCREL16 = 157,
        BFD_RELOC_SPU_LO16 = 158,
        BFD_RELOC_SPU_HI16 = 159,
        BFD_RELOC_SPU_PPU32 = 160,
        BFD_RELOC_SPU_PPU64 = 161,
        BFD_RELOC_SPU_ADD_PIC = 162,
        BFD_RELOC_ALPHA_GPDISP_HI16 = 163,
        BFD_RELOC_ALPHA_GPDISP_LO16 = 164,
        BFD_RELOC_ALPHA_GPDISP = 165,
        BFD_RELOC_ALPHA_LITERAL = 166,
        BFD_RELOC_ALPHA_ELF_LITERAL = 167,
        BFD_RELOC_ALPHA_LITUSE = 168,
        BFD_RELOC_ALPHA_HINT = 169,
        BFD_RELOC_ALPHA_LINKAGE = 170,
        BFD_RELOC_ALPHA_CODEADDR = 171,
        BFD_RELOC_ALPHA_GPREL_HI16 = 172,
        BFD_RELOC_ALPHA_GPREL_LO16 = 173,
        BFD_RELOC_ALPHA_BRSGP = 174,
        BFD_RELOC_ALPHA_NOP = 175,
        BFD_RELOC_ALPHA_BSR = 176,
        BFD_RELOC_ALPHA_LDA = 177,
        BFD_RELOC_ALPHA_BOH = 178,
        BFD_RELOC_ALPHA_TLSGD = 179,
        BFD_RELOC_ALPHA_TLSLDM = 180,
        BFD_RELOC_ALPHA_DTPMOD64 = 181,
        BFD_RELOC_ALPHA_GOTDTPREL16 = 182,
        BFD_RELOC_ALPHA_DTPREL64 = 183,
        BFD_RELOC_ALPHA_DTPREL_HI16 = 184,
        BFD_RELOC_ALPHA_DTPREL_LO16 = 185,
        BFD_RELOC_ALPHA_DTPREL16 = 186,
        BFD_RELOC_ALPHA_GOTTPREL16 = 187,
        BFD_RELOC_ALPHA_TPREL64 = 188,
        BFD_RELOC_ALPHA_TPREL_HI16 = 189,
        BFD_RELOC_ALPHA_TPREL_LO16 = 190,
        BFD_RELOC_ALPHA_TPREL16 = 191,
        BFD_RELOC_MIPS_JMP = 192,
        BFD_RELOC_MICROMIPS_JMP = 193,
        BFD_RELOC_MIPS16JMP = 194,
        BFD_RELOC_MIPS16GPREL = 195,
        BFD_RELOC_HI16 = 196,
        BFD_RELOC_HI16S = 197,
        BFD_RELOC_LO16 = 198,
        BFD_RELOC_HI16PCREL = 199,
        BFD_RELOC_HI16S_PCREL = 200,
        BFD_RELOC_LO16PCREL = 201,
        BFD_RELOC_MIPS16GOT16 = 202,
        BFD_RELOC_MIPS16CALL16 = 203,
        BFD_RELOC_MIPS16HI16 = 204,
        BFD_RELOC_MIPS16HI16S = 205,
        BFD_RELOC_MIPS16LO16 = 206,
        BFD_RELOC_MIPS16TLS_GD = 207,
        BFD_RELOC_MIPS16TLS_LDM = 208,
        BFD_RELOC_MIPS16TLS_DTPREL_HI16 = 209,
        BFD_RELOC_MIPS16TLS_DTPREL_LO16 = 210,
        BFD_RELOC_MIPS16TLS_GOTTPREL = 211,
        BFD_RELOC_MIPS16TLS_TPREL_HI16 = 212,
        BFD_RELOC_MIPS16TLS_TPREL_LO16 = 213,
        BFD_RELOC_MIPS_LITERAL = 214,
        BFD_RELOC_MICROMIPS_LITERAL = 215,
        BFD_RELOC_MICROMIPS_7PCREL_S1 = 216,
        BFD_RELOC_MICROMIPS_10PCREL_S1 = 217,
        BFD_RELOC_MICROMIPS_16PCREL_S1 = 218,
        BFD_RELOC_MIPS16_16PCREL_S1 = 219,
        BFD_RELOC_MIPS_21PCREL_S2 = 220,
        BFD_RELOC_MIPS_26PCREL_S2 = 221,
        BFD_RELOC_MIPS_18PCREL_S3 = 222,
        BFD_RELOC_MIPS_19PCREL_S2 = 223,
        BFD_RELOC_MICROMIPS_GPREL16 = 224,
        BFD_RELOC_MICROMIPS_HI16 = 225,
        BFD_RELOC_MICROMIPS_HI16S = 226,
        BFD_RELOC_MICROMIPS_LO16 = 227,
        BFD_RELOC_MIPS_GOT16 = 228,
        BFD_RELOC_MICROMIPS_GOT16 = 229,
        BFD_RELOC_MIPS_CALL16 = 230,
        BFD_RELOC_MICROMIPS_CALL16 = 231,
        BFD_RELOC_MIPS_GOT_HI16 = 232,
        BFD_RELOC_MICROMIPS_GOT_HI16 = 233,
        BFD_RELOC_MIPS_GOT_LO16 = 234,
        BFD_RELOC_MICROMIPS_GOT_LO16 = 235,
        BFD_RELOC_MIPS_CALL_HI16 = 236,
        BFD_RELOC_MICROMIPS_CALL_HI16 = 237,
        BFD_RELOC_MIPS_CALL_LO16 = 238,
        BFD_RELOC_MICROMIPS_CALL_LO16 = 239,
        BFD_RELOC_MIPS_SUB = 240,
        BFD_RELOC_MICROMIPS_SUB = 241,
        BFD_RELOC_MIPS_GOT_PAGE = 242,
        BFD_RELOC_MICROMIPS_GOT_PAGE = 243,
        BFD_RELOC_MIPS_GOT_OFST = 244,
        BFD_RELOC_MICROMIPS_GOT_OFST = 245,
        BFD_RELOC_MIPS_GOT_DISP = 246,
        BFD_RELOC_MICROMIPS_GOT_DISP = 247,
        BFD_RELOC_MIPS_SHIFT5 = 248,
        BFD_RELOC_MIPS_SHIFT6 = 249,
        BFD_RELOC_MIPS_INSERT_A = 250,
        BFD_RELOC_MIPS_INSERT_B = 251,
        BFD_RELOC_MIPS_DELETE = 252,
        BFD_RELOC_MIPS_HIGHEST = 253,
        BFD_RELOC_MICROMIPS_HIGHEST = 254,
        BFD_RELOC_MIPS_HIGHER = 255,
        BFD_RELOC_MICROMIPS_HIGHER = 256,
        BFD_RELOC_MIPS_SCN_DISP = 257,
        BFD_RELOC_MICROMIPS_SCN_DISP = 258,
        BFD_RELOC_MIPS_REL16 = 259,
        BFD_RELOC_MIPS_RELGOT = 260,
        BFD_RELOC_MIPS_JALR = 261,
        BFD_RELOC_MICROMIPS_JALR = 262,
        BFD_RELOC_MIPS_TLS_DTPMOD32 = 263,
        BFD_RELOC_MIPS_TLS_DTPREL32 = 264,
        BFD_RELOC_MIPS_TLS_DTPMOD64 = 265,
        BFD_RELOC_MIPS_TLS_DTPREL64 = 266,
        BFD_RELOC_MIPS_TLS_GD = 267,
        BFD_RELOC_MICROMIPS_TLS_GD = 268,
        BFD_RELOC_MIPS_TLS_LDM = 269,
        BFD_RELOC_MICROMIPS_TLS_LDM = 270,
        BFD_RELOC_MIPS_TLS_DTPREL_HI16 = 271,
        BFD_RELOC_MICROMIPS_TLS_DTPREL_HI16 = 272,
        BFD_RELOC_MIPS_TLS_DTPREL_LO16 = 273,
        BFD_RELOC_MICROMIPS_TLS_DTPREL_LO16 = 274,
        BFD_RELOC_MIPS_TLS_GOTTPREL = 275,
        BFD_RELOC_MICROMIPS_TLS_GOTTPREL = 276,
        BFD_RELOC_MIPS_TLS_TPREL32 = 277,
        BFD_RELOC_MIPS_TLS_TPREL64 = 278,
        BFD_RELOC_MIPS_TLS_TPREL_HI16 = 279,
        BFD_RELOC_MICROMIPS_TLS_TPREL_HI16 = 280,
        BFD_RELOC_MIPS_TLS_TPREL_LO16 = 281,
        BFD_RELOC_MICROMIPS_TLS_TPREL_LO16 = 282,
        BFD_RELOC_MIPS_EH = 283,
        BFD_RELOC_MIPS_COPY = 284,
        BFD_RELOC_MIPS_JUMP_SLOT = 285,
        BFD_RELOC_MOXIE_10PCREL = 286,
        BFD_RELOC_FT32_10 = 287,
        BFD_RELOC_FT32_20 = 288,
        BFD_RELOC_FT32_17 = 289,
        BFD_RELOC_FT32_18 = 290,
        BFD_RELOC_FT32RELAX = 291,
        BFD_RELOC_FT32SC0 = 292,
        BFD_RELOC_FT32SC1 = 293,
        BFD_RELOC_FT32_15 = 294,
        BFD_RELOC_FT32DIFF32 = 295,
        BFD_RELOC_FRV_LABEL16 = 296,
        BFD_RELOC_FRV_LABEL24 = 297,
        BFD_RELOC_FRV_LO16 = 298,
        BFD_RELOC_FRV_HI16 = 299,
        BFD_RELOC_FRV_GPREL12 = 300,
        BFD_RELOC_FRV_GPRELU12 = 301,
        BFD_RELOC_FRV_GPREL32 = 302,
        BFD_RELOC_FRV_GPRELHI = 303,
        BFD_RELOC_FRV_GPRELLO = 304,
        BFD_RELOC_FRV_GOT12 = 305,
        BFD_RELOC_FRV_GOTHI = 306,
        BFD_RELOC_FRV_GOTLO = 307,
        BFD_RELOC_FRV_FUNCDESC = 308,
        BFD_RELOC_FRV_FUNCDESC_GOT12 = 309,
        BFD_RELOC_FRV_FUNCDESC_GOTHI = 310,
        BFD_RELOC_FRV_FUNCDESC_GOTLO = 311,
        BFD_RELOC_FRV_FUNCDESC_VALUE = 312,
        BFD_RELOC_FRV_FUNCDESC_GOTOFF12 = 313,
        BFD_RELOC_FRV_FUNCDESC_GOTOFFHI = 314,
        BFD_RELOC_FRV_FUNCDESC_GOTOFFLO = 315,
        BFD_RELOC_FRV_GOTOFF12 = 316,
        BFD_RELOC_FRV_GOTOFFHI = 317,
        BFD_RELOC_FRV_GOTOFFLO = 318,
        BFD_RELOC_FRV_GETTLSOFF = 319,
        BFD_RELOC_FRV_TLSDESC_VALUE = 320,
        BFD_RELOC_FRV_GOTTLSDESC12 = 321,
        BFD_RELOC_FRV_GOTTLSDESCHI = 322,
        BFD_RELOC_FRV_GOTTLSDESCLO = 323,
        BFD_RELOC_FRV_TLSMOFF12 = 324,
        BFD_RELOC_FRV_TLSMOFFHI = 325,
        BFD_RELOC_FRV_TLSMOFFLO = 326,
        BFD_RELOC_FRV_GOTTLSOFF12 = 327,
        BFD_RELOC_FRV_GOTTLSOFFHI = 328,
        BFD_RELOC_FRV_GOTTLSOFFLO = 329,
        BFD_RELOC_FRV_TLSOFF = 330,
        BFD_RELOC_FRV_TLSDESC_RELAX = 331,
        BFD_RELOC_FRV_GETTLSOFF_RELAX = 332,
        BFD_RELOC_FRV_TLSOFF_RELAX = 333,
        BFD_RELOC_FRV_TLSMOFF = 334,
        BFD_RELOC_MN10300GOTOFF24 = 335,
        BFD_RELOC_MN10300GOT32 = 336,
        BFD_RELOC_MN10300GOT24 = 337,
        BFD_RELOC_MN10300GOT16 = 338,
        BFD_RELOC_MN10300COPY = 339,
        BFD_RELOC_MN10300GLOB_DAT = 340,
        BFD_RELOC_MN10300JMP_SLOT = 341,
        BFD_RELOC_MN10300RELATIVE = 342,
        BFD_RELOC_MN10300SYM_DIFF = 343,
        BFD_RELOC_MN10300ALIGN = 344,
        BFD_RELOC_MN10300TLS_GD = 345,
        BFD_RELOC_MN10300TLS_LD = 346,
        BFD_RELOC_MN10300TLS_LDO = 347,
        BFD_RELOC_MN10300TLS_GOTIE = 348,
        BFD_RELOC_MN10300TLS_IE = 349,
        BFD_RELOC_MN10300TLS_LE = 350,
        BFD_RELOC_MN10300TLS_DTPMOD = 351,
        BFD_RELOC_MN10300TLS_DTPOFF = 352,
        BFD_RELOC_MN10300TLS_TPOFF = 353,
        BFD_RELOC_MN10300_32PCREL = 354,
        BFD_RELOC_MN10300_16PCREL = 355,
        BFD_RELOC_386GOT32 = 356,
        BFD_RELOC_386PLT32 = 357,
        BFD_RELOC_386COPY = 358,
        BFD_RELOC_386GLOB_DAT = 359,
        BFD_RELOC_386JUMP_SLOT = 360,
        BFD_RELOC_386RELATIVE = 361,
        BFD_RELOC_386GOTOFF = 362,
        BFD_RELOC_386GOTPC = 363,
        BFD_RELOC_386TLS_TPOFF = 364,
        BFD_RELOC_386TLS_IE = 365,
        BFD_RELOC_386TLS_GOTIE = 366,
        BFD_RELOC_386TLS_LE = 367,
        BFD_RELOC_386TLS_GD = 368,
        BFD_RELOC_386TLS_LDM = 369,
        BFD_RELOC_386TLS_LDO_32 = 370,
        BFD_RELOC_386TLS_IE_32 = 371,
        BFD_RELOC_386TLS_LE_32 = 372,
        BFD_RELOC_386TLS_DTPMOD32 = 373,
        BFD_RELOC_386TLS_DTPOFF32 = 374,
        BFD_RELOC_386TLS_TPOFF32 = 375,
        BFD_RELOC_386TLS_GOTDESC = 376,
        BFD_RELOC_386TLS_DESC_CALL = 377,
        BFD_RELOC_386TLS_DESC = 378,
        BFD_RELOC_386IRELATIVE = 379,
        BFD_RELOC_386GOT32X = 380,
        BFD_RELOC_X86_64GOT32 = 381,
        BFD_RELOC_X86_64PLT32 = 382,
        BFD_RELOC_X86_64COPY = 383,
        BFD_RELOC_X86_64GLOB_DAT = 384,
        BFD_RELOC_X86_64JUMP_SLOT = 385,
        BFD_RELOC_X86_64RELATIVE = 386,
        BFD_RELOC_X86_64GOTPCREL = 387,
        BFD_RELOC_X86_64_32S = 388,
        BFD_RELOC_X86_64DTPMOD64 = 389,
        BFD_RELOC_X86_64DTPOFF64 = 390,
        BFD_RELOC_X86_64TPOFF64 = 391,
        BFD_RELOC_X86_64TLSGD = 392,
        BFD_RELOC_X86_64TLSLD = 393,
        BFD_RELOC_X86_64DTPOFF32 = 394,
        BFD_RELOC_X86_64GOTTPOFF = 395,
        BFD_RELOC_X86_64TPOFF32 = 396,
        BFD_RELOC_X86_64GOTOFF64 = 397,
        BFD_RELOC_X86_64GOTPC32 = 398,
        BFD_RELOC_X86_64GOT64 = 399,
        BFD_RELOC_X86_64GOTPCREL64 = 400,
        BFD_RELOC_X86_64GOTPC64 = 401,
        BFD_RELOC_X86_64GOTPLT64 = 402,
        BFD_RELOC_X86_64PLTOFF64 = 403,
        BFD_RELOC_X86_64GOTPC32TLSDESC = 404,
        BFD_RELOC_X86_64TLSDESC_CALL = 405,
        BFD_RELOC_X86_64TLSDESC = 406,
        BFD_RELOC_X86_64IRELATIVE = 407,
        BFD_RELOC_X86_64PC32BND = 408,
        BFD_RELOC_X86_64PLT32BND = 409,
        BFD_RELOC_X86_64GOTPCRELX = 410,
        BFD_RELOC_X86_64REX_GOTPCRELX = 411,
        BFD_RELOC_NS32K_IMM_8 = 412,
        BFD_RELOC_NS32K_IMM_16 = 413,
        BFD_RELOC_NS32K_IMM_32 = 414,
        BFD_RELOC_NS32K_IMM_8PCREL = 415,
        BFD_RELOC_NS32K_IMM_16PCREL = 416,
        BFD_RELOC_NS32K_IMM_32PCREL = 417,
        BFD_RELOC_NS32K_DISP_8 = 418,
        BFD_RELOC_NS32K_DISP_16 = 419,
        BFD_RELOC_NS32K_DISP_32 = 420,
        BFD_RELOC_NS32K_DISP_8PCREL = 421,
        BFD_RELOC_NS32K_DISP_16PCREL = 422,
        BFD_RELOC_NS32K_DISP_32PCREL = 423,
        BFD_RELOC_PDP11DISP_8PCREL = 424,
        BFD_RELOC_PDP11DISP_6PCREL = 425,
        BFD_RELOC_PJ_CODE_HI16 = 426,
        BFD_RELOC_PJ_CODE_LO16 = 427,
        BFD_RELOC_PJ_CODE_DIR16 = 428,
        BFD_RELOC_PJ_CODE_DIR32 = 429,
        BFD_RELOC_PJ_CODE_REL16 = 430,
        BFD_RELOC_PJ_CODE_REL32 = 431,
        BFD_RELOC_PPC_B26 = 432,
        BFD_RELOC_PPC_BA26 = 433,
        BFD_RELOC_PPC_TOC16 = 434,
        BFD_RELOC_PPC_B16 = 435,
        BFD_RELOC_PPC_B16BRTAKEN = 436,
        BFD_RELOC_PPC_B16BRNTAKEN = 437,
        BFD_RELOC_PPC_BA16 = 438,
        BFD_RELOC_PPC_BA16BRTAKEN = 439,
        BFD_RELOC_PPC_BA16BRNTAKEN = 440,
        BFD_RELOC_PPC_COPY = 441,
        BFD_RELOC_PPC_GLOB_DAT = 442,
        BFD_RELOC_PPC_JMP_SLOT = 443,
        BFD_RELOC_PPC_RELATIVE = 444,
        BFD_RELOC_PPC_LOCAL24PC = 445,
        BFD_RELOC_PPC_EMB_NADDR32 = 446,
        BFD_RELOC_PPC_EMB_NADDR16 = 447,
        BFD_RELOC_PPC_EMB_NADDR16LO = 448,
        BFD_RELOC_PPC_EMB_NADDR16HI = 449,
        BFD_RELOC_PPC_EMB_NADDR16HA = 450,
        BFD_RELOC_PPC_EMB_SDAI16 = 451,
        BFD_RELOC_PPC_EMB_SDA2I16 = 452,
        BFD_RELOC_PPC_EMB_SDA2REL = 453,
        BFD_RELOC_PPC_EMB_SDA21 = 454,
        BFD_RELOC_PPC_EMB_MRKREF = 455,
        BFD_RELOC_PPC_EMB_RELSEC16 = 456,
        BFD_RELOC_PPC_EMB_RELST_LO = 457,
        BFD_RELOC_PPC_EMB_RELST_HI = 458,
        BFD_RELOC_PPC_EMB_RELST_HA = 459,
        BFD_RELOC_PPC_EMB_BIT_FLD = 460,
        BFD_RELOC_PPC_EMB_RELSDA = 461,
        BFD_RELOC_PPC_VLE_REL8 = 462,
        BFD_RELOC_PPC_VLE_REL15 = 463,
        BFD_RELOC_PPC_VLE_REL24 = 464,
        BFD_RELOC_PPC_VLE_LO16A = 465,
        BFD_RELOC_PPC_VLE_LO16D = 466,
        BFD_RELOC_PPC_VLE_HI16A = 467,
        BFD_RELOC_PPC_VLE_HI16D = 468,
        BFD_RELOC_PPC_VLE_HA16A = 469,
        BFD_RELOC_PPC_VLE_HA16D = 470,
        BFD_RELOC_PPC_VLE_SDA21 = 471,
        BFD_RELOC_PPC_VLE_SDA21LO = 472,
        BFD_RELOC_PPC_VLE_SDAREL_LO16A = 473,
        BFD_RELOC_PPC_VLE_SDAREL_LO16D = 474,
        BFD_RELOC_PPC_VLE_SDAREL_HI16A = 475,
        BFD_RELOC_PPC_VLE_SDAREL_HI16D = 476,
        BFD_RELOC_PPC_VLE_SDAREL_HA16A = 477,
        BFD_RELOC_PPC_VLE_SDAREL_HA16D = 478,
        BFD_RELOC_PPC_16DX_HA = 479,
        BFD_RELOC_PPC_REL16DX_HA = 480,
        BFD_RELOC_PPC64HIGHER = 481,
        BFD_RELOC_PPC64HIGHER_S = 482,
        BFD_RELOC_PPC64HIGHEST = 483,
        BFD_RELOC_PPC64HIGHEST_S = 484,
        BFD_RELOC_PPC64TOC16LO = 485,
        BFD_RELOC_PPC64TOC16HI = 486,
        BFD_RELOC_PPC64TOC16HA = 487,
        BFD_RELOC_PPC64TOC = 488,
        BFD_RELOC_PPC64PLTGOT16 = 489,
        BFD_RELOC_PPC64PLTGOT16LO = 490,
        BFD_RELOC_PPC64PLTGOT16HI = 491,
        BFD_RELOC_PPC64PLTGOT16HA = 492,
        BFD_RELOC_PPC64ADDR16DS = 493,
        BFD_RELOC_PPC64ADDR16LO_DS = 494,
        BFD_RELOC_PPC64GOT16DS = 495,
        BFD_RELOC_PPC64GOT16LO_DS = 496,
        BFD_RELOC_PPC64PLT16LO_DS = 497,
        BFD_RELOC_PPC64SECTOFF_DS = 498,
        BFD_RELOC_PPC64SECTOFF_LO_DS = 499,
        BFD_RELOC_PPC64TOC16DS = 500,
        BFD_RELOC_PPC64TOC16LO_DS = 501,
        BFD_RELOC_PPC64PLTGOT16DS = 502,
        BFD_RELOC_PPC64PLTGOT16LO_DS = 503,
        BFD_RELOC_PPC64ADDR16HIGH = 504,
        BFD_RELOC_PPC64ADDR16HIGHA = 505,
        BFD_RELOC_PPC64REL16HIGH = 506,
        BFD_RELOC_PPC64REL16HIGHA = 507,
        BFD_RELOC_PPC64REL16HIGHER = 508,
        BFD_RELOC_PPC64REL16HIGHERA = 509,
        BFD_RELOC_PPC64REL16HIGHEST = 510,
        BFD_RELOC_PPC64REL16HIGHESTA = 511,
        BFD_RELOC_PPC64ADDR64LOCAL = 512,
        BFD_RELOC_PPC64ENTRY = 513,
        BFD_RELOC_PPC64REL24NOTOC = 514,
        BFD_RELOC_PPC64D34 = 515,
        BFD_RELOC_PPC64D34LO = 516,
        BFD_RELOC_PPC64D34HI30 = 517,
        BFD_RELOC_PPC64D34HA30 = 518,
        BFD_RELOC_PPC64PCREL34 = 519,
        BFD_RELOC_PPC64GOT_PCREL34 = 520,
        BFD_RELOC_PPC64PLT_PCREL34 = 521,
        BFD_RELOC_PPC64ADDR16HIGHER34 = 522,
        BFD_RELOC_PPC64ADDR16HIGHERA34 = 523,
        BFD_RELOC_PPC64ADDR16HIGHEST34 = 524,
        BFD_RELOC_PPC64ADDR16HIGHESTA34 = 525,
        BFD_RELOC_PPC64REL16HIGHER34 = 526,
        BFD_RELOC_PPC64REL16HIGHERA34 = 527,
        BFD_RELOC_PPC64REL16HIGHEST34 = 528,
        BFD_RELOC_PPC64REL16HIGHESTA34 = 529,
        BFD_RELOC_PPC64D28 = 530,
        BFD_RELOC_PPC64PCREL28 = 531,
        BFD_RELOC_PPC_TLS = 532,
        BFD_RELOC_PPC_TLSGD = 533,
        BFD_RELOC_PPC_TLSLD = 534,
        BFD_RELOC_PPC_DTPMOD = 535,
        BFD_RELOC_PPC_TPREL16 = 536,
        BFD_RELOC_PPC_TPREL16LO = 537,
        BFD_RELOC_PPC_TPREL16HI = 538,
        BFD_RELOC_PPC_TPREL16HA = 539,
        BFD_RELOC_PPC_TPREL = 540,
        BFD_RELOC_PPC_DTPREL16 = 541,
        BFD_RELOC_PPC_DTPREL16LO = 542,
        BFD_RELOC_PPC_DTPREL16HI = 543,
        BFD_RELOC_PPC_DTPREL16HA = 544,
        BFD_RELOC_PPC_DTPREL = 545,
        BFD_RELOC_PPC_GOT_TLSGD16 = 546,
        BFD_RELOC_PPC_GOT_TLSGD16LO = 547,
        BFD_RELOC_PPC_GOT_TLSGD16HI = 548,
        BFD_RELOC_PPC_GOT_TLSGD16HA = 549,
        BFD_RELOC_PPC_GOT_TLSLD16 = 550,
        BFD_RELOC_PPC_GOT_TLSLD16LO = 551,
        BFD_RELOC_PPC_GOT_TLSLD16HI = 552,
        BFD_RELOC_PPC_GOT_TLSLD16HA = 553,
        BFD_RELOC_PPC_GOT_TPREL16 = 554,
        BFD_RELOC_PPC_GOT_TPREL16LO = 555,
        BFD_RELOC_PPC_GOT_TPREL16HI = 556,
        BFD_RELOC_PPC_GOT_TPREL16HA = 557,
        BFD_RELOC_PPC_GOT_DTPREL16 = 558,
        BFD_RELOC_PPC_GOT_DTPREL16LO = 559,
        BFD_RELOC_PPC_GOT_DTPREL16HI = 560,
        BFD_RELOC_PPC_GOT_DTPREL16HA = 561,
        BFD_RELOC_PPC64TPREL16DS = 562,
        BFD_RELOC_PPC64TPREL16LO_DS = 563,
        BFD_RELOC_PPC64TPREL16HIGH = 564,
        BFD_RELOC_PPC64TPREL16HIGHA = 565,
        BFD_RELOC_PPC64TPREL16HIGHER = 566,
        BFD_RELOC_PPC64TPREL16HIGHERA = 567,
        BFD_RELOC_PPC64TPREL16HIGHEST = 568,
        BFD_RELOC_PPC64TPREL16HIGHESTA = 569,
        BFD_RELOC_PPC64DTPREL16DS = 570,
        BFD_RELOC_PPC64DTPREL16LO_DS = 571,
        BFD_RELOC_PPC64DTPREL16HIGH = 572,
        BFD_RELOC_PPC64DTPREL16HIGHA = 573,
        BFD_RELOC_PPC64DTPREL16HIGHER = 574,
        BFD_RELOC_PPC64DTPREL16HIGHERA = 575,
        BFD_RELOC_PPC64DTPREL16HIGHEST = 576,
        BFD_RELOC_PPC64DTPREL16HIGHESTA = 577,
        BFD_RELOC_PPC64TPREL34 = 578,
        BFD_RELOC_PPC64DTPREL34 = 579,
        BFD_RELOC_PPC64GOT_TLSGD34 = 580,
        BFD_RELOC_PPC64GOT_TLSLD34 = 581,
        BFD_RELOC_PPC64GOT_TPREL34 = 582,
        BFD_RELOC_PPC64GOT_DTPREL34 = 583,
        BFD_RELOC_PPC64TLS_PCREL = 584,
        BFD_RELOC_I370D12 = 585,
        BFD_RELOC_CTOR = 586,
        BFD_RELOC_ARM_PCREL_BRANCH = 587,
        BFD_RELOC_ARM_PCREL_BLX = 588,
        BFD_RELOC_THUMB_PCREL_BLX = 589,
        BFD_RELOC_ARM_PCREL_CALL = 590,
        BFD_RELOC_ARM_PCREL_JUMP = 591,
        BFD_RELOC_THUMB_PCREL_BRANCH5 = 592,
        BFD_RELOC_THUMB_PCREL_BFCSEL = 593,
        BFD_RELOC_ARM_THUMB_BF17 = 594,
        BFD_RELOC_ARM_THUMB_BF13 = 595,
        BFD_RELOC_ARM_THUMB_BF19 = 596,
        BFD_RELOC_ARM_THUMB_LOOP12 = 597,
        BFD_RELOC_THUMB_PCREL_BRANCH7 = 598,
        BFD_RELOC_THUMB_PCREL_BRANCH9 = 599,
        BFD_RELOC_THUMB_PCREL_BRANCH12 = 600,
        BFD_RELOC_THUMB_PCREL_BRANCH20 = 601,
        BFD_RELOC_THUMB_PCREL_BRANCH23 = 602,
        BFD_RELOC_THUMB_PCREL_BRANCH25 = 603,
        BFD_RELOC_ARM_OFFSET_IMM = 604,
        BFD_RELOC_ARM_THUMB_OFFSET = 605,
        BFD_RELOC_ARM_TARGET1 = 606,
        BFD_RELOC_ARM_ROSEGREL32 = 607,
        BFD_RELOC_ARM_SBREL32 = 608,
        BFD_RELOC_ARM_TARGET2 = 609,
        BFD_RELOC_ARM_PREL31 = 610,
        BFD_RELOC_ARM_MOVW = 611,
        BFD_RELOC_ARM_MOVT = 612,
        BFD_RELOC_ARM_MOVW_PCREL = 613,
        BFD_RELOC_ARM_MOVT_PCREL = 614,
        BFD_RELOC_ARM_THUMB_MOVW = 615,
        BFD_RELOC_ARM_THUMB_MOVT = 616,
        BFD_RELOC_ARM_THUMB_MOVW_PCREL = 617,
        BFD_RELOC_ARM_THUMB_MOVT_PCREL = 618,
        BFD_RELOC_ARM_GOTFUNCDESC = 619,
        BFD_RELOC_ARM_GOTOFFFUNCDESC = 620,
        BFD_RELOC_ARM_FUNCDESC = 621,
        BFD_RELOC_ARM_FUNCDESC_VALUE = 622,
        BFD_RELOC_ARM_TLS_GD32FDPIC = 623,
        BFD_RELOC_ARM_TLS_LDM32FDPIC = 624,
        BFD_RELOC_ARM_TLS_IE32FDPIC = 625,
        BFD_RELOC_ARM_JUMP_SLOT = 626,
        BFD_RELOC_ARM_GLOB_DAT = 627,
        BFD_RELOC_ARM_GOT32 = 628,
        BFD_RELOC_ARM_PLT32 = 629,
        BFD_RELOC_ARM_RELATIVE = 630,
        BFD_RELOC_ARM_GOTOFF = 631,
        BFD_RELOC_ARM_GOTPC = 632,
        BFD_RELOC_ARM_GOT_PREL = 633,
        BFD_RELOC_ARM_TLS_GD32 = 634,
        BFD_RELOC_ARM_TLS_LDO32 = 635,
        BFD_RELOC_ARM_TLS_LDM32 = 636,
        BFD_RELOC_ARM_TLS_DTPOFF32 = 637,
        BFD_RELOC_ARM_TLS_DTPMOD32 = 638,
        BFD_RELOC_ARM_TLS_TPOFF32 = 639,
        BFD_RELOC_ARM_TLS_IE32 = 640,
        BFD_RELOC_ARM_TLS_LE32 = 641,
        BFD_RELOC_ARM_TLS_GOTDESC = 642,
        BFD_RELOC_ARM_TLS_CALL = 643,
        BFD_RELOC_ARM_THM_TLS_CALL = 644,
        BFD_RELOC_ARM_TLS_DESCSEQ = 645,
        BFD_RELOC_ARM_THM_TLS_DESCSEQ = 646,
        BFD_RELOC_ARM_TLS_DESC = 647,
        BFD_RELOC_ARM_ALU_PC_G0NC = 648,
        BFD_RELOC_ARM_ALU_PC_G0 = 649,
        BFD_RELOC_ARM_ALU_PC_G1NC = 650,
        BFD_RELOC_ARM_ALU_PC_G1 = 651,
        BFD_RELOC_ARM_ALU_PC_G2 = 652,
        BFD_RELOC_ARM_LDR_PC_G0 = 653,
        BFD_RELOC_ARM_LDR_PC_G1 = 654,
        BFD_RELOC_ARM_LDR_PC_G2 = 655,
        BFD_RELOC_ARM_LDRS_PC_G0 = 656,
        BFD_RELOC_ARM_LDRS_PC_G1 = 657,
        BFD_RELOC_ARM_LDRS_PC_G2 = 658,
        BFD_RELOC_ARM_LDC_PC_G0 = 659,
        BFD_RELOC_ARM_LDC_PC_G1 = 660,
        BFD_RELOC_ARM_LDC_PC_G2 = 661,
        BFD_RELOC_ARM_ALU_SB_G0NC = 662,
        BFD_RELOC_ARM_ALU_SB_G0 = 663,
        BFD_RELOC_ARM_ALU_SB_G1NC = 664,
        BFD_RELOC_ARM_ALU_SB_G1 = 665,
        BFD_RELOC_ARM_ALU_SB_G2 = 666,
        BFD_RELOC_ARM_LDR_SB_G0 = 667,
        BFD_RELOC_ARM_LDR_SB_G1 = 668,
        BFD_RELOC_ARM_LDR_SB_G2 = 669,
        BFD_RELOC_ARM_LDRS_SB_G0 = 670,
        BFD_RELOC_ARM_LDRS_SB_G1 = 671,
        BFD_RELOC_ARM_LDRS_SB_G2 = 672,
        BFD_RELOC_ARM_LDC_SB_G0 = 673,
        BFD_RELOC_ARM_LDC_SB_G1 = 674,
        BFD_RELOC_ARM_LDC_SB_G2 = 675,
        BFD_RELOC_ARM_V4BX = 676,
        BFD_RELOC_ARM_IRELATIVE = 677,
        BFD_RELOC_ARM_THUMB_ALU_ABS_G0NC = 678,
        BFD_RELOC_ARM_THUMB_ALU_ABS_G1NC = 679,
        BFD_RELOC_ARM_THUMB_ALU_ABS_G2NC = 680,
        BFD_RELOC_ARM_THUMB_ALU_ABS_G3NC = 681,
        BFD_RELOC_ARM_IMMEDIATE = 682,
        BFD_RELOC_ARM_ADRL_IMMEDIATE = 683,
        BFD_RELOC_ARM_T32IMMEDIATE = 684,
        BFD_RELOC_ARM_T32ADD_IMM = 685,
        BFD_RELOC_ARM_T32IMM12 = 686,
        BFD_RELOC_ARM_T32ADD_PC12 = 687,
        BFD_RELOC_ARM_SHIFT_IMM = 688,
        BFD_RELOC_ARM_SMC = 689,
        BFD_RELOC_ARM_HVC = 690,
        BFD_RELOC_ARM_SWI = 691,
        BFD_RELOC_ARM_MULTI = 692,
        BFD_RELOC_ARM_CP_OFF_IMM = 693,
        BFD_RELOC_ARM_CP_OFF_IMM_S2 = 694,
        BFD_RELOC_ARM_T32CP_OFF_IMM = 695,
        BFD_RELOC_ARM_T32CP_OFF_IMM_S2 = 696,
        BFD_RELOC_ARM_T32VLDR_VSTR_OFF_IMM = 697,
        BFD_RELOC_ARM_ADR_IMM = 698,
        BFD_RELOC_ARM_LDR_IMM = 699,
        BFD_RELOC_ARM_LITERAL = 700,
        BFD_RELOC_ARM_IN_POOL = 701,
        BFD_RELOC_ARM_OFFSET_IMM8 = 702,
        BFD_RELOC_ARM_T32OFFSET_U8 = 703,
        BFD_RELOC_ARM_T32OFFSET_IMM = 704,
        BFD_RELOC_ARM_HWLITERAL = 705,
        BFD_RELOC_ARM_THUMB_ADD = 706,
        BFD_RELOC_ARM_THUMB_IMM = 707,
        BFD_RELOC_ARM_THUMB_SHIFT = 708,
        BFD_RELOC_SH_PCDISP8BY2 = 709,
        BFD_RELOC_SH_PCDISP12BY2 = 710,
        BFD_RELOC_SH_IMM3 = 711,
        BFD_RELOC_SH_IMM3U = 712,
        BFD_RELOC_SH_DISP12 = 713,
        BFD_RELOC_SH_DISP12BY2 = 714,
        BFD_RELOC_SH_DISP12BY4 = 715,
        BFD_RELOC_SH_DISP12BY8 = 716,
        BFD_RELOC_SH_DISP20 = 717,
        BFD_RELOC_SH_DISP20BY8 = 718,
        BFD_RELOC_SH_IMM4 = 719,
        BFD_RELOC_SH_IMM4BY2 = 720,
        BFD_RELOC_SH_IMM4BY4 = 721,
        BFD_RELOC_SH_IMM8 = 722,
        BFD_RELOC_SH_IMM8BY2 = 723,
        BFD_RELOC_SH_IMM8BY4 = 724,
        BFD_RELOC_SH_PCRELIMM8BY2 = 725,
        BFD_RELOC_SH_PCRELIMM8BY4 = 726,
        BFD_RELOC_SH_SWITCH16 = 727,
        BFD_RELOC_SH_SWITCH32 = 728,
        BFD_RELOC_SH_USES = 729,
        BFD_RELOC_SH_COUNT = 730,
        BFD_RELOC_SH_ALIGN = 731,
        BFD_RELOC_SH_CODE = 732,
        BFD_RELOC_SH_DATA = 733,
        BFD_RELOC_SH_LABEL = 734,
        BFD_RELOC_SH_LOOP_START = 735,
        BFD_RELOC_SH_LOOP_END = 736,
        BFD_RELOC_SH_COPY = 737,
        BFD_RELOC_SH_GLOB_DAT = 738,
        BFD_RELOC_SH_JMP_SLOT = 739,
        BFD_RELOC_SH_RELATIVE = 740,
        BFD_RELOC_SH_GOTPC = 741,
        BFD_RELOC_SH_GOT_LOW16 = 742,
        BFD_RELOC_SH_GOT_MEDLOW16 = 743,
        BFD_RELOC_SH_GOT_MEDHI16 = 744,
        BFD_RELOC_SH_GOT_HI16 = 745,
        BFD_RELOC_SH_GOTPLT_LOW16 = 746,
        BFD_RELOC_SH_GOTPLT_MEDLOW16 = 747,
        BFD_RELOC_SH_GOTPLT_MEDHI16 = 748,
        BFD_RELOC_SH_GOTPLT_HI16 = 749,
        BFD_RELOC_SH_PLT_LOW16 = 750,
        BFD_RELOC_SH_PLT_MEDLOW16 = 751,
        BFD_RELOC_SH_PLT_MEDHI16 = 752,
        BFD_RELOC_SH_PLT_HI16 = 753,
        BFD_RELOC_SH_GOTOFF_LOW16 = 754,
        BFD_RELOC_SH_GOTOFF_MEDLOW16 = 755,
        BFD_RELOC_SH_GOTOFF_MEDHI16 = 756,
        BFD_RELOC_SH_GOTOFF_HI16 = 757,
        BFD_RELOC_SH_GOTPC_LOW16 = 758,
        BFD_RELOC_SH_GOTPC_MEDLOW16 = 759,
        BFD_RELOC_SH_GOTPC_MEDHI16 = 760,
        BFD_RELOC_SH_GOTPC_HI16 = 761,
        BFD_RELOC_SH_COPY64 = 762,
        BFD_RELOC_SH_GLOB_DAT64 = 763,
        BFD_RELOC_SH_JMP_SLOT64 = 764,
        BFD_RELOC_SH_RELATIVE64 = 765,
        BFD_RELOC_SH_GOT10BY4 = 766,
        BFD_RELOC_SH_GOT10BY8 = 767,
        BFD_RELOC_SH_GOTPLT10BY4 = 768,
        BFD_RELOC_SH_GOTPLT10BY8 = 769,
        BFD_RELOC_SH_GOTPLT32 = 770,
        BFD_RELOC_SH_SHMEDIA_CODE = 771,
        BFD_RELOC_SH_IMMU5 = 772,
        BFD_RELOC_SH_IMMS6 = 773,
        BFD_RELOC_SH_IMMS6BY32 = 774,
        BFD_RELOC_SH_IMMU6 = 775,
        BFD_RELOC_SH_IMMS10 = 776,
        BFD_RELOC_SH_IMMS10BY2 = 777,
        BFD_RELOC_SH_IMMS10BY4 = 778,
        BFD_RELOC_SH_IMMS10BY8 = 779,
        BFD_RELOC_SH_IMMS16 = 780,
        BFD_RELOC_SH_IMMU16 = 781,
        BFD_RELOC_SH_IMM_LOW16 = 782,
        BFD_RELOC_SH_IMM_LOW16PCREL = 783,
        BFD_RELOC_SH_IMM_MEDLOW16 = 784,
        BFD_RELOC_SH_IMM_MEDLOW16PCREL = 785,
        BFD_RELOC_SH_IMM_MEDHI16 = 786,
        BFD_RELOC_SH_IMM_MEDHI16PCREL = 787,
        BFD_RELOC_SH_IMM_HI16 = 788,
        BFD_RELOC_SH_IMM_HI16PCREL = 789,
        BFD_RELOC_SH_PT_16 = 790,
        BFD_RELOC_SH_TLS_GD_32 = 791,
        BFD_RELOC_SH_TLS_LD_32 = 792,
        BFD_RELOC_SH_TLS_LDO_32 = 793,
        BFD_RELOC_SH_TLS_IE_32 = 794,
        BFD_RELOC_SH_TLS_LE_32 = 795,
        BFD_RELOC_SH_TLS_DTPMOD32 = 796,
        BFD_RELOC_SH_TLS_DTPOFF32 = 797,
        BFD_RELOC_SH_TLS_TPOFF32 = 798,
        BFD_RELOC_SH_GOT20 = 799,
        BFD_RELOC_SH_GOTOFF20 = 800,
        BFD_RELOC_SH_GOTFUNCDESC = 801,
        BFD_RELOC_SH_GOTFUNCDESC20 = 802,
        BFD_RELOC_SH_GOTOFFFUNCDESC = 803,
        BFD_RELOC_SH_GOTOFFFUNCDESC20 = 804,
        BFD_RELOC_SH_FUNCDESC = 805,
        BFD_RELOC_ARC_NONE = 806,
        BFD_RELOC_ARC_8 = 807,
        BFD_RELOC_ARC_16 = 808,
        BFD_RELOC_ARC_24 = 809,
        BFD_RELOC_ARC_32 = 810,
        BFD_RELOC_ARC_N8 = 811,
        BFD_RELOC_ARC_N16 = 812,
        BFD_RELOC_ARC_N24 = 813,
        BFD_RELOC_ARC_N32 = 814,
        BFD_RELOC_ARC_SDA = 815,
        BFD_RELOC_ARC_SECTOFF = 816,
        BFD_RELOC_ARC_S21H_PCREL = 817,
        BFD_RELOC_ARC_S21W_PCREL = 818,
        BFD_RELOC_ARC_S25H_PCREL = 819,
        BFD_RELOC_ARC_S25W_PCREL = 820,
        BFD_RELOC_ARC_SDA32 = 821,
        BFD_RELOC_ARC_SDA_LDST = 822,
        BFD_RELOC_ARC_SDA_LDST1 = 823,
        BFD_RELOC_ARC_SDA_LDST2 = 824,
        BFD_RELOC_ARC_SDA16LD = 825,
        BFD_RELOC_ARC_SDA16LD1 = 826,
        BFD_RELOC_ARC_SDA16LD2 = 827,
        BFD_RELOC_ARC_S13PCREL = 828,
        BFD_RELOC_ARC_W = 829,
        BFD_RELOC_ARC_32ME = 830,
        BFD_RELOC_ARC_32ME_S = 831,
        BFD_RELOC_ARC_N32ME = 832,
        BFD_RELOC_ARC_SECTOFF_ME = 833,
        BFD_RELOC_ARC_SDA32ME = 834,
        BFD_RELOC_ARC_W_ME = 835,
        BFD_RELOC_AC_SECTOFF_U8 = 836,
        BFD_RELOC_AC_SECTOFF_U8_1 = 837,
        BFD_RELOC_AC_SECTOFF_U8_2 = 838,
        BFD_RELOC_AC_SECTOFF_S9 = 839,
        BFD_RELOC_AC_SECTOFF_S9_1 = 840,
        BFD_RELOC_AC_SECTOFF_S9_2 = 841,
        BFD_RELOC_ARC_SECTOFF_ME_1 = 842,
        BFD_RELOC_ARC_SECTOFF_ME_2 = 843,
        BFD_RELOC_ARC_SECTOFF_1 = 844,
        BFD_RELOC_ARC_SECTOFF_2 = 845,
        BFD_RELOC_ARC_SDA_12 = 846,
        BFD_RELOC_ARC_SDA16ST2 = 847,
        BFD_RELOC_ARC_32PCREL = 848,
        BFD_RELOC_ARC_PC32 = 849,
        BFD_RELOC_ARC_GOT32 = 850,
        BFD_RELOC_ARC_GOTPC32 = 851,
        BFD_RELOC_ARC_PLT32 = 852,
        BFD_RELOC_ARC_COPY = 853,
        BFD_RELOC_ARC_GLOB_DAT = 854,
        BFD_RELOC_ARC_JMP_SLOT = 855,
        BFD_RELOC_ARC_RELATIVE = 856,
        BFD_RELOC_ARC_GOTOFF = 857,
        BFD_RELOC_ARC_GOTPC = 858,
        BFD_RELOC_ARC_S21W_PCREL_PLT = 859,
        BFD_RELOC_ARC_S25H_PCREL_PLT = 860,
        BFD_RELOC_ARC_TLS_DTPMOD = 861,
        BFD_RELOC_ARC_TLS_TPOFF = 862,
        BFD_RELOC_ARC_TLS_GD_GOT = 863,
        BFD_RELOC_ARC_TLS_GD_LD = 864,
        BFD_RELOC_ARC_TLS_GD_CALL = 865,
        BFD_RELOC_ARC_TLS_IE_GOT = 866,
        BFD_RELOC_ARC_TLS_DTPOFF = 867,
        BFD_RELOC_ARC_TLS_DTPOFF_S9 = 868,
        BFD_RELOC_ARC_TLS_LE_S9 = 869,
        BFD_RELOC_ARC_TLS_LE_32 = 870,
        BFD_RELOC_ARC_S25W_PCREL_PLT = 871,
        BFD_RELOC_ARC_S21H_PCREL_PLT = 872,
        BFD_RELOC_ARC_NPS_CMEM16 = 873,
        BFD_RELOC_ARC_JLI_SECTOFF = 874,
        BFD_RELOC_BFIN_16IMM = 875,
        BFD_RELOC_BFIN_16HIGH = 876,
        BFD_RELOC_BFIN_4PCREL = 877,
        BFD_RELOC_BFIN_5PCREL = 878,
        BFD_RELOC_BFIN_16LOW = 879,
        BFD_RELOC_BFIN_10PCREL = 880,
        BFD_RELOC_BFIN_11PCREL = 881,
        BFD_RELOC_BFIN_12PCREL_JUMP = 882,
        BFD_RELOC_BFIN_12PCREL_JUMP_S = 883,
        BFD_RELOC_BFIN_24PCREL_CALL_X = 884,
        BFD_RELOC_BFIN_24PCREL_JUMP_L = 885,
        BFD_RELOC_BFIN_GOT17M4 = 886,
        BFD_RELOC_BFIN_GOTHI = 887,
        BFD_RELOC_BFIN_GOTLO = 888,
        BFD_RELOC_BFIN_FUNCDESC = 889,
        BFD_RELOC_BFIN_FUNCDESC_GOT17M4 = 890,
        BFD_RELOC_BFIN_FUNCDESC_GOTHI = 891,
        BFD_RELOC_BFIN_FUNCDESC_GOTLO = 892,
        BFD_RELOC_BFIN_FUNCDESC_VALUE = 893,
        BFD_RELOC_BFIN_FUNCDESC_GOTOFF17M4 = 894,
        BFD_RELOC_BFIN_FUNCDESC_GOTOFFHI = 895,
        BFD_RELOC_BFIN_FUNCDESC_GOTOFFLO = 896,
        BFD_RELOC_BFIN_GOTOFF17M4 = 897,
        BFD_RELOC_BFIN_GOTOFFHI = 898,
        BFD_RELOC_BFIN_GOTOFFLO = 899,
        BFD_RELOC_BFIN_GOT = 900,
        BFD_RELOC_BFIN_PLTPC = 901,
        BFD_ARELOC_BFIN_PUSH = 902,
        BFD_ARELOC_BFIN_CONST = 903,
        BFD_ARELOC_BFIN_ADD = 904,
        BFD_ARELOC_BFIN_SUB = 905,
        BFD_ARELOC_BFIN_MULT = 906,
        BFD_ARELOC_BFIN_DIV = 907,
        BFD_ARELOC_BFIN_MOD = 908,
        BFD_ARELOC_BFIN_LSHIFT = 909,
        BFD_ARELOC_BFIN_RSHIFT = 910,
        BFD_ARELOC_BFIN_AND = 911,
        BFD_ARELOC_BFIN_OR = 912,
        BFD_ARELOC_BFIN_XOR = 913,
        BFD_ARELOC_BFIN_LAND = 914,
        BFD_ARELOC_BFIN_LOR = 915,
        BFD_ARELOC_BFIN_LEN = 916,
        BFD_ARELOC_BFIN_NEG = 917,
        BFD_ARELOC_BFIN_COMP = 918,
        BFD_ARELOC_BFIN_PAGE = 919,
        BFD_ARELOC_BFIN_HWPAGE = 920,
        BFD_ARELOC_BFIN_ADDR = 921,
        BFD_RELOC_D10V_10PCREL_R = 922,
        BFD_RELOC_D10V_10PCREL_L = 923,
        BFD_RELOC_D10V_18 = 924,
        BFD_RELOC_D10V_18PCREL = 925,
        BFD_RELOC_D30V_6 = 926,
        BFD_RELOC_D30V_9PCREL = 927,
        BFD_RELOC_D30V_9PCREL_R = 928,
        BFD_RELOC_D30V_15 = 929,
        BFD_RELOC_D30V_15PCREL = 930,
        BFD_RELOC_D30V_15PCREL_R = 931,
        BFD_RELOC_D30V_21 = 932,
        BFD_RELOC_D30V_21PCREL = 933,
        BFD_RELOC_D30V_21PCREL_R = 934,
        BFD_RELOC_D30V_32 = 935,
        BFD_RELOC_D30V_32PCREL = 936,
        BFD_RELOC_DLX_HI16S = 937,
        BFD_RELOC_DLX_LO16 = 938,
        BFD_RELOC_DLX_JMP26 = 939,
        BFD_RELOC_M32C_HI8 = 940,
        BFD_RELOC_M32C_RL_JUMP = 941,
        BFD_RELOC_M32C_RL_1ADDR = 942,
        BFD_RELOC_M32C_RL_2ADDR = 943,
        BFD_RELOC_M32R_24 = 944,
        BFD_RELOC_M32R_10PCREL = 945,
        BFD_RELOC_M32R_18PCREL = 946,
        BFD_RELOC_M32R_26PCREL = 947,
        BFD_RELOC_M32R_HI16ULO = 948,
        BFD_RELOC_M32R_HI16SLO = 949,
        BFD_RELOC_M32R_LO16 = 950,
        BFD_RELOC_M32R_SDA16 = 951,
        BFD_RELOC_M32R_GOT24 = 952,
        BFD_RELOC_M32R_26PLTREL = 953,
        BFD_RELOC_M32R_COPY = 954,
        BFD_RELOC_M32R_GLOB_DAT = 955,
        BFD_RELOC_M32R_JMP_SLOT = 956,
        BFD_RELOC_M32R_RELATIVE = 957,
        BFD_RELOC_M32R_GOTOFF = 958,
        BFD_RELOC_M32R_GOTOFF_HI_ULO = 959,
        BFD_RELOC_M32R_GOTOFF_HI_SLO = 960,
        BFD_RELOC_M32R_GOTOFF_LO = 961,
        BFD_RELOC_M32R_GOTPC24 = 962,
        BFD_RELOC_M32R_GOT16HI_ULO = 963,
        BFD_RELOC_M32R_GOT16HI_SLO = 964,
        BFD_RELOC_M32R_GOT16LO = 965,
        BFD_RELOC_M32R_GOTPC_HI_ULO = 966,
        BFD_RELOC_M32R_GOTPC_HI_SLO = 967,
        BFD_RELOC_M32R_GOTPC_LO = 968,
        BFD_RELOC_NDS32_20 = 969,
        BFD_RELOC_NDS32_9PCREL = 970,
        BFD_RELOC_NDS32WORD_9PCREL = 971,
        BFD_RELOC_NDS32_15PCREL = 972,
        BFD_RELOC_NDS32_17PCREL = 973,
        BFD_RELOC_NDS32_25PCREL = 974,
        BFD_RELOC_NDS32HI20 = 975,
        BFD_RELOC_NDS32LO12S3 = 976,
        BFD_RELOC_NDS32LO12S2 = 977,
        BFD_RELOC_NDS32LO12S1 = 978,
        BFD_RELOC_NDS32LO12S0 = 979,
        BFD_RELOC_NDS32LO12S0ORI = 980,
        BFD_RELOC_NDS32SDA15S3 = 981,
        BFD_RELOC_NDS32SDA15S2 = 982,
        BFD_RELOC_NDS32SDA15S1 = 983,
        BFD_RELOC_NDS32SDA15S0 = 984,
        BFD_RELOC_NDS32SDA16S3 = 985,
        BFD_RELOC_NDS32SDA17S2 = 986,
        BFD_RELOC_NDS32SDA18S1 = 987,
        BFD_RELOC_NDS32SDA19S0 = 988,
        BFD_RELOC_NDS32GOT20 = 989,
        BFD_RELOC_NDS32_9PLTREL = 990,
        BFD_RELOC_NDS32_25PLTREL = 991,
        BFD_RELOC_NDS32COPY = 992,
        BFD_RELOC_NDS32GLOB_DAT = 993,
        BFD_RELOC_NDS32JMP_SLOT = 994,
        BFD_RELOC_NDS32RELATIVE = 995,
        BFD_RELOC_NDS32GOTOFF = 996,
        BFD_RELOC_NDS32GOTOFF_HI20 = 997,
        BFD_RELOC_NDS32GOTOFF_LO12 = 998,
        BFD_RELOC_NDS32GOTPC20 = 999,
        BFD_RELOC_NDS32GOT_HI20 = 1000,
        BFD_RELOC_NDS32GOT_LO12 = 1001,
        BFD_RELOC_NDS32GOTPC_HI20 = 1002,
        BFD_RELOC_NDS32GOTPC_LO12 = 1003,
        BFD_RELOC_NDS32INSN16 = 1004,
        BFD_RELOC_NDS32LABEL = 1005,
        BFD_RELOC_NDS32LONGCALL1 = 1006,
        BFD_RELOC_NDS32LONGCALL2 = 1007,
        BFD_RELOC_NDS32LONGCALL3 = 1008,
        BFD_RELOC_NDS32LONGJUMP1 = 1009,
        BFD_RELOC_NDS32LONGJUMP2 = 1010,
        BFD_RELOC_NDS32LONGJUMP3 = 1011,
        BFD_RELOC_NDS32LOADSTORE = 1012,
        BFD_RELOC_NDS32_9FIXED = 1013,
        BFD_RELOC_NDS32_15FIXED = 1014,
        BFD_RELOC_NDS32_17FIXED = 1015,
        BFD_RELOC_NDS32_25FIXED = 1016,
        BFD_RELOC_NDS32LONGCALL4 = 1017,
        BFD_RELOC_NDS32LONGCALL5 = 1018,
        BFD_RELOC_NDS32LONGCALL6 = 1019,
        BFD_RELOC_NDS32LONGJUMP4 = 1020,
        BFD_RELOC_NDS32LONGJUMP5 = 1021,
        BFD_RELOC_NDS32LONGJUMP6 = 1022,
        BFD_RELOC_NDS32LONGJUMP7 = 1023,
        BFD_RELOC_NDS32PLTREL_HI20 = 1024,
        BFD_RELOC_NDS32PLTREL_LO12 = 1025,
        BFD_RELOC_NDS32PLT_GOTREL_HI20 = 1026,
        BFD_RELOC_NDS32PLT_GOTREL_LO12 = 1027,
        BFD_RELOC_NDS32SDA12S2DP = 1028,
        BFD_RELOC_NDS32SDA12S2SP = 1029,
        BFD_RELOC_NDS32LO12S2DP = 1030,
        BFD_RELOC_NDS32LO12S2SP = 1031,
        BFD_RELOC_NDS32DWARF2OP1 = 1032,
        BFD_RELOC_NDS32DWARF2OP2 = 1033,
        BFD_RELOC_NDS32DWARF2LEB = 1034,
        BFD_RELOC_NDS32UPDATE_TA = 1035,
        BFD_RELOC_NDS32PLT_GOTREL_LO20 = 1036,
        BFD_RELOC_NDS32PLT_GOTREL_LO15 = 1037,
        BFD_RELOC_NDS32PLT_GOTREL_LO19 = 1038,
        BFD_RELOC_NDS32GOT_LO15 = 1039,
        BFD_RELOC_NDS32GOT_LO19 = 1040,
        BFD_RELOC_NDS32GOTOFF_LO15 = 1041,
        BFD_RELOC_NDS32GOTOFF_LO19 = 1042,
        BFD_RELOC_NDS32GOT15S2 = 1043,
        BFD_RELOC_NDS32GOT17S2 = 1044,
        BFD_RELOC_NDS32_5 = 1045,
        BFD_RELOC_NDS32_10UPCREL = 1046,
        BFD_RELOC_NDS32SDA_FP7U2RELA = 1047,
        BFD_RELOC_NDS32RELAX_ENTRY = 1048,
        BFD_RELOC_NDS32GOT_SUFF = 1049,
        BFD_RELOC_NDS32GOTOFF_SUFF = 1050,
        BFD_RELOC_NDS32PLT_GOT_SUFF = 1051,
        BFD_RELOC_NDS32MULCALL_SUFF = 1052,
        BFD_RELOC_NDS32PTR = 1053,
        BFD_RELOC_NDS32PTR_COUNT = 1054,
        BFD_RELOC_NDS32PTR_RESOLVED = 1055,
        BFD_RELOC_NDS32PLTBLOCK = 1056,
        BFD_RELOC_NDS32RELAX_REGION_BEGIN = 1057,
        BFD_RELOC_NDS32RELAX_REGION_END = 1058,
        BFD_RELOC_NDS32MINUEND = 1059,
        BFD_RELOC_NDS32SUBTRAHEND = 1060,
        BFD_RELOC_NDS32DIFF8 = 1061,
        BFD_RELOC_NDS32DIFF16 = 1062,
        BFD_RELOC_NDS32DIFF32 = 1063,
        BFD_RELOC_NDS32DIFF_ULEB128 = 1064,
        BFD_RELOC_NDS32EMPTY = 1065,
        BFD_RELOC_NDS32_25ABS = 1066,
        BFD_RELOC_NDS32DATA = 1067,
        BFD_RELOC_NDS32TRAN = 1068,
        BFD_RELOC_NDS32_17IFC_PCREL = 1069,
        BFD_RELOC_NDS32_10IFCU_PCREL = 1070,
        BFD_RELOC_NDS32TPOFF = 1071,
        BFD_RELOC_NDS32GOTTPOFF = 1072,
        BFD_RELOC_NDS32TLS_LE_HI20 = 1073,
        BFD_RELOC_NDS32TLS_LE_LO12 = 1074,
        BFD_RELOC_NDS32TLS_LE_20 = 1075,
        BFD_RELOC_NDS32TLS_LE_15S0 = 1076,
        BFD_RELOC_NDS32TLS_LE_15S1 = 1077,
        BFD_RELOC_NDS32TLS_LE_15S2 = 1078,
        BFD_RELOC_NDS32TLS_LE_ADD = 1079,
        BFD_RELOC_NDS32TLS_LE_LS = 1080,
        BFD_RELOC_NDS32TLS_IE_HI20 = 1081,
        BFD_RELOC_NDS32TLS_IE_LO12 = 1082,
        BFD_RELOC_NDS32TLS_IE_LO12S2 = 1083,
        BFD_RELOC_NDS32TLS_IEGP_HI20 = 1084,
        BFD_RELOC_NDS32TLS_IEGP_LO12 = 1085,
        BFD_RELOC_NDS32TLS_IEGP_LO12S2 = 1086,
        BFD_RELOC_NDS32TLS_IEGP_LW = 1087,
        BFD_RELOC_NDS32TLS_DESC = 1088,
        BFD_RELOC_NDS32TLS_DESC_HI20 = 1089,
        BFD_RELOC_NDS32TLS_DESC_LO12 = 1090,
        BFD_RELOC_NDS32TLS_DESC_20 = 1091,
        BFD_RELOC_NDS32TLS_DESC_SDA17S2 = 1092,
        BFD_RELOC_NDS32TLS_DESC_ADD = 1093,
        BFD_RELOC_NDS32TLS_DESC_FUNC = 1094,
        BFD_RELOC_NDS32TLS_DESC_CALL = 1095,
        BFD_RELOC_NDS32TLS_DESC_MEM = 1096,
        BFD_RELOC_NDS32REMOVE = 1097,
        BFD_RELOC_NDS32GROUP = 1098,
        BFD_RELOC_NDS32LSI = 1099,
        BFD_RELOC_V850_9PCREL = 1100,
        BFD_RELOC_V850_22PCREL = 1101,
        BFD_RELOC_V850SDA_16_16OFFSET = 1102,
        BFD_RELOC_V850SDA_15_16OFFSET = 1103,
        BFD_RELOC_V850ZDA_16_16OFFSET = 1104,
        BFD_RELOC_V850ZDA_15_16OFFSET = 1105,
        BFD_RELOC_V850TDA_6_8OFFSET = 1106,
        BFD_RELOC_V850TDA_7_8OFFSET = 1107,
        BFD_RELOC_V850TDA_7_7OFFSET = 1108,
        BFD_RELOC_V850TDA_16_16OFFSET = 1109,
        BFD_RELOC_V850TDA_4_5OFFSET = 1110,
        BFD_RELOC_V850TDA_4_4OFFSET = 1111,
        BFD_RELOC_V850SDA_16_16SPLIT_OFFSET = 1112,
        BFD_RELOC_V850ZDA_16_16SPLIT_OFFSET = 1113,
        BFD_RELOC_V850CALLT_6_7OFFSET = 1114,
        BFD_RELOC_V850CALLT_16_16OFFSET = 1115,
        BFD_RELOC_V850LONGCALL = 1116,
        BFD_RELOC_V850LONGJUMP = 1117,
        BFD_RELOC_V850ALIGN = 1118,
        BFD_RELOC_V850LO16SPLIT_OFFSET = 1119,
        BFD_RELOC_V850_16PCREL = 1120,
        BFD_RELOC_V850_17PCREL = 1121,
        BFD_RELOC_V850_23 = 1122,
        BFD_RELOC_V850_32PCREL = 1123,
        BFD_RELOC_V850_32ABS = 1124,
        BFD_RELOC_V850_16SPLIT_OFFSET = 1125,
        BFD_RELOC_V850_16S1 = 1126,
        BFD_RELOC_V850LO16S1 = 1127,
        BFD_RELOC_V850CALLT_15_16OFFSET = 1128,
        BFD_RELOC_V850_32GOTPCREL = 1129,
        BFD_RELOC_V850_16GOT = 1130,
        BFD_RELOC_V850_32GOT = 1131,
        BFD_RELOC_V850_22PLT_PCREL = 1132,
        BFD_RELOC_V850_32PLT_PCREL = 1133,
        BFD_RELOC_V850COPY = 1134,
        BFD_RELOC_V850GLOB_DAT = 1135,
        BFD_RELOC_V850JMP_SLOT = 1136,
        BFD_RELOC_V850RELATIVE = 1137,
        BFD_RELOC_V850_16GOTOFF = 1138,
        BFD_RELOC_V850_32GOTOFF = 1139,
        BFD_RELOC_V850CODE = 1140,
        BFD_RELOC_V850DATA = 1141,
        BFD_RELOC_TIC30LDP = 1142,
        BFD_RELOC_TIC54X_PARTLS7 = 1143,
        BFD_RELOC_TIC54X_PARTMS9 = 1144,
        BFD_RELOC_TIC54X_23 = 1145,
        BFD_RELOC_TIC54X_16OF_23 = 1146,
        BFD_RELOC_TIC54X_MS7OF_23 = 1147,
        BFD_RELOC_C6000PCR_S21 = 1148,
        BFD_RELOC_C6000PCR_S12 = 1149,
        BFD_RELOC_C6000PCR_S10 = 1150,
        BFD_RELOC_C6000PCR_S7 = 1151,
        BFD_RELOC_C6000ABS_S16 = 1152,
        BFD_RELOC_C6000ABS_L16 = 1153,
        BFD_RELOC_C6000ABS_H16 = 1154,
        BFD_RELOC_C6000SBR_U15B = 1155,
        BFD_RELOC_C6000SBR_U15H = 1156,
        BFD_RELOC_C6000SBR_U15W = 1157,
        BFD_RELOC_C6000SBR_S16 = 1158,
        BFD_RELOC_C6000SBR_L16B = 1159,
        BFD_RELOC_C6000SBR_L16H = 1160,
        BFD_RELOC_C6000SBR_L16W = 1161,
        BFD_RELOC_C6000SBR_H16B = 1162,
        BFD_RELOC_C6000SBR_H16H = 1163,
        BFD_RELOC_C6000SBR_H16W = 1164,
        BFD_RELOC_C6000SBR_GOT_U15W = 1165,
        BFD_RELOC_C6000SBR_GOT_L16W = 1166,
        BFD_RELOC_C6000SBR_GOT_H16W = 1167,
        BFD_RELOC_C6000DSBT_INDEX = 1168,
        BFD_RELOC_C6000PREL31 = 1169,
        BFD_RELOC_C6000COPY = 1170,
        BFD_RELOC_C6000JUMP_SLOT = 1171,
        BFD_RELOC_C6000EHTYPE = 1172,
        BFD_RELOC_C6000PCR_H16 = 1173,
        BFD_RELOC_C6000PCR_L16 = 1174,
        BFD_RELOC_C6000ALIGN = 1175,
        BFD_RELOC_C6000FPHEAD = 1176,
        BFD_RELOC_C6000NOCMP = 1177,
        BFD_RELOC_FR30_48 = 1178,
        BFD_RELOC_FR30_20 = 1179,
        BFD_RELOC_FR30_6IN_4 = 1180,
        BFD_RELOC_FR30_8IN_8 = 1181,
        BFD_RELOC_FR30_9IN_8 = 1182,
        BFD_RELOC_FR30_10IN_8 = 1183,
        BFD_RELOC_FR30_9PCREL = 1184,
        BFD_RELOC_FR30_12PCREL = 1185,
        BFD_RELOC_MCORE_PCREL_IMM8BY4 = 1186,
        BFD_RELOC_MCORE_PCREL_IMM11BY2 = 1187,
        BFD_RELOC_MCORE_PCREL_IMM4BY2 = 1188,
        BFD_RELOC_MCORE_PCREL_32 = 1189,
        BFD_RELOC_MCORE_PCREL_JSR_IMM11BY2 = 1190,
        BFD_RELOC_MCORE_RVA = 1191,
        BFD_RELOC_MEP_8 = 1192,
        BFD_RELOC_MEP_16 = 1193,
        BFD_RELOC_MEP_32 = 1194,
        BFD_RELOC_MEP_PCREL8A2 = 1195,
        BFD_RELOC_MEP_PCREL12A2 = 1196,
        BFD_RELOC_MEP_PCREL17A2 = 1197,
        BFD_RELOC_MEP_PCREL24A2 = 1198,
        BFD_RELOC_MEP_PCABS24A2 = 1199,
        BFD_RELOC_MEP_LOW16 = 1200,
        BFD_RELOC_MEP_HI16U = 1201,
        BFD_RELOC_MEP_HI16S = 1202,
        BFD_RELOC_MEP_GPREL = 1203,
        BFD_RELOC_MEP_TPREL = 1204,
        BFD_RELOC_MEP_TPREL7 = 1205,
        BFD_RELOC_MEP_TPREL7A2 = 1206,
        BFD_RELOC_MEP_TPREL7A4 = 1207,
        BFD_RELOC_MEP_UIMM24 = 1208,
        BFD_RELOC_MEP_ADDR24A4 = 1209,
        BFD_RELOC_MEP_GNU_VTINHERIT = 1210,
        BFD_RELOC_MEP_GNU_VTENTRY = 1211,
        BFD_RELOC_METAG_HIADDR16 = 1212,
        BFD_RELOC_METAG_LOADDR16 = 1213,
        BFD_RELOC_METAG_RELBRANCH = 1214,
        BFD_RELOC_METAG_GETSETOFF = 1215,
        BFD_RELOC_METAG_HIOG = 1216,
        BFD_RELOC_METAG_LOOG = 1217,
        BFD_RELOC_METAG_REL8 = 1218,
        BFD_RELOC_METAG_REL16 = 1219,
        BFD_RELOC_METAG_HI16GOTOFF = 1220,
        BFD_RELOC_METAG_LO16GOTOFF = 1221,
        BFD_RELOC_METAG_GETSET_GOTOFF = 1222,
        BFD_RELOC_METAG_GETSET_GOT = 1223,
        BFD_RELOC_METAG_HI16GOTPC = 1224,
        BFD_RELOC_METAG_LO16GOTPC = 1225,
        BFD_RELOC_METAG_HI16PLT = 1226,
        BFD_RELOC_METAG_LO16PLT = 1227,
        BFD_RELOC_METAG_RELBRANCH_PLT = 1228,
        BFD_RELOC_METAG_GOTOFF = 1229,
        BFD_RELOC_METAG_PLT = 1230,
        BFD_RELOC_METAG_COPY = 1231,
        BFD_RELOC_METAG_JMP_SLOT = 1232,
        BFD_RELOC_METAG_RELATIVE = 1233,
        BFD_RELOC_METAG_GLOB_DAT = 1234,
        BFD_RELOC_METAG_TLS_GD = 1235,
        BFD_RELOC_METAG_TLS_LDM = 1236,
        BFD_RELOC_METAG_TLS_LDO_HI16 = 1237,
        BFD_RELOC_METAG_TLS_LDO_LO16 = 1238,
        BFD_RELOC_METAG_TLS_LDO = 1239,
        BFD_RELOC_METAG_TLS_IE = 1240,
        BFD_RELOC_METAG_TLS_IENONPIC = 1241,
        BFD_RELOC_METAG_TLS_IENONPIC_HI16 = 1242,
        BFD_RELOC_METAG_TLS_IENONPIC_LO16 = 1243,
        BFD_RELOC_METAG_TLS_TPOFF = 1244,
        BFD_RELOC_METAG_TLS_DTPMOD = 1245,
        BFD_RELOC_METAG_TLS_DTPOFF = 1246,
        BFD_RELOC_METAG_TLS_LE = 1247,
        BFD_RELOC_METAG_TLS_LE_HI16 = 1248,
        BFD_RELOC_METAG_TLS_LE_LO16 = 1249,
        BFD_RELOC_MMIX_GETA = 1250,
        BFD_RELOC_MMIX_GETA_1 = 1251,
        BFD_RELOC_MMIX_GETA_2 = 1252,
        BFD_RELOC_MMIX_GETA_3 = 1253,
        BFD_RELOC_MMIX_CBRANCH = 1254,
        BFD_RELOC_MMIX_CBRANCH_J = 1255,
        BFD_RELOC_MMIX_CBRANCH_1 = 1256,
        BFD_RELOC_MMIX_CBRANCH_2 = 1257,
        BFD_RELOC_MMIX_CBRANCH_3 = 1258,
        BFD_RELOC_MMIX_PUSHJ = 1259,
        BFD_RELOC_MMIX_PUSHJ_1 = 1260,
        BFD_RELOC_MMIX_PUSHJ_2 = 1261,
        BFD_RELOC_MMIX_PUSHJ_3 = 1262,
        BFD_RELOC_MMIX_PUSHJ_STUBBABLE = 1263,
        BFD_RELOC_MMIX_JMP = 1264,
        BFD_RELOC_MMIX_JMP_1 = 1265,
        BFD_RELOC_MMIX_JMP_2 = 1266,
        BFD_RELOC_MMIX_JMP_3 = 1267,
        BFD_RELOC_MMIX_ADDR19 = 1268,
        BFD_RELOC_MMIX_ADDR27 = 1269,
        BFD_RELOC_MMIX_REG_OR_BYTE = 1270,
        BFD_RELOC_MMIX_REG = 1271,
        BFD_RELOC_MMIX_BASE_PLUS_OFFSET = 1272,
        BFD_RELOC_MMIX_LOCAL = 1273,
        BFD_RELOC_AVR_7PCREL = 1274,
        BFD_RELOC_AVR_13PCREL = 1275,
        BFD_RELOC_AVR_16PM = 1276,
        BFD_RELOC_AVR_LO8LDI = 1277,
        BFD_RELOC_AVR_HI8LDI = 1278,
        BFD_RELOC_AVR_HH8LDI = 1279,
        BFD_RELOC_AVR_MS8LDI = 1280,
        BFD_RELOC_AVR_LO8LDI_NEG = 1281,
        BFD_RELOC_AVR_HI8LDI_NEG = 1282,
        BFD_RELOC_AVR_HH8LDI_NEG = 1283,
        BFD_RELOC_AVR_MS8LDI_NEG = 1284,
        BFD_RELOC_AVR_LO8LDI_PM = 1285,
        BFD_RELOC_AVR_LO8LDI_GS = 1286,
        BFD_RELOC_AVR_HI8LDI_PM = 1287,
        BFD_RELOC_AVR_HI8LDI_GS = 1288,
        BFD_RELOC_AVR_HH8LDI_PM = 1289,
        BFD_RELOC_AVR_LO8LDI_PM_NEG = 1290,
        BFD_RELOC_AVR_HI8LDI_PM_NEG = 1291,
        BFD_RELOC_AVR_HH8LDI_PM_NEG = 1292,
        BFD_RELOC_AVR_CALL = 1293,
        BFD_RELOC_AVR_LDI = 1294,
        BFD_RELOC_AVR_6 = 1295,
        BFD_RELOC_AVR_6ADIW = 1296,
        BFD_RELOC_AVR_8LO = 1297,
        BFD_RELOC_AVR_8HI = 1298,
        BFD_RELOC_AVR_8HLO = 1299,
        BFD_RELOC_AVR_DIFF8 = 1300,
        BFD_RELOC_AVR_DIFF16 = 1301,
        BFD_RELOC_AVR_DIFF32 = 1302,
        BFD_RELOC_AVR_LDS_STS_16 = 1303,
        BFD_RELOC_AVR_PORT6 = 1304,
        BFD_RELOC_AVR_PORT5 = 1305,
        BFD_RELOC_RISCV_HI20 = 1306,
        BFD_RELOC_RISCV_PCREL_HI20 = 1307,
        BFD_RELOC_RISCV_PCREL_LO12I = 1308,
        BFD_RELOC_RISCV_PCREL_LO12S = 1309,
        BFD_RELOC_RISCV_LO12I = 1310,
        BFD_RELOC_RISCV_LO12S = 1311,
        BFD_RELOC_RISCV_GPREL12I = 1312,
        BFD_RELOC_RISCV_GPREL12S = 1313,
        BFD_RELOC_RISCV_TPREL_HI20 = 1314,
        BFD_RELOC_RISCV_TPREL_LO12I = 1315,
        BFD_RELOC_RISCV_TPREL_LO12S = 1316,
        BFD_RELOC_RISCV_TPREL_ADD = 1317,
        BFD_RELOC_RISCV_CALL = 1318,
        BFD_RELOC_RISCV_CALL_PLT = 1319,
        BFD_RELOC_RISCV_ADD8 = 1320,
        BFD_RELOC_RISCV_ADD16 = 1321,
        BFD_RELOC_RISCV_ADD32 = 1322,
        BFD_RELOC_RISCV_ADD64 = 1323,
        BFD_RELOC_RISCV_SUB8 = 1324,
        BFD_RELOC_RISCV_SUB16 = 1325,
        BFD_RELOC_RISCV_SUB32 = 1326,
        BFD_RELOC_RISCV_SUB64 = 1327,
        BFD_RELOC_RISCV_GOT_HI20 = 1328,
        BFD_RELOC_RISCV_TLS_GOT_HI20 = 1329,
        BFD_RELOC_RISCV_TLS_GD_HI20 = 1330,
        BFD_RELOC_RISCV_JMP = 1331,
        BFD_RELOC_RISCV_TLS_DTPMOD32 = 1332,
        BFD_RELOC_RISCV_TLS_DTPREL32 = 1333,
        BFD_RELOC_RISCV_TLS_DTPMOD64 = 1334,
        BFD_RELOC_RISCV_TLS_DTPREL64 = 1335,
        BFD_RELOC_RISCV_TLS_TPREL32 = 1336,
        BFD_RELOC_RISCV_TLS_TPREL64 = 1337,
        BFD_RELOC_RISCV_ALIGN = 1338,
        BFD_RELOC_RISCV_RVC_BRANCH = 1339,
        BFD_RELOC_RISCV_RVC_JUMP = 1340,
        BFD_RELOC_RISCV_RVC_LUI = 1341,
        BFD_RELOC_RISCV_GPREL_I = 1342,
        BFD_RELOC_RISCV_GPREL_S = 1343,
        BFD_RELOC_RISCV_TPREL_I = 1344,
        BFD_RELOC_RISCV_TPREL_S = 1345,
        BFD_RELOC_RISCV_RELAX = 1346,
        BFD_RELOC_RISCV_CFA = 1347,
        BFD_RELOC_RISCV_SUB6 = 1348,
        BFD_RELOC_RISCV_SET6 = 1349,
        BFD_RELOC_RISCV_SET8 = 1350,
        BFD_RELOC_RISCV_SET16 = 1351,
        BFD_RELOC_RISCV_SET32 = 1352,
        BFD_RELOC_RISCV_32PCREL = 1353,
        BFD_RELOC_RL78NEG8 = 1354,
        BFD_RELOC_RL78NEG16 = 1355,
        BFD_RELOC_RL78NEG24 = 1356,
        BFD_RELOC_RL78NEG32 = 1357,
        BFD_RELOC_RL78_16OP = 1358,
        BFD_RELOC_RL78_24OP = 1359,
        BFD_RELOC_RL78_32OP = 1360,
        BFD_RELOC_RL78_8U = 1361,
        BFD_RELOC_RL78_16U = 1362,
        BFD_RELOC_RL78_24U = 1363,
        BFD_RELOC_RL78DIR3U_PCREL = 1364,
        BFD_RELOC_RL78DIFF = 1365,
        BFD_RELOC_RL78GPRELB = 1366,
        BFD_RELOC_RL78GPRELW = 1367,
        BFD_RELOC_RL78GPRELL = 1368,
        BFD_RELOC_RL78SYM = 1369,
        BFD_RELOC_RL78OP_SUBTRACT = 1370,
        BFD_RELOC_RL78OP_NEG = 1371,
        BFD_RELOC_RL78OP_AND = 1372,
        BFD_RELOC_RL78OP_SHRA = 1373,
        BFD_RELOC_RL78ABS8 = 1374,
        BFD_RELOC_RL78ABS16 = 1375,
        BFD_RELOC_RL78ABS16REV = 1376,
        BFD_RELOC_RL78ABS32 = 1377,
        BFD_RELOC_RL78ABS32REV = 1378,
        BFD_RELOC_RL78ABS16U = 1379,
        BFD_RELOC_RL78ABS16UW = 1380,
        BFD_RELOC_RL78ABS16UL = 1381,
        BFD_RELOC_RL78RELAX = 1382,
        BFD_RELOC_RL78HI16 = 1383,
        BFD_RELOC_RL78HI8 = 1384,
        BFD_RELOC_RL78LO16 = 1385,
        BFD_RELOC_RL78CODE = 1386,
        BFD_RELOC_RL78SADDR = 1387,
        BFD_RELOC_RX_NEG8 = 1388,
        BFD_RELOC_RX_NEG16 = 1389,
        BFD_RELOC_RX_NEG24 = 1390,
        BFD_RELOC_RX_NEG32 = 1391,
        BFD_RELOC_RX_16OP = 1392,
        BFD_RELOC_RX_24OP = 1393,
        BFD_RELOC_RX_32OP = 1394,
        BFD_RELOC_RX_8U = 1395,
        BFD_RELOC_RX_16U = 1396,
        BFD_RELOC_RX_24U = 1397,
        BFD_RELOC_RX_DIR3U_PCREL = 1398,
        BFD_RELOC_RX_DIFF = 1399,
        BFD_RELOC_RX_GPRELB = 1400,
        BFD_RELOC_RX_GPRELW = 1401,
        BFD_RELOC_RX_GPRELL = 1402,
        BFD_RELOC_RX_SYM = 1403,
        BFD_RELOC_RX_OP_SUBTRACT = 1404,
        BFD_RELOC_RX_OP_NEG = 1405,
        BFD_RELOC_RX_ABS8 = 1406,
        BFD_RELOC_RX_ABS16 = 1407,
        BFD_RELOC_RX_ABS16REV = 1408,
        BFD_RELOC_RX_ABS32 = 1409,
        BFD_RELOC_RX_ABS32REV = 1410,
        BFD_RELOC_RX_ABS16U = 1411,
        BFD_RELOC_RX_ABS16UW = 1412,
        BFD_RELOC_RX_ABS16UL = 1413,
        BFD_RELOC_RX_RELAX = 1414,
        BFD_RELOC_390_12 = 1415,
        BFD_RELOC_390GOT12 = 1416,
        BFD_RELOC_390PLT32 = 1417,
        BFD_RELOC_390COPY = 1418,
        BFD_RELOC_390GLOB_DAT = 1419,
        BFD_RELOC_390JMP_SLOT = 1420,
        BFD_RELOC_390RELATIVE = 1421,
        BFD_RELOC_390GOTPC = 1422,
        BFD_RELOC_390GOT16 = 1423,
        BFD_RELOC_390PC12DBL = 1424,
        BFD_RELOC_390PLT12DBL = 1425,
        BFD_RELOC_390PC16DBL = 1426,
        BFD_RELOC_390PLT16DBL = 1427,
        BFD_RELOC_390PC24DBL = 1428,
        BFD_RELOC_390PLT24DBL = 1429,
        BFD_RELOC_390PC32DBL = 1430,
        BFD_RELOC_390PLT32DBL = 1431,
        BFD_RELOC_390GOTPCDBL = 1432,
        BFD_RELOC_390GOT64 = 1433,
        BFD_RELOC_390PLT64 = 1434,
        BFD_RELOC_390GOTENT = 1435,
        BFD_RELOC_390GOTOFF64 = 1436,
        BFD_RELOC_390GOTPLT12 = 1437,
        BFD_RELOC_390GOTPLT16 = 1438,
        BFD_RELOC_390GOTPLT32 = 1439,
        BFD_RELOC_390GOTPLT64 = 1440,
        BFD_RELOC_390GOTPLTENT = 1441,
        BFD_RELOC_390PLTOFF16 = 1442,
        BFD_RELOC_390PLTOFF32 = 1443,
        BFD_RELOC_390PLTOFF64 = 1444,
        BFD_RELOC_390TLS_LOAD = 1445,
        BFD_RELOC_390TLS_GDCALL = 1446,
        BFD_RELOC_390TLS_LDCALL = 1447,
        BFD_RELOC_390TLS_GD32 = 1448,
        BFD_RELOC_390TLS_GD64 = 1449,
        BFD_RELOC_390TLS_GOTIE12 = 1450,
        BFD_RELOC_390TLS_GOTIE32 = 1451,
        BFD_RELOC_390TLS_GOTIE64 = 1452,
        BFD_RELOC_390TLS_LDM32 = 1453,
        BFD_RELOC_390TLS_LDM64 = 1454,
        BFD_RELOC_390TLS_IE32 = 1455,
        BFD_RELOC_390TLS_IE64 = 1456,
        BFD_RELOC_390TLS_IEENT = 1457,
        BFD_RELOC_390TLS_LE32 = 1458,
        BFD_RELOC_390TLS_LE64 = 1459,
        BFD_RELOC_390TLS_LDO32 = 1460,
        BFD_RELOC_390TLS_LDO64 = 1461,
        BFD_RELOC_390TLS_DTPMOD = 1462,
        BFD_RELOC_390TLS_DTPOFF = 1463,
        BFD_RELOC_390TLS_TPOFF = 1464,
        BFD_RELOC_390_20 = 1465,
        BFD_RELOC_390GOT20 = 1466,
        BFD_RELOC_390GOTPLT20 = 1467,
        BFD_RELOC_390TLS_GOTIE20 = 1468,
        BFD_RELOC_390IRELATIVE = 1469,
        BFD_RELOC_SCORE_GPREL15 = 1470,
        BFD_RELOC_SCORE_DUMMY2 = 1471,
        BFD_RELOC_SCORE_JMP = 1472,
        BFD_RELOC_SCORE_BRANCH = 1473,
        BFD_RELOC_SCORE_IMM30 = 1474,
        BFD_RELOC_SCORE_IMM32 = 1475,
        BFD_RELOC_SCORE16JMP = 1476,
        BFD_RELOC_SCORE16BRANCH = 1477,
        BFD_RELOC_SCORE_BCMP = 1478,
        BFD_RELOC_SCORE_GOT15 = 1479,
        BFD_RELOC_SCORE_GOT_LO16 = 1480,
        BFD_RELOC_SCORE_CALL15 = 1481,
        BFD_RELOC_SCORE_DUMMY_HI16 = 1482,
        BFD_RELOC_IP2K_FR9 = 1483,
        BFD_RELOC_IP2K_BANK = 1484,
        BFD_RELOC_IP2K_ADDR16CJP = 1485,
        BFD_RELOC_IP2K_PAGE3 = 1486,
        BFD_RELOC_IP2K_LO8DATA = 1487,
        BFD_RELOC_IP2K_HI8DATA = 1488,
        BFD_RELOC_IP2K_EX8DATA = 1489,
        BFD_RELOC_IP2K_LO8INSN = 1490,
        BFD_RELOC_IP2K_HI8INSN = 1491,
        BFD_RELOC_IP2K_PC_SKIP = 1492,
        BFD_RELOC_IP2K_TEXT = 1493,
        BFD_RELOC_IP2K_FR_OFFSET = 1494,
        BFD_RELOC_VPE4KMATH_DATA = 1495,
        BFD_RELOC_VPE4KMATH_INSN = 1496,
        BFD_RELOC_VTABLE_INHERIT = 1497,
        BFD_RELOC_VTABLE_ENTRY = 1498,
        BFD_RELOC_IA64IMM14 = 1499,
        BFD_RELOC_IA64IMM22 = 1500,
        BFD_RELOC_IA64IMM64 = 1501,
        BFD_RELOC_IA64DIR32MSB = 1502,
        BFD_RELOC_IA64DIR32LSB = 1503,
        BFD_RELOC_IA64DIR64MSB = 1504,
        BFD_RELOC_IA64DIR64LSB = 1505,
        BFD_RELOC_IA64GPREL22 = 1506,
        BFD_RELOC_IA64GPREL64I = 1507,
        BFD_RELOC_IA64GPREL32MSB = 1508,
        BFD_RELOC_IA64GPREL32LSB = 1509,
        BFD_RELOC_IA64GPREL64MSB = 1510,
        BFD_RELOC_IA64GPREL64LSB = 1511,
        BFD_RELOC_IA64LTOFF22 = 1512,
        BFD_RELOC_IA64LTOFF64I = 1513,
        BFD_RELOC_IA64PLTOFF22 = 1514,
        BFD_RELOC_IA64PLTOFF64I = 1515,
        BFD_RELOC_IA64PLTOFF64MSB = 1516,
        BFD_RELOC_IA64PLTOFF64LSB = 1517,
        BFD_RELOC_IA64FPTR64I = 1518,
        BFD_RELOC_IA64FPTR32MSB = 1519,
        BFD_RELOC_IA64FPTR32LSB = 1520,
        BFD_RELOC_IA64FPTR64MSB = 1521,
        BFD_RELOC_IA64FPTR64LSB = 1522,
        BFD_RELOC_IA64PCREL21B = 1523,
        BFD_RELOC_IA64PCREL21BI = 1524,
        BFD_RELOC_IA64PCREL21M = 1525,
        BFD_RELOC_IA64PCREL21F = 1526,
        BFD_RELOC_IA64PCREL22 = 1527,
        BFD_RELOC_IA64PCREL60B = 1528,
        BFD_RELOC_IA64PCREL64I = 1529,
        BFD_RELOC_IA64PCREL32MSB = 1530,
        BFD_RELOC_IA64PCREL32LSB = 1531,
        BFD_RELOC_IA64PCREL64MSB = 1532,
        BFD_RELOC_IA64PCREL64LSB = 1533,
        BFD_RELOC_IA64LTOFF_FPTR22 = 1534,
        BFD_RELOC_IA64LTOFF_FPTR64I = 1535,
        BFD_RELOC_IA64LTOFF_FPTR32MSB = 1536,
        BFD_RELOC_IA64LTOFF_FPTR32LSB = 1537,
        BFD_RELOC_IA64LTOFF_FPTR64MSB = 1538,
        BFD_RELOC_IA64LTOFF_FPTR64LSB = 1539,
        BFD_RELOC_IA64SEGREL32MSB = 1540,
        BFD_RELOC_IA64SEGREL32LSB = 1541,
        BFD_RELOC_IA64SEGREL64MSB = 1542,
        BFD_RELOC_IA64SEGREL64LSB = 1543,
        BFD_RELOC_IA64SECREL32MSB = 1544,
        BFD_RELOC_IA64SECREL32LSB = 1545,
        BFD_RELOC_IA64SECREL64MSB = 1546,
        BFD_RELOC_IA64SECREL64LSB = 1547,
        BFD_RELOC_IA64REL32MSB = 1548,
        BFD_RELOC_IA64REL32LSB = 1549,
        BFD_RELOC_IA64REL64MSB = 1550,
        BFD_RELOC_IA64REL64LSB = 1551,
        BFD_RELOC_IA64LTV32MSB = 1552,
        BFD_RELOC_IA64LTV32LSB = 1553,
        BFD_RELOC_IA64LTV64MSB = 1554,
        BFD_RELOC_IA64LTV64LSB = 1555,
        BFD_RELOC_IA64IPLTMSB = 1556,
        BFD_RELOC_IA64IPLTLSB = 1557,
        BFD_RELOC_IA64COPY = 1558,
        BFD_RELOC_IA64LTOFF22X = 1559,
        BFD_RELOC_IA64LDXMOV = 1560,
        BFD_RELOC_IA64TPREL14 = 1561,
        BFD_RELOC_IA64TPREL22 = 1562,
        BFD_RELOC_IA64TPREL64I = 1563,
        BFD_RELOC_IA64TPREL64MSB = 1564,
        BFD_RELOC_IA64TPREL64LSB = 1565,
        BFD_RELOC_IA64LTOFF_TPREL22 = 1566,
        BFD_RELOC_IA64DTPMOD64MSB = 1567,
        BFD_RELOC_IA64DTPMOD64LSB = 1568,
        BFD_RELOC_IA64LTOFF_DTPMOD22 = 1569,
        BFD_RELOC_IA64DTPREL14 = 1570,
        BFD_RELOC_IA64DTPREL22 = 1571,
        BFD_RELOC_IA64DTPREL64I = 1572,
        BFD_RELOC_IA64DTPREL32MSB = 1573,
        BFD_RELOC_IA64DTPREL32LSB = 1574,
        BFD_RELOC_IA64DTPREL64MSB = 1575,
        BFD_RELOC_IA64DTPREL64LSB = 1576,
        BFD_RELOC_IA64LTOFF_DTPREL22 = 1577,
        BFD_RELOC_M68HC11HI8 = 1578,
        BFD_RELOC_M68HC11LO8 = 1579,
        BFD_RELOC_M68HC11_3B = 1580,
        BFD_RELOC_M68HC11RL_JUMP = 1581,
        BFD_RELOC_M68HC11RL_GROUP = 1582,
        BFD_RELOC_M68HC11LO16 = 1583,
        BFD_RELOC_M68HC11PAGE = 1584,
        BFD_RELOC_M68HC11_24 = 1585,
        BFD_RELOC_M68HC12_5B = 1586,
        BFD_RELOC_XGATE_RL_JUMP = 1587,
        BFD_RELOC_XGATE_RL_GROUP = 1588,
        BFD_RELOC_XGATE_LO16 = 1589,
        BFD_RELOC_XGATE_GPAGE = 1590,
        BFD_RELOC_XGATE_24 = 1591,
        BFD_RELOC_XGATE_PCREL_9 = 1592,
        BFD_RELOC_XGATE_PCREL_10 = 1593,
        BFD_RELOC_XGATE_IMM8LO = 1594,
        BFD_RELOC_XGATE_IMM8HI = 1595,
        BFD_RELOC_XGATE_IMM3 = 1596,
        BFD_RELOC_XGATE_IMM4 = 1597,
        BFD_RELOC_XGATE_IMM5 = 1598,
        BFD_RELOC_M68HC12_9B = 1599,
        BFD_RELOC_M68HC12_16B = 1600,
        BFD_RELOC_M68HC12_9PCREL = 1601,
        BFD_RELOC_M68HC12_10PCREL = 1602,
        BFD_RELOC_M68HC12LO8XG = 1603,
        BFD_RELOC_M68HC12HI8XG = 1604,
        BFD_RELOC_S12Z_15PCREL = 1605,
        BFD_RELOC_CR16NUM8 = 1606,
        BFD_RELOC_CR16NUM16 = 1607,
        BFD_RELOC_CR16NUM32 = 1608,
        BFD_RELOC_CR16NUM32a = 1609,
        BFD_RELOC_CR16REGREL0 = 1610,
        BFD_RELOC_CR16REGREL4 = 1611,
        BFD_RELOC_CR16REGREL4a = 1612,
        BFD_RELOC_CR16REGREL14 = 1613,
        BFD_RELOC_CR16REGREL14a = 1614,
        BFD_RELOC_CR16REGREL16 = 1615,
        BFD_RELOC_CR16REGREL20 = 1616,
        BFD_RELOC_CR16REGREL20a = 1617,
        BFD_RELOC_CR16ABS20 = 1618,
        BFD_RELOC_CR16ABS24 = 1619,
        BFD_RELOC_CR16IMM4 = 1620,
        BFD_RELOC_CR16IMM8 = 1621,
        BFD_RELOC_CR16IMM16 = 1622,
        BFD_RELOC_CR16IMM20 = 1623,
        BFD_RELOC_CR16IMM24 = 1624,
        BFD_RELOC_CR16IMM32 = 1625,
        BFD_RELOC_CR16IMM32a = 1626,
        BFD_RELOC_CR16DISP4 = 1627,
        BFD_RELOC_CR16DISP8 = 1628,
        BFD_RELOC_CR16DISP16 = 1629,
        BFD_RELOC_CR16DISP20 = 1630,
        BFD_RELOC_CR16DISP24 = 1631,
        BFD_RELOC_CR16DISP24a = 1632,
        BFD_RELOC_CR16SWITCH8 = 1633,
        BFD_RELOC_CR16SWITCH16 = 1634,
        BFD_RELOC_CR16SWITCH32 = 1635,
        BFD_RELOC_CR16GOT_REGREL20 = 1636,
        BFD_RELOC_CR16GOTC_REGREL20 = 1637,
        BFD_RELOC_CR16GLOB_DAT = 1638,
        BFD_RELOC_CRX_REL4 = 1639,
        BFD_RELOC_CRX_REL8 = 1640,
        BFD_RELOC_CRX_REL8CMP = 1641,
        BFD_RELOC_CRX_REL16 = 1642,
        BFD_RELOC_CRX_REL24 = 1643,
        BFD_RELOC_CRX_REL32 = 1644,
        BFD_RELOC_CRX_REGREL12 = 1645,
        BFD_RELOC_CRX_REGREL22 = 1646,
        BFD_RELOC_CRX_REGREL28 = 1647,
        BFD_RELOC_CRX_REGREL32 = 1648,
        BFD_RELOC_CRX_ABS16 = 1649,
        BFD_RELOC_CRX_ABS32 = 1650,
        BFD_RELOC_CRX_NUM8 = 1651,
        BFD_RELOC_CRX_NUM16 = 1652,
        BFD_RELOC_CRX_NUM32 = 1653,
        BFD_RELOC_CRX_IMM16 = 1654,
        BFD_RELOC_CRX_IMM32 = 1655,
        BFD_RELOC_CRX_SWITCH8 = 1656,
        BFD_RELOC_CRX_SWITCH16 = 1657,
        BFD_RELOC_CRX_SWITCH32 = 1658,
        BFD_RELOC_CRIS_BDISP8 = 1659,
        BFD_RELOC_CRIS_UNSIGNED_5 = 1660,
        BFD_RELOC_CRIS_SIGNED_6 = 1661,
        BFD_RELOC_CRIS_UNSIGNED_6 = 1662,
        BFD_RELOC_CRIS_SIGNED_8 = 1663,
        BFD_RELOC_CRIS_UNSIGNED_8 = 1664,
        BFD_RELOC_CRIS_SIGNED_16 = 1665,
        BFD_RELOC_CRIS_UNSIGNED_16 = 1666,
        BFD_RELOC_CRIS_LAPCQ_OFFSET = 1667,
        BFD_RELOC_CRIS_UNSIGNED_4 = 1668,
        BFD_RELOC_CRIS_COPY = 1669,
        BFD_RELOC_CRIS_GLOB_DAT = 1670,
        BFD_RELOC_CRIS_JUMP_SLOT = 1671,
        BFD_RELOC_CRIS_RELATIVE = 1672,
        BFD_RELOC_CRIS_32GOT = 1673,
        BFD_RELOC_CRIS_16GOT = 1674,
        BFD_RELOC_CRIS_32GOTPLT = 1675,
        BFD_RELOC_CRIS_16GOTPLT = 1676,
        BFD_RELOC_CRIS_32GOTREL = 1677,
        BFD_RELOC_CRIS_32PLT_GOTREL = 1678,
        BFD_RELOC_CRIS_32PLT_PCREL = 1679,
        BFD_RELOC_CRIS_32GOT_GD = 1680,
        BFD_RELOC_CRIS_16GOT_GD = 1681,
        BFD_RELOC_CRIS_32GD = 1682,
        BFD_RELOC_CRIS_DTP = 1683,
        BFD_RELOC_CRIS_32DTPREL = 1684,
        BFD_RELOC_CRIS_16DTPREL = 1685,
        BFD_RELOC_CRIS_32GOT_TPREL = 1686,
        BFD_RELOC_CRIS_16GOT_TPREL = 1687,
        BFD_RELOC_CRIS_32TPREL = 1688,
        BFD_RELOC_CRIS_16TPREL = 1689,
        BFD_RELOC_CRIS_DTPMOD = 1690,
        BFD_RELOC_CRIS_32IE = 1691,
        BFD_RELOC_OR1K_REL_26 = 1692,
        BFD_RELOC_OR1K_SLO16 = 1693,
        BFD_RELOC_OR1K_PCREL_PG21 = 1694,
        BFD_RELOC_OR1K_LO13 = 1695,
        BFD_RELOC_OR1K_SLO13 = 1696,
        BFD_RELOC_OR1K_GOTPC_HI16 = 1697,
        BFD_RELOC_OR1K_GOTPC_LO16 = 1698,
        BFD_RELOC_OR1K_GOT16 = 1699,
        BFD_RELOC_OR1K_GOT_PG21 = 1700,
        BFD_RELOC_OR1K_GOT_LO13 = 1701,
        BFD_RELOC_OR1K_PLT26 = 1702,
        BFD_RELOC_OR1K_PLTA26 = 1703,
        BFD_RELOC_OR1K_GOTOFF_SLO16 = 1704,
        BFD_RELOC_OR1K_COPY = 1705,
        BFD_RELOC_OR1K_GLOB_DAT = 1706,
        BFD_RELOC_OR1K_JMP_SLOT = 1707,
        BFD_RELOC_OR1K_RELATIVE = 1708,
        BFD_RELOC_OR1K_TLS_GD_HI16 = 1709,
        BFD_RELOC_OR1K_TLS_GD_LO16 = 1710,
        BFD_RELOC_OR1K_TLS_GD_PG21 = 1711,
        BFD_RELOC_OR1K_TLS_GD_LO13 = 1712,
        BFD_RELOC_OR1K_TLS_LDM_HI16 = 1713,
        BFD_RELOC_OR1K_TLS_LDM_LO16 = 1714,
        BFD_RELOC_OR1K_TLS_LDM_PG21 = 1715,
        BFD_RELOC_OR1K_TLS_LDM_LO13 = 1716,
        BFD_RELOC_OR1K_TLS_LDO_HI16 = 1717,
        BFD_RELOC_OR1K_TLS_LDO_LO16 = 1718,
        BFD_RELOC_OR1K_TLS_IE_HI16 = 1719,
        BFD_RELOC_OR1K_TLS_IE_AHI16 = 1720,
        BFD_RELOC_OR1K_TLS_IE_LO16 = 1721,
        BFD_RELOC_OR1K_TLS_IE_PG21 = 1722,
        BFD_RELOC_OR1K_TLS_IE_LO13 = 1723,
        BFD_RELOC_OR1K_TLS_LE_HI16 = 1724,
        BFD_RELOC_OR1K_TLS_LE_AHI16 = 1725,
        BFD_RELOC_OR1K_TLS_LE_LO16 = 1726,
        BFD_RELOC_OR1K_TLS_LE_SLO16 = 1727,
        BFD_RELOC_OR1K_TLS_TPOFF = 1728,
        BFD_RELOC_OR1K_TLS_DTPOFF = 1729,
        BFD_RELOC_OR1K_TLS_DTPMOD = 1730,
        BFD_RELOC_H8DIR16A8 = 1731,
        BFD_RELOC_H8DIR16R8 = 1732,
        BFD_RELOC_H8DIR24A8 = 1733,
        BFD_RELOC_H8DIR24R8 = 1734,
        BFD_RELOC_H8DIR32A16 = 1735,
        BFD_RELOC_H8DISP32A16 = 1736,
        BFD_RELOC_XSTORMY16REL_12 = 1737,
        BFD_RELOC_XSTORMY16_12 = 1738,
        BFD_RELOC_XSTORMY16_24 = 1739,
        BFD_RELOC_XSTORMY16FPTR16 = 1740,
        BFD_RELOC_RELC = 1741,
        BFD_RELOC_XC16X_PAG = 1742,
        BFD_RELOC_XC16X_POF = 1743,
        BFD_RELOC_XC16X_SEG = 1744,
        BFD_RELOC_XC16X_SOF = 1745,
        BFD_RELOC_VAX_GLOB_DAT = 1746,
        BFD_RELOC_VAX_JMP_SLOT = 1747,
        BFD_RELOC_VAX_RELATIVE = 1748,
        BFD_RELOC_MT_PC16 = 1749,
        BFD_RELOC_MT_HI16 = 1750,
        BFD_RELOC_MT_LO16 = 1751,
        BFD_RELOC_MT_GNU_VTINHERIT = 1752,
        BFD_RELOC_MT_GNU_VTENTRY = 1753,
        BFD_RELOC_MT_PCINSN8 = 1754,
        BFD_RELOC_MSP430_10PCREL = 1755,
        BFD_RELOC_MSP430_16PCREL = 1756,
        BFD_RELOC_MSP430_16 = 1757,
        BFD_RELOC_MSP430_16PCREL_BYTE = 1758,
        BFD_RELOC_MSP430_16BYTE = 1759,
        BFD_RELOC_MSP430_2X_PCREL = 1760,
        BFD_RELOC_MSP430RL_PCREL = 1761,
        BFD_RELOC_MSP430ABS8 = 1762,
        BFD_RELOC_MSP430X_PCR20EXT_SRC = 1763,
        BFD_RELOC_MSP430X_PCR20EXT_DST = 1764,
        BFD_RELOC_MSP430X_PCR20EXT_ODST = 1765,
        BFD_RELOC_MSP430X_ABS20EXT_SRC = 1766,
        BFD_RELOC_MSP430X_ABS20EXT_DST = 1767,
        BFD_RELOC_MSP430X_ABS20EXT_ODST = 1768,
        BFD_RELOC_MSP430X_ABS20ADR_SRC = 1769,
        BFD_RELOC_MSP430X_ABS20ADR_DST = 1770,
        BFD_RELOC_MSP430X_PCR16 = 1771,
        BFD_RELOC_MSP430X_PCR20CALL = 1772,
        BFD_RELOC_MSP430X_ABS16 = 1773,
        BFD_RELOC_MSP430ABS_HI16 = 1774,
        BFD_RELOC_MSP430PREL31 = 1775,
        BFD_RELOC_MSP430SYM_DIFF = 1776,
        BFD_RELOC_NIOS2S16 = 1777,
        BFD_RELOC_NIOS2U16 = 1778,
        BFD_RELOC_NIOS2CALL26 = 1779,
        BFD_RELOC_NIOS2IMM5 = 1780,
        BFD_RELOC_NIOS2CACHE_OPX = 1781,
        BFD_RELOC_NIOS2IMM6 = 1782,
        BFD_RELOC_NIOS2IMM8 = 1783,
        BFD_RELOC_NIOS2HI16 = 1784,
        BFD_RELOC_NIOS2LO16 = 1785,
        BFD_RELOC_NIOS2HIADJ16 = 1786,
        BFD_RELOC_NIOS2GPREL = 1787,
        BFD_RELOC_NIOS2UJMP = 1788,
        BFD_RELOC_NIOS2CJMP = 1789,
        BFD_RELOC_NIOS2CALLR = 1790,
        BFD_RELOC_NIOS2ALIGN = 1791,
        BFD_RELOC_NIOS2GOT16 = 1792,
        BFD_RELOC_NIOS2CALL16 = 1793,
        BFD_RELOC_NIOS2GOTOFF_LO = 1794,
        BFD_RELOC_NIOS2GOTOFF_HA = 1795,
        BFD_RELOC_NIOS2PCREL_LO = 1796,
        BFD_RELOC_NIOS2PCREL_HA = 1797,
        BFD_RELOC_NIOS2TLS_GD16 = 1798,
        BFD_RELOC_NIOS2TLS_LDM16 = 1799,
        BFD_RELOC_NIOS2TLS_LDO16 = 1800,
        BFD_RELOC_NIOS2TLS_IE16 = 1801,
        BFD_RELOC_NIOS2TLS_LE16 = 1802,
        BFD_RELOC_NIOS2TLS_DTPMOD = 1803,
        BFD_RELOC_NIOS2TLS_DTPREL = 1804,
        BFD_RELOC_NIOS2TLS_TPREL = 1805,
        BFD_RELOC_NIOS2COPY = 1806,
        BFD_RELOC_NIOS2GLOB_DAT = 1807,
        BFD_RELOC_NIOS2JUMP_SLOT = 1808,
        BFD_RELOC_NIOS2RELATIVE = 1809,
        BFD_RELOC_NIOS2GOTOFF = 1810,
        BFD_RELOC_NIOS2CALL26NOAT = 1811,
        BFD_RELOC_NIOS2GOT_LO = 1812,
        BFD_RELOC_NIOS2GOT_HA = 1813,
        BFD_RELOC_NIOS2CALL_LO = 1814,
        BFD_RELOC_NIOS2CALL_HA = 1815,
        BFD_RELOC_NIOS2R2S12 = 1816,
        BFD_RELOC_NIOS2R2I10_1PCREL = 1817,
        BFD_RELOC_NIOS2R2T1I7_1PCREL = 1818,
        BFD_RELOC_NIOS2R2T1I7_2 = 1819,
        BFD_RELOC_NIOS2R2T2I4 = 1820,
        BFD_RELOC_NIOS2R2T2I4_1 = 1821,
        BFD_RELOC_NIOS2R2T2I4_2 = 1822,
        BFD_RELOC_NIOS2R2X1I7_2 = 1823,
        BFD_RELOC_NIOS2R2X2L5 = 1824,
        BFD_RELOC_NIOS2R2F1I5_2 = 1825,
        BFD_RELOC_NIOS2R2L5I4X1 = 1826,
        BFD_RELOC_NIOS2R2T1X1I6 = 1827,
        BFD_RELOC_NIOS2R2T1X1I6_2 = 1828,
        BFD_RELOC_PRU_U16 = 1829,
        BFD_RELOC_PRU_U16PMEMIMM = 1830,
        BFD_RELOC_PRU_LDI32 = 1831,
        BFD_RELOC_PRU_S10PCREL = 1832,
        BFD_RELOC_PRU_U8PCREL = 1833,
        BFD_RELOC_PRU_32PMEM = 1834,
        BFD_RELOC_PRU_16PMEM = 1835,
        BFD_RELOC_PRU_GNU_DIFF8 = 1836,
        BFD_RELOC_PRU_GNU_DIFF16 = 1837,
        BFD_RELOC_PRU_GNU_DIFF32 = 1838,
        BFD_RELOC_PRU_GNU_DIFF16PMEM = 1839,
        BFD_RELOC_PRU_GNU_DIFF32PMEM = 1840,
        BFD_RELOC_IQ2000OFFSET_16 = 1841,
        BFD_RELOC_IQ2000OFFSET_21 = 1842,
        BFD_RELOC_IQ2000UHI16 = 1843,
        BFD_RELOC_XTENSA_RTLD = 1844,
        BFD_RELOC_XTENSA_GLOB_DAT = 1845,
        BFD_RELOC_XTENSA_JMP_SLOT = 1846,
        BFD_RELOC_XTENSA_RELATIVE = 1847,
        BFD_RELOC_XTENSA_PLT = 1848,
        BFD_RELOC_XTENSA_DIFF8 = 1849,
        BFD_RELOC_XTENSA_DIFF16 = 1850,
        BFD_RELOC_XTENSA_DIFF32 = 1851,
        BFD_RELOC_XTENSA_SLOT0OP = 1852,
        BFD_RELOC_XTENSA_SLOT1OP = 1853,
        BFD_RELOC_XTENSA_SLOT2OP = 1854,
        BFD_RELOC_XTENSA_SLOT3OP = 1855,
        BFD_RELOC_XTENSA_SLOT4OP = 1856,
        BFD_RELOC_XTENSA_SLOT5OP = 1857,
        BFD_RELOC_XTENSA_SLOT6OP = 1858,
        BFD_RELOC_XTENSA_SLOT7OP = 1859,
        BFD_RELOC_XTENSA_SLOT8OP = 1860,
        BFD_RELOC_XTENSA_SLOT9OP = 1861,
        BFD_RELOC_XTENSA_SLOT10OP = 1862,
        BFD_RELOC_XTENSA_SLOT11OP = 1863,
        BFD_RELOC_XTENSA_SLOT12OP = 1864,
        BFD_RELOC_XTENSA_SLOT13OP = 1865,
        BFD_RELOC_XTENSA_SLOT14OP = 1866,
        BFD_RELOC_XTENSA_SLOT0ALT = 1867,
        BFD_RELOC_XTENSA_SLOT1ALT = 1868,
        BFD_RELOC_XTENSA_SLOT2ALT = 1869,
        BFD_RELOC_XTENSA_SLOT3ALT = 1870,
        BFD_RELOC_XTENSA_SLOT4ALT = 1871,
        BFD_RELOC_XTENSA_SLOT5ALT = 1872,
        BFD_RELOC_XTENSA_SLOT6ALT = 1873,
        BFD_RELOC_XTENSA_SLOT7ALT = 1874,
        BFD_RELOC_XTENSA_SLOT8ALT = 1875,
        BFD_RELOC_XTENSA_SLOT9ALT = 1876,
        BFD_RELOC_XTENSA_SLOT10ALT = 1877,
        BFD_RELOC_XTENSA_SLOT11ALT = 1878,
        BFD_RELOC_XTENSA_SLOT12ALT = 1879,
        BFD_RELOC_XTENSA_SLOT13ALT = 1880,
        BFD_RELOC_XTENSA_SLOT14ALT = 1881,
        BFD_RELOC_XTENSA_OP0 = 1882,
        BFD_RELOC_XTENSA_OP1 = 1883,
        BFD_RELOC_XTENSA_OP2 = 1884,
        BFD_RELOC_XTENSA_ASM_EXPAND = 1885,
        BFD_RELOC_XTENSA_ASM_SIMPLIFY = 1886,
        BFD_RELOC_XTENSA_TLSDESC_FN = 1887,
        BFD_RELOC_XTENSA_TLSDESC_ARG = 1888,
        BFD_RELOC_XTENSA_TLS_DTPOFF = 1889,
        BFD_RELOC_XTENSA_TLS_TPOFF = 1890,
        BFD_RELOC_XTENSA_TLS_FUNC = 1891,
        BFD_RELOC_XTENSA_TLS_ARG = 1892,
        BFD_RELOC_XTENSA_TLS_CALL = 1893,
        BFD_RELOC_Z80DISP8 = 1894,
        BFD_RELOC_Z80BYTE0 = 1895,
        BFD_RELOC_Z80BYTE1 = 1896,
        BFD_RELOC_Z80BYTE2 = 1897,
        BFD_RELOC_Z80BYTE3 = 1898,
        BFD_RELOC_Z80WORD0 = 1899,
        BFD_RELOC_Z80WORD1 = 1900,
        BFD_RELOC_Z8K_DISP7 = 1901,
        BFD_RELOC_Z8K_CALLR = 1902,
        BFD_RELOC_Z8K_IMM4L = 1903,
        BFD_RELOC_LM32CALL = 1904,
        BFD_RELOC_LM32BRANCH = 1905,
        BFD_RELOC_LM32_16GOT = 1906,
        BFD_RELOC_LM32GOTOFF_HI16 = 1907,
        BFD_RELOC_LM32GOTOFF_LO16 = 1908,
        BFD_RELOC_LM32COPY = 1909,
        BFD_RELOC_LM32GLOB_DAT = 1910,
        BFD_RELOC_LM32JMP_SLOT = 1911,
        BFD_RELOC_LM32RELATIVE = 1912,
        BFD_RELOC_MACH_O_SECTDIFF = 1913,
        BFD_RELOC_MACH_O_LOCAL_SECTDIFF = 1914,
        BFD_RELOC_MACH_O_PAIR = 1915,
        BFD_RELOC_MACH_O_SUBTRACTOR32 = 1916,
        BFD_RELOC_MACH_O_SUBTRACTOR64 = 1917,
        BFD_RELOC_MACH_O_X86_64BRANCH32 = 1918,
        BFD_RELOC_MACH_O_X86_64BRANCH8 = 1919,
        BFD_RELOC_MACH_O_X86_64GOT = 1920,
        BFD_RELOC_MACH_O_X86_64GOT_LOAD = 1921,
        BFD_RELOC_MACH_O_X86_64PCREL32_1 = 1922,
        BFD_RELOC_MACH_O_X86_64PCREL32_2 = 1923,
        BFD_RELOC_MACH_O_X86_64PCREL32_4 = 1924,
        BFD_RELOC_MACH_O_X86_64TLV = 1925,
        BFD_RELOC_MACH_O_ARM64ADDEND = 1926,
        BFD_RELOC_MACH_O_ARM64GOT_LOAD_PAGE21 = 1927,
        BFD_RELOC_MACH_O_ARM64GOT_LOAD_PAGEOFF12 = 1928,
        BFD_RELOC_MACH_O_ARM64POINTER_TO_GOT = 1929,
        BFD_RELOC_MICROBLAZE_32LO = 1930,
        BFD_RELOC_MICROBLAZE_32LO_PCREL = 1931,
        BFD_RELOC_MICROBLAZE_32ROSDA = 1932,
        BFD_RELOC_MICROBLAZE_32RWSDA = 1933,
        BFD_RELOC_MICROBLAZE_32SYM_OP_SYM = 1934,
        BFD_RELOC_MICROBLAZE_64NONE = 1935,
        BFD_RELOC_MICROBLAZE_64GOTPC = 1936,
        BFD_RELOC_MICROBLAZE_64GOT = 1937,
        BFD_RELOC_MICROBLAZE_64PLT = 1938,
        BFD_RELOC_MICROBLAZE_64GOTOFF = 1939,
        BFD_RELOC_MICROBLAZE_32GOTOFF = 1940,
        BFD_RELOC_MICROBLAZE_COPY = 1941,
        BFD_RELOC_MICROBLAZE_64TLS = 1942,
        BFD_RELOC_MICROBLAZE_64TLSGD = 1943,
        BFD_RELOC_MICROBLAZE_64TLSLD = 1944,
        BFD_RELOC_MICROBLAZE_32TLSDTPMOD = 1945,
        BFD_RELOC_MICROBLAZE_32TLSDTPREL = 1946,
        BFD_RELOC_MICROBLAZE_64TLSDTPREL = 1947,
        BFD_RELOC_MICROBLAZE_64TLSGOTTPREL = 1948,
        BFD_RELOC_MICROBLAZE_64TLSTPREL = 1949,
        BFD_RELOC_MICROBLAZE_64TEXTPCREL = 1950,
        BFD_RELOC_MICROBLAZE_64TEXTREL = 1951,
        BFD_RELOC_AARCH64RELOC_START = 1952,
        BFD_RELOC_AARCH64NULL = 1953,
        BFD_RELOC_AARCH64NONE = 1954,
        BFD_RELOC_AARCH64_64 = 1955,
        BFD_RELOC_AARCH64_32 = 1956,
        BFD_RELOC_AARCH64_16 = 1957,
        BFD_RELOC_AARCH64_64PCREL = 1958,
        BFD_RELOC_AARCH64_32PCREL = 1959,
        BFD_RELOC_AARCH64_16PCREL = 1960,
        BFD_RELOC_AARCH64MOVW_G0 = 1961,
        BFD_RELOC_AARCH64MOVW_G0NC = 1962,
        BFD_RELOC_AARCH64MOVW_G1 = 1963,
        BFD_RELOC_AARCH64MOVW_G1NC = 1964,
        BFD_RELOC_AARCH64MOVW_G2 = 1965,
        BFD_RELOC_AARCH64MOVW_G2NC = 1966,
        BFD_RELOC_AARCH64MOVW_G3 = 1967,
        BFD_RELOC_AARCH64MOVW_G0S = 1968,
        BFD_RELOC_AARCH64MOVW_G1S = 1969,
        BFD_RELOC_AARCH64MOVW_G2S = 1970,
        BFD_RELOC_AARCH64MOVW_PREL_G0 = 1971,
        BFD_RELOC_AARCH64MOVW_PREL_G0NC = 1972,
        BFD_RELOC_AARCH64MOVW_PREL_G1 = 1973,
        BFD_RELOC_AARCH64MOVW_PREL_G1NC = 1974,
        BFD_RELOC_AARCH64MOVW_PREL_G2 = 1975,
        BFD_RELOC_AARCH64MOVW_PREL_G2NC = 1976,
        BFD_RELOC_AARCH64MOVW_PREL_G3 = 1977,
        BFD_RELOC_AARCH64LD_LO19PCREL = 1978,
        BFD_RELOC_AARCH64ADR_LO21PCREL = 1979,
        BFD_RELOC_AARCH64ADR_HI21PCREL = 1980,
        BFD_RELOC_AARCH64ADR_HI21NC_PCREL = 1981,
        BFD_RELOC_AARCH64ADD_LO12 = 1982,
        BFD_RELOC_AARCH64LDST8LO12 = 1983,
        BFD_RELOC_AARCH64TSTBR14 = 1984,
        BFD_RELOC_AARCH64BRANCH19 = 1985,
        BFD_RELOC_AARCH64JUMP26 = 1986,
        BFD_RELOC_AARCH64CALL26 = 1987,
        BFD_RELOC_AARCH64LDST16LO12 = 1988,
        BFD_RELOC_AARCH64LDST32LO12 = 1989,
        BFD_RELOC_AARCH64LDST64LO12 = 1990,
        BFD_RELOC_AARCH64LDST128LO12 = 1991,
        BFD_RELOC_AARCH64GOT_LD_PREL19 = 1992,
        BFD_RELOC_AARCH64ADR_GOT_PAGE = 1993,
        BFD_RELOC_AARCH64LD64GOT_LO12NC = 1994,
        BFD_RELOC_AARCH64LD32GOT_LO12NC = 1995,
        BFD_RELOC_AARCH64MOVW_GOTOFF_G0NC = 1996,
        BFD_RELOC_AARCH64MOVW_GOTOFF_G1 = 1997,
        BFD_RELOC_AARCH64LD64GOTOFF_LO15 = 1998,
        BFD_RELOC_AARCH64LD32GOTPAGE_LO14 = 1999,
        BFD_RELOC_AARCH64LD64GOTPAGE_LO15 = 2000,
        BFD_RELOC_AARCH64TLSGD_ADR_PAGE21 = 2001,
        BFD_RELOC_AARCH64TLSGD_ADR_PREL21 = 2002,
        BFD_RELOC_AARCH64TLSGD_ADD_LO12NC = 2003,
        BFD_RELOC_AARCH64TLSGD_MOVW_G0NC = 2004,
        BFD_RELOC_AARCH64TLSGD_MOVW_G1 = 2005,
        BFD_RELOC_AARCH64TLSIE_ADR_GOTTPREL_PAGE21 = 2006,
        BFD_RELOC_AARCH64TLSIE_LD64GOTTPREL_LO12NC = 2007,
        BFD_RELOC_AARCH64TLSIE_LD32GOTTPREL_LO12NC = 2008,
        BFD_RELOC_AARCH64TLSIE_LD_GOTTPREL_PREL19 = 2009,
        BFD_RELOC_AARCH64TLSIE_MOVW_GOTTPREL_G0NC = 2010,
        BFD_RELOC_AARCH64TLSIE_MOVW_GOTTPREL_G1 = 2011,
        BFD_RELOC_AARCH64TLSLD_ADD_DTPREL_HI12 = 2012,
        BFD_RELOC_AARCH64TLSLD_ADD_DTPREL_LO12 = 2013,
        BFD_RELOC_AARCH64TLSLD_ADD_DTPREL_LO12NC = 2014,
        BFD_RELOC_AARCH64TLSLD_ADD_LO12NC = 2015,
        BFD_RELOC_AARCH64TLSLD_ADR_PAGE21 = 2016,
        BFD_RELOC_AARCH64TLSLD_ADR_PREL21 = 2017,
        BFD_RELOC_AARCH64TLSLD_LDST16DTPREL_LO12 = 2018,
        BFD_RELOC_AARCH64TLSLD_LDST16DTPREL_LO12NC = 2019,
        BFD_RELOC_AARCH64TLSLD_LDST32DTPREL_LO12 = 2020,
        BFD_RELOC_AARCH64TLSLD_LDST32DTPREL_LO12NC = 2021,
        BFD_RELOC_AARCH64TLSLD_LDST64DTPREL_LO12 = 2022,
        BFD_RELOC_AARCH64TLSLD_LDST64DTPREL_LO12NC = 2023,
        BFD_RELOC_AARCH64TLSLD_LDST8DTPREL_LO12 = 2024,
        BFD_RELOC_AARCH64TLSLD_LDST8DTPREL_LO12NC = 2025,
        BFD_RELOC_AARCH64TLSLD_MOVW_DTPREL_G0 = 2026,
        BFD_RELOC_AARCH64TLSLD_MOVW_DTPREL_G0NC = 2027,
        BFD_RELOC_AARCH64TLSLD_MOVW_DTPREL_G1 = 2028,
        BFD_RELOC_AARCH64TLSLD_MOVW_DTPREL_G1NC = 2029,
        BFD_RELOC_AARCH64TLSLD_MOVW_DTPREL_G2 = 2030,
        BFD_RELOC_AARCH64TLSLE_MOVW_TPREL_G2 = 2031,
        BFD_RELOC_AARCH64TLSLE_MOVW_TPREL_G1 = 2032,
        BFD_RELOC_AARCH64TLSLE_MOVW_TPREL_G1NC = 2033,
        BFD_RELOC_AARCH64TLSLE_MOVW_TPREL_G0 = 2034,
        BFD_RELOC_AARCH64TLSLE_MOVW_TPREL_G0NC = 2035,
        BFD_RELOC_AARCH64TLSLE_ADD_TPREL_HI12 = 2036,
        BFD_RELOC_AARCH64TLSLE_ADD_TPREL_LO12 = 2037,
        BFD_RELOC_AARCH64TLSLE_ADD_TPREL_LO12NC = 2038,
        BFD_RELOC_AARCH64TLSLE_LDST16TPREL_LO12 = 2039,
        BFD_RELOC_AARCH64TLSLE_LDST16TPREL_LO12NC = 2040,
        BFD_RELOC_AARCH64TLSLE_LDST32TPREL_LO12 = 2041,
        BFD_RELOC_AARCH64TLSLE_LDST32TPREL_LO12NC = 2042,
        BFD_RELOC_AARCH64TLSLE_LDST64TPREL_LO12 = 2043,
        BFD_RELOC_AARCH64TLSLE_LDST64TPREL_LO12NC = 2044,
        BFD_RELOC_AARCH64TLSLE_LDST8TPREL_LO12 = 2045,
        BFD_RELOC_AARCH64TLSLE_LDST8TPREL_LO12NC = 2046,
        BFD_RELOC_AARCH64TLSDESC_LD_PREL19 = 2047,
        BFD_RELOC_AARCH64TLSDESC_ADR_PREL21 = 2048,
        BFD_RELOC_AARCH64TLSDESC_ADR_PAGE21 = 2049,
        BFD_RELOC_AARCH64TLSDESC_LD64LO12 = 2050,
        BFD_RELOC_AARCH64TLSDESC_LD32LO12NC = 2051,
        BFD_RELOC_AARCH64TLSDESC_ADD_LO12 = 2052,
        BFD_RELOC_AARCH64TLSDESC_OFF_G1 = 2053,
        BFD_RELOC_AARCH64TLSDESC_OFF_G0NC = 2054,
        BFD_RELOC_AARCH64TLSDESC_LDR = 2055,
        BFD_RELOC_AARCH64TLSDESC_ADD = 2056,
        BFD_RELOC_AARCH64TLSDESC_CALL = 2057,
        BFD_RELOC_AARCH64COPY = 2058,
        BFD_RELOC_AARCH64GLOB_DAT = 2059,
        BFD_RELOC_AARCH64JUMP_SLOT = 2060,
        BFD_RELOC_AARCH64RELATIVE = 2061,
        BFD_RELOC_AARCH64TLS_DTPMOD = 2062,
        BFD_RELOC_AARCH64TLS_DTPREL = 2063,
        BFD_RELOC_AARCH64TLS_TPREL = 2064,
        BFD_RELOC_AARCH64TLSDESC = 2065,
        BFD_RELOC_AARCH64IRELATIVE = 2066,
        BFD_RELOC_AARCH64RELOC_END = 2067,
        BFD_RELOC_AARCH64GAS_INTERNAL_FIXUP = 2068,
        BFD_RELOC_AARCH64LDST_LO12 = 2069,
        BFD_RELOC_AARCH64TLSLD_LDST_DTPREL_LO12 = 2070,
        BFD_RELOC_AARCH64TLSLD_LDST_DTPREL_LO12NC = 2071,
        BFD_RELOC_AARCH64TLSLE_LDST_TPREL_LO12 = 2072,
        BFD_RELOC_AARCH64TLSLE_LDST_TPREL_LO12NC = 2073,
        BFD_RELOC_AARCH64LD_GOT_LO12NC = 2074,
        BFD_RELOC_AARCH64TLSIE_LD_GOTTPREL_LO12NC = 2075,
        BFD_RELOC_AARCH64TLSDESC_LD_LO12NC = 2076,
        BFD_RELOC_TILEPRO_COPY = 2077,
        BFD_RELOC_TILEPRO_GLOB_DAT = 2078,
        BFD_RELOC_TILEPRO_JMP_SLOT = 2079,
        BFD_RELOC_TILEPRO_RELATIVE = 2080,
        BFD_RELOC_TILEPRO_BROFF_X1 = 2081,
        BFD_RELOC_TILEPRO_JOFFLONG_X1 = 2082,
        BFD_RELOC_TILEPRO_JOFFLONG_X1PLT = 2083,
        BFD_RELOC_TILEPRO_IMM8X0 = 2084,
        BFD_RELOC_TILEPRO_IMM8Y0 = 2085,
        BFD_RELOC_TILEPRO_IMM8X1 = 2086,
        BFD_RELOC_TILEPRO_IMM8Y1 = 2087,
        BFD_RELOC_TILEPRO_DEST_IMM8X1 = 2088,
        BFD_RELOC_TILEPRO_MT_IMM15X1 = 2089,
        BFD_RELOC_TILEPRO_MF_IMM15X1 = 2090,
        BFD_RELOC_TILEPRO_IMM16X0 = 2091,
        BFD_RELOC_TILEPRO_IMM16X1 = 2092,
        BFD_RELOC_TILEPRO_IMM16X0LO = 2093,
        BFD_RELOC_TILEPRO_IMM16X1LO = 2094,
        BFD_RELOC_TILEPRO_IMM16X0HI = 2095,
        BFD_RELOC_TILEPRO_IMM16X1HI = 2096,
        BFD_RELOC_TILEPRO_IMM16X0HA = 2097,
        BFD_RELOC_TILEPRO_IMM16X1HA = 2098,
        BFD_RELOC_TILEPRO_IMM16X0PCREL = 2099,
        BFD_RELOC_TILEPRO_IMM16X1PCREL = 2100,
        BFD_RELOC_TILEPRO_IMM16X0LO_PCREL = 2101,
        BFD_RELOC_TILEPRO_IMM16X1LO_PCREL = 2102,
        BFD_RELOC_TILEPRO_IMM16X0HI_PCREL = 2103,
        BFD_RELOC_TILEPRO_IMM16X1HI_PCREL = 2104,
        BFD_RELOC_TILEPRO_IMM16X0HA_PCREL = 2105,
        BFD_RELOC_TILEPRO_IMM16X1HA_PCREL = 2106,
        BFD_RELOC_TILEPRO_IMM16X0GOT = 2107,
        BFD_RELOC_TILEPRO_IMM16X1GOT = 2108,
        BFD_RELOC_TILEPRO_IMM16X0GOT_LO = 2109,
        BFD_RELOC_TILEPRO_IMM16X1GOT_LO = 2110,
        BFD_RELOC_TILEPRO_IMM16X0GOT_HI = 2111,
        BFD_RELOC_TILEPRO_IMM16X1GOT_HI = 2112,
        BFD_RELOC_TILEPRO_IMM16X0GOT_HA = 2113,
        BFD_RELOC_TILEPRO_IMM16X1GOT_HA = 2114,
        BFD_RELOC_TILEPRO_MMSTART_X0 = 2115,
        BFD_RELOC_TILEPRO_MMEND_X0 = 2116,
        BFD_RELOC_TILEPRO_MMSTART_X1 = 2117,
        BFD_RELOC_TILEPRO_MMEND_X1 = 2118,
        BFD_RELOC_TILEPRO_SHAMT_X0 = 2119,
        BFD_RELOC_TILEPRO_SHAMT_X1 = 2120,
        BFD_RELOC_TILEPRO_SHAMT_Y0 = 2121,
        BFD_RELOC_TILEPRO_SHAMT_Y1 = 2122,
        BFD_RELOC_TILEPRO_TLS_GD_CALL = 2123,
        BFD_RELOC_TILEPRO_IMM8X0TLS_GD_ADD = 2124,
        BFD_RELOC_TILEPRO_IMM8X1TLS_GD_ADD = 2125,
        BFD_RELOC_TILEPRO_IMM8Y0TLS_GD_ADD = 2126,
        BFD_RELOC_TILEPRO_IMM8Y1TLS_GD_ADD = 2127,
        BFD_RELOC_TILEPRO_TLS_IE_LOAD = 2128,
        BFD_RELOC_TILEPRO_IMM16X0TLS_GD = 2129,
        BFD_RELOC_TILEPRO_IMM16X1TLS_GD = 2130,
        BFD_RELOC_TILEPRO_IMM16X0TLS_GD_LO = 2131,
        BFD_RELOC_TILEPRO_IMM16X1TLS_GD_LO = 2132,
        BFD_RELOC_TILEPRO_IMM16X0TLS_GD_HI = 2133,
        BFD_RELOC_TILEPRO_IMM16X1TLS_GD_HI = 2134,
        BFD_RELOC_TILEPRO_IMM16X0TLS_GD_HA = 2135,
        BFD_RELOC_TILEPRO_IMM16X1TLS_GD_HA = 2136,
        BFD_RELOC_TILEPRO_IMM16X0TLS_IE = 2137,
        BFD_RELOC_TILEPRO_IMM16X1TLS_IE = 2138,
        BFD_RELOC_TILEPRO_IMM16X0TLS_IE_LO = 2139,
        BFD_RELOC_TILEPRO_IMM16X1TLS_IE_LO = 2140,
        BFD_RELOC_TILEPRO_IMM16X0TLS_IE_HI = 2141,
        BFD_RELOC_TILEPRO_IMM16X1TLS_IE_HI = 2142,
        BFD_RELOC_TILEPRO_IMM16X0TLS_IE_HA = 2143,
        BFD_RELOC_TILEPRO_IMM16X1TLS_IE_HA = 2144,
        BFD_RELOC_TILEPRO_TLS_DTPMOD32 = 2145,
        BFD_RELOC_TILEPRO_TLS_DTPOFF32 = 2146,
        BFD_RELOC_TILEPRO_TLS_TPOFF32 = 2147,
        BFD_RELOC_TILEPRO_IMM16X0TLS_LE = 2148,
        BFD_RELOC_TILEPRO_IMM16X1TLS_LE = 2149,
        BFD_RELOC_TILEPRO_IMM16X0TLS_LE_LO = 2150,
        BFD_RELOC_TILEPRO_IMM16X1TLS_LE_LO = 2151,
        BFD_RELOC_TILEPRO_IMM16X0TLS_LE_HI = 2152,
        BFD_RELOC_TILEPRO_IMM16X1TLS_LE_HI = 2153,
        BFD_RELOC_TILEPRO_IMM16X0TLS_LE_HA = 2154,
        BFD_RELOC_TILEPRO_IMM16X1TLS_LE_HA = 2155,
        BFD_RELOC_TILEGX_HW0 = 2156,
        BFD_RELOC_TILEGX_HW1 = 2157,
        BFD_RELOC_TILEGX_HW2 = 2158,
        BFD_RELOC_TILEGX_HW3 = 2159,
        BFD_RELOC_TILEGX_HW0LAST = 2160,
        BFD_RELOC_TILEGX_HW1LAST = 2161,
        BFD_RELOC_TILEGX_HW2LAST = 2162,
        BFD_RELOC_TILEGX_COPY = 2163,
        BFD_RELOC_TILEGX_GLOB_DAT = 2164,
        BFD_RELOC_TILEGX_JMP_SLOT = 2165,
        BFD_RELOC_TILEGX_RELATIVE = 2166,
        BFD_RELOC_TILEGX_BROFF_X1 = 2167,
        BFD_RELOC_TILEGX_JUMPOFF_X1 = 2168,
        BFD_RELOC_TILEGX_JUMPOFF_X1PLT = 2169,
        BFD_RELOC_TILEGX_IMM8X0 = 2170,
        BFD_RELOC_TILEGX_IMM8Y0 = 2171,
        BFD_RELOC_TILEGX_IMM8X1 = 2172,
        BFD_RELOC_TILEGX_IMM8Y1 = 2173,
        BFD_RELOC_TILEGX_DEST_IMM8X1 = 2174,
        BFD_RELOC_TILEGX_MT_IMM14X1 = 2175,
        BFD_RELOC_TILEGX_MF_IMM14X1 = 2176,
        BFD_RELOC_TILEGX_MMSTART_X0 = 2177,
        BFD_RELOC_TILEGX_MMEND_X0 = 2178,
        BFD_RELOC_TILEGX_SHAMT_X0 = 2179,
        BFD_RELOC_TILEGX_SHAMT_X1 = 2180,
        BFD_RELOC_TILEGX_SHAMT_Y0 = 2181,
        BFD_RELOC_TILEGX_SHAMT_Y1 = 2182,
        BFD_RELOC_TILEGX_IMM16X0HW0 = 2183,
        BFD_RELOC_TILEGX_IMM16X1HW0 = 2184,
        BFD_RELOC_TILEGX_IMM16X0HW1 = 2185,
        BFD_RELOC_TILEGX_IMM16X1HW1 = 2186,
        BFD_RELOC_TILEGX_IMM16X0HW2 = 2187,
        BFD_RELOC_TILEGX_IMM16X1HW2 = 2188,
        BFD_RELOC_TILEGX_IMM16X0HW3 = 2189,
        BFD_RELOC_TILEGX_IMM16X1HW3 = 2190,
        BFD_RELOC_TILEGX_IMM16X0HW0LAST = 2191,
        BFD_RELOC_TILEGX_IMM16X1HW0LAST = 2192,
        BFD_RELOC_TILEGX_IMM16X0HW1LAST = 2193,
        BFD_RELOC_TILEGX_IMM16X1HW1LAST = 2194,
        BFD_RELOC_TILEGX_IMM16X0HW2LAST = 2195,
        BFD_RELOC_TILEGX_IMM16X1HW2LAST = 2196,
        BFD_RELOC_TILEGX_IMM16X0HW0PCREL = 2197,
        BFD_RELOC_TILEGX_IMM16X1HW0PCREL = 2198,
        BFD_RELOC_TILEGX_IMM16X0HW1PCREL = 2199,
        BFD_RELOC_TILEGX_IMM16X1HW1PCREL = 2200,
        BFD_RELOC_TILEGX_IMM16X0HW2PCREL = 2201,
        BFD_RELOC_TILEGX_IMM16X1HW2PCREL = 2202,
        BFD_RELOC_TILEGX_IMM16X0HW3PCREL = 2203,
        BFD_RELOC_TILEGX_IMM16X1HW3PCREL = 2204,
        BFD_RELOC_TILEGX_IMM16X0HW0LAST_PCREL = 2205,
        BFD_RELOC_TILEGX_IMM16X1HW0LAST_PCREL = 2206,
        BFD_RELOC_TILEGX_IMM16X0HW1LAST_PCREL = 2207,
        BFD_RELOC_TILEGX_IMM16X1HW1LAST_PCREL = 2208,
        BFD_RELOC_TILEGX_IMM16X0HW2LAST_PCREL = 2209,
        BFD_RELOC_TILEGX_IMM16X1HW2LAST_PCREL = 2210,
        BFD_RELOC_TILEGX_IMM16X0HW0GOT = 2211,
        BFD_RELOC_TILEGX_IMM16X1HW0GOT = 2212,
        BFD_RELOC_TILEGX_IMM16X0HW0PLT_PCREL = 2213,
        BFD_RELOC_TILEGX_IMM16X1HW0PLT_PCREL = 2214,
        BFD_RELOC_TILEGX_IMM16X0HW1PLT_PCREL = 2215,
        BFD_RELOC_TILEGX_IMM16X1HW1PLT_PCREL = 2216,
        BFD_RELOC_TILEGX_IMM16X0HW2PLT_PCREL = 2217,
        BFD_RELOC_TILEGX_IMM16X1HW2PLT_PCREL = 2218,
        BFD_RELOC_TILEGX_IMM16X0HW0LAST_GOT = 2219,
        BFD_RELOC_TILEGX_IMM16X1HW0LAST_GOT = 2220,
        BFD_RELOC_TILEGX_IMM16X0HW1LAST_GOT = 2221,
        BFD_RELOC_TILEGX_IMM16X1HW1LAST_GOT = 2222,
        BFD_RELOC_TILEGX_IMM16X0HW3PLT_PCREL = 2223,
        BFD_RELOC_TILEGX_IMM16X1HW3PLT_PCREL = 2224,
        BFD_RELOC_TILEGX_IMM16X0HW0TLS_GD = 2225,
        BFD_RELOC_TILEGX_IMM16X1HW0TLS_GD = 2226,
        BFD_RELOC_TILEGX_IMM16X0HW0TLS_LE = 2227,
        BFD_RELOC_TILEGX_IMM16X1HW0TLS_LE = 2228,
        BFD_RELOC_TILEGX_IMM16X0HW0LAST_TLS_LE = 2229,
        BFD_RELOC_TILEGX_IMM16X1HW0LAST_TLS_LE = 2230,
        BFD_RELOC_TILEGX_IMM16X0HW1LAST_TLS_LE = 2231,
        BFD_RELOC_TILEGX_IMM16X1HW1LAST_TLS_LE = 2232,
        BFD_RELOC_TILEGX_IMM16X0HW0LAST_TLS_GD = 2233,
        BFD_RELOC_TILEGX_IMM16X1HW0LAST_TLS_GD = 2234,
        BFD_RELOC_TILEGX_IMM16X0HW1LAST_TLS_GD = 2235,
        BFD_RELOC_TILEGX_IMM16X1HW1LAST_TLS_GD = 2236,
        BFD_RELOC_TILEGX_IMM16X0HW0TLS_IE = 2237,
        BFD_RELOC_TILEGX_IMM16X1HW0TLS_IE = 2238,
        BFD_RELOC_TILEGX_IMM16X0HW0LAST_PLT_PCREL = 2239,
        BFD_RELOC_TILEGX_IMM16X1HW0LAST_PLT_PCREL = 2240,
        BFD_RELOC_TILEGX_IMM16X0HW1LAST_PLT_PCREL = 2241,
        BFD_RELOC_TILEGX_IMM16X1HW1LAST_PLT_PCREL = 2242,
        BFD_RELOC_TILEGX_IMM16X0HW2LAST_PLT_PCREL = 2243,
        BFD_RELOC_TILEGX_IMM16X1HW2LAST_PLT_PCREL = 2244,
        BFD_RELOC_TILEGX_IMM16X0HW0LAST_TLS_IE = 2245,
        BFD_RELOC_TILEGX_IMM16X1HW0LAST_TLS_IE = 2246,
        BFD_RELOC_TILEGX_IMM16X0HW1LAST_TLS_IE = 2247,
        BFD_RELOC_TILEGX_IMM16X1HW1LAST_TLS_IE = 2248,
        BFD_RELOC_TILEGX_TLS_DTPMOD64 = 2249,
        BFD_RELOC_TILEGX_TLS_DTPOFF64 = 2250,
        BFD_RELOC_TILEGX_TLS_TPOFF64 = 2251,
        BFD_RELOC_TILEGX_TLS_DTPMOD32 = 2252,
        BFD_RELOC_TILEGX_TLS_DTPOFF32 = 2253,
        BFD_RELOC_TILEGX_TLS_TPOFF32 = 2254,
        BFD_RELOC_TILEGX_TLS_GD_CALL = 2255,
        BFD_RELOC_TILEGX_IMM8X0TLS_GD_ADD = 2256,
        BFD_RELOC_TILEGX_IMM8X1TLS_GD_ADD = 2257,
        BFD_RELOC_TILEGX_IMM8Y0TLS_GD_ADD = 2258,
        BFD_RELOC_TILEGX_IMM8Y1TLS_GD_ADD = 2259,
        BFD_RELOC_TILEGX_TLS_IE_LOAD = 2260,
        BFD_RELOC_TILEGX_IMM8X0TLS_ADD = 2261,
        BFD_RELOC_TILEGX_IMM8X1TLS_ADD = 2262,
        BFD_RELOC_TILEGX_IMM8Y0TLS_ADD = 2263,
        BFD_RELOC_TILEGX_IMM8Y1TLS_ADD = 2264,
        BFD_RELOC_BPF_64 = 2265,
        BFD_RELOC_BPF_32 = 2266,
        BFD_RELOC_BPF_16 = 2267,
        BFD_RELOC_BPF_DISP16 = 2268,
        BFD_RELOC_BPF_DISP32 = 2269,
        BFD_RELOC_EPIPHANY_SIMM8 = 2270,
        BFD_RELOC_EPIPHANY_SIMM24 = 2271,
        BFD_RELOC_EPIPHANY_HIGH = 2272,
        BFD_RELOC_EPIPHANY_LOW = 2273,
        BFD_RELOC_EPIPHANY_SIMM11 = 2274,
        BFD_RELOC_EPIPHANY_IMM11 = 2275,
        BFD_RELOC_EPIPHANY_IMM8 = 2276,
        BFD_RELOC_VISIUM_HI16 = 2277,
        BFD_RELOC_VISIUM_LO16 = 2278,
        BFD_RELOC_VISIUM_IM16 = 2279,
        BFD_RELOC_VISIUM_REL16 = 2280,
        BFD_RELOC_VISIUM_HI16PCREL = 2281,
        BFD_RELOC_VISIUM_LO16PCREL = 2282,
        BFD_RELOC_VISIUM_IM16PCREL = 2283,
        BFD_RELOC_WASM32LEB128 = 2284,
        BFD_RELOC_WASM32LEB128GOT = 2285,
        BFD_RELOC_WASM32LEB128GOT_CODE = 2286,
        BFD_RELOC_WASM32LEB128PLT = 2287,
        BFD_RELOC_WASM32PLT_INDEX = 2288,
        BFD_RELOC_WASM32ABS32CODE = 2289,
        BFD_RELOC_WASM32COPY = 2290,
        BFD_RELOC_WASM32CODE_POINTER = 2291,
        BFD_RELOC_WASM32INDEX = 2292,
        BFD_RELOC_WASM32PLT_SIG = 2293,
        BFD_RELOC_CKCORE_NONE = 2294,
        BFD_RELOC_CKCORE_ADDR32 = 2295,
        BFD_RELOC_CKCORE_PCREL_IMM8BY4 = 2296,
        BFD_RELOC_CKCORE_PCREL_IMM11BY2 = 2297,
        BFD_RELOC_CKCORE_PCREL_IMM4BY2 = 2298,
        BFD_RELOC_CKCORE_PCREL32 = 2299,
        BFD_RELOC_CKCORE_PCREL_JSR_IMM11BY2 = 2300,
        BFD_RELOC_CKCORE_GNU_VTINHERIT = 2301,
        BFD_RELOC_CKCORE_GNU_VTENTRY = 2302,
        BFD_RELOC_CKCORE_RELATIVE = 2303,
        BFD_RELOC_CKCORE_COPY = 2304,
        BFD_RELOC_CKCORE_GLOB_DAT = 2305,
        BFD_RELOC_CKCORE_JUMP_SLOT = 2306,
        BFD_RELOC_CKCORE_GOTOFF = 2307,
        BFD_RELOC_CKCORE_GOTPC = 2308,
        BFD_RELOC_CKCORE_GOT32 = 2309,
        BFD_RELOC_CKCORE_PLT32 = 2310,
        BFD_RELOC_CKCORE_ADDRGOT = 2311,
        BFD_RELOC_CKCORE_ADDRPLT = 2312,
        BFD_RELOC_CKCORE_PCREL_IMM26BY2 = 2313,
        BFD_RELOC_CKCORE_PCREL_IMM16BY2 = 2314,
        BFD_RELOC_CKCORE_PCREL_IMM16BY4 = 2315,
        BFD_RELOC_CKCORE_PCREL_IMM10BY2 = 2316,
        BFD_RELOC_CKCORE_PCREL_IMM10BY4 = 2317,
        BFD_RELOC_CKCORE_ADDR_HI16 = 2318,
        BFD_RELOC_CKCORE_ADDR_LO16 = 2319,
        BFD_RELOC_CKCORE_GOTPC_HI16 = 2320,
        BFD_RELOC_CKCORE_GOTPC_LO16 = 2321,
        BFD_RELOC_CKCORE_GOTOFF_HI16 = 2322,
        BFD_RELOC_CKCORE_GOTOFF_LO16 = 2323,
        BFD_RELOC_CKCORE_GOT12 = 2324,
        BFD_RELOC_CKCORE_GOT_HI16 = 2325,
        BFD_RELOC_CKCORE_GOT_LO16 = 2326,
        BFD_RELOC_CKCORE_PLT12 = 2327,
        BFD_RELOC_CKCORE_PLT_HI16 = 2328,
        BFD_RELOC_CKCORE_PLT_LO16 = 2329,
        BFD_RELOC_CKCORE_ADDRGOT_HI16 = 2330,
        BFD_RELOC_CKCORE_ADDRGOT_LO16 = 2331,
        BFD_RELOC_CKCORE_ADDRPLT_HI16 = 2332,
        BFD_RELOC_CKCORE_ADDRPLT_LO16 = 2333,
        BFD_RELOC_CKCORE_PCREL_JSR_IMM26BY2 = 2334,
        BFD_RELOC_CKCORE_TOFFSET_LO16 = 2335,
        BFD_RELOC_CKCORE_DOFFSET_LO16 = 2336,
        BFD_RELOC_CKCORE_PCREL_IMM18BY2 = 2337,
        BFD_RELOC_CKCORE_DOFFSET_IMM18 = 2338,
        BFD_RELOC_CKCORE_DOFFSET_IMM18BY2 = 2339,
        BFD_RELOC_CKCORE_DOFFSET_IMM18BY4 = 2340,
        BFD_RELOC_CKCORE_GOTOFF_IMM18 = 2341,
        BFD_RELOC_CKCORE_GOT_IMM18BY4 = 2342,
        BFD_RELOC_CKCORE_PLT_IMM18BY4 = 2343,
        BFD_RELOC_CKCORE_PCREL_IMM7BY4 = 2344,
        BFD_RELOC_CKCORE_TLS_LE32 = 2345,
        BFD_RELOC_CKCORE_TLS_IE32 = 2346,
        BFD_RELOC_CKCORE_TLS_GD32 = 2347,
        BFD_RELOC_CKCORE_TLS_LDM32 = 2348,
        BFD_RELOC_CKCORE_TLS_LDO32 = 2349,
        BFD_RELOC_CKCORE_TLS_DTPMOD32 = 2350,
        BFD_RELOC_CKCORE_TLS_DTPOFF32 = 2351,
        BFD_RELOC_CKCORE_TLS_TPOFF32 = 2352,
        BFD_RELOC_CKCORE_PCREL_FLRW_IMM8BY4 = 2353,
        BFD_RELOC_CKCORE_NOJSRI = 2354,
        BFD_RELOC_CKCORE_CALLGRAPH = 2355,
        BFD_RELOC_CKCORE_IRELATIVE = 2356,
        BFD_RELOC_CKCORE_PCREL_BLOOP_IMM4BY4 = 2357,
        BFD_RELOC_CKCORE_PCREL_BLOOP_IMM12BY4 = 2358,
        BFD_RELOC_S12Z_OPR = 2359,
        BFD_RELOC_UNUSED = 2360
    }

    public enum BfdArchitecture
    {
        BfdArchUnknown = 0,
        BfdArchObscure = 1,
        BfdArchM68k = 2,
        BfdArchVax = 3,
        BfdArchOr1k = 4,
        BfdArchSparc = 5,
        BfdArchSpu = 6,
        BfdArchMips = 7,
        BfdArchI386 = 8,
        BfdArchL1om = 9,
        BfdArchK1om = 10,
        BfdArchIamcu = 11,
        BfdArchRomp = 12,
        BfdArchConvex = 13,
        BfdArchM98k = 14,
        BfdArchPyramid = 15,
        BfdArchH8300 = 16,
        BfdArchPdp11 = 17,
        BfdArchPlugin = 18,
        BfdArchPowerpc = 19,
        BfdArchRs6000 = 20,
        BfdArchHppa = 21,
        BfdArchD10v = 22,
        BfdArchD30v = 23,
        BfdArchDlx = 24,
        BfdArchM68hc11 = 25,
        BfdArchM68hc12 = 26,
        BfdArchM9s12x = 27,
        BfdArchM9s12xg = 28,
        BfdArchS12z = 29,
        BfdArchZ8k = 30,
        BfdArchSh = 31,
        BfdArchAlpha = 32,
        BfdArchArm = 33,
        BfdArchNds32 = 34,
        BfdArchNs32k = 35,
        BfdArchTic30 = 36,
        BfdArchTic4x = 37,
        BfdArchTic54x = 38,
        BfdArchTic6x = 39,
        BfdArchV850 = 40,
        BfdArchV850Rh850 = 41,
        BfdArchArc = 42,
        BfdArchM32c = 43,
        BfdArchM32r = 44,
        BfdArchMn10200 = 45,
        BfdArchMn10300 = 46,
        BfdArchFr30 = 47,
        BfdArchFrv = 48,
        BfdArchMoxie = 49,
        BfdArchFt32 = 50,
        BfdArchMcore = 51,
        BfdArchMep = 52,
        BfdArchMetag = 53,
        BfdArchIa64 = 54,
        BfdArchIp2k = 55,
        BfdArchIq2000 = 56,
        BfdArchBpf = 57,
        BfdArchEpiphany = 58,
        BfdArchMt = 59,
        BfdArchPj = 60,
        BfdArchAvr = 61,
        BfdArchBfin = 62,
        BfdArchCr16 = 63,
        BfdArchCrx = 64,
        BfdArchCris = 65,
        BfdArchRiscv = 66,
        BfdArchRl78 = 67,
        BfdArchRx = 68,
        BfdArchS390 = 69,
        BfdArchScore = 70,
        BfdArchMmix = 71,
        BfdArchXstormy16 = 72,
        BfdArchMsp430 = 73,
        BfdArchXc16x = 74,
        BfdArchXgate = 75,
        BfdArchXtensa = 76,
        BfdArchZ80 = 77,
        BfdArchLm32 = 78,
        BfdArchMicroblaze = 79,
        BfdArchTilepro = 80,
        BfdArchTilegx = 81,
        BfdArchAarch64 = 82,
        BfdArchNios2 = 83,
        BfdArchVisium = 84,
        BfdArchWasm32 = 85,
        BfdArchPru = 86,
        BfdArchNfp = 87,
        BfdArchCsky = 88,
        BfdArchLast = 89
    }

    public enum BfdFormat
    {
        BfdUnknown = 0,
        BfdObject = 1,
        BfdArchive = 2,
        BfdCore = 3,
        BfdTypeEnd = 4
    }

    public enum BfdDirection
    {
        NoDirection = 0,
        ReadDirection = 1,
        WriteDirection = 2,
        BothDirection = 3
    }

    public enum BfdPluginFormat
    {
        BfdPluginUnknown = 0,
        BfdPluginYes = 1,
        BfdPluginNo = 2
    }

    public enum CompressedDebugSectionType
    {
        COMPRESS_DEBUG_NONE = 0,
        COMPRESS_DEBUG = 1,
        COMPRESS_DEBUG_GNU_ZLIB = 3,
        COMPRESS_DEBUG_GABI_ZLIB = 5
    }

    public enum BfdError
    {
        BfdErrorNoError = 0,
        BfdErrorSystemCall = 1,
        BfdErrorInvalidTarget = 2,
        BfdErrorWrongFormat = 3,
        BfdErrorWrongObjectFormat = 4,
        BfdErrorInvalidOperation = 5,
        BfdErrorNoMemory = 6,
        BfdErrorNoSymbols = 7,
        BfdErrorNoArmap = 8,
        BfdErrorNoMoreArchivedFiles = 9,
        BfdErrorMalformedArchive = 10,
        BfdErrorMissingDso = 11,
        BfdErrorFileNotRecognized = 12,
        BfdErrorFileAmbiguouslyRecognized = 13,
        BfdErrorNoContents = 14,
        BfdErrorNonrepresentableSection = 15,
        BfdErrorNoDebugSection = 16,
        BfdErrorBadValue = 17,
        BfdErrorFileTruncated = 18,
        BfdErrorFileTooBig = 19,
        BfdErrorSorry = 20,
        BfdErrorOnInput = 21,
        BfdErrorInvalidErrorCode = 22
    }

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void BfdAssertHandlerType([MarshalAs(UnmanagedType.LPUTF8Str)] string bfd_formatmsg, [MarshalAs(UnmanagedType.LPUTF8Str)] string bfd_version, [MarshalAs(UnmanagedType.LPUTF8Str)] string bfd_file, int bfd_line);

    public unsafe partial class BfdLinkOrder
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.BfdLinkOrder> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.BfdLinkOrder>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::libopcodes.BfdLinkOrder __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::libopcodes.BfdLinkOrder(native.ToPointer(), skipVTables);
        }

        internal static global::libopcodes.BfdLinkOrder __CreateInstance(global::libopcodes.BfdLinkOrder.__Internal native, bool skipVTables = false)
        {
            return new global::libopcodes.BfdLinkOrder(native, skipVTables);
        }

        private static void* __CopyValue(global::libopcodes.BfdLinkOrder.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::libopcodes.BfdLinkOrder.__Internal));
            *(global::libopcodes.BfdLinkOrder.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private BfdLinkOrder(global::libopcodes.BfdLinkOrder.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected BfdLinkOrder(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class BfdWindowInternal
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.BfdWindowInternal> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.BfdWindowInternal>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::libopcodes.BfdWindowInternal __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::libopcodes.BfdWindowInternal(native.ToPointer(), skipVTables);
        }

        internal static global::libopcodes.BfdWindowInternal __CreateInstance(global::libopcodes.BfdWindowInternal.__Internal native, bool skipVTables = false)
        {
            return new global::libopcodes.BfdWindowInternal(native, skipVTables);
        }

        private static void* __CopyValue(global::libopcodes.BfdWindowInternal.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::libopcodes.BfdWindowInternal.__Internal));
            *(global::libopcodes.BfdWindowInternal.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private BfdWindowInternal(global::libopcodes.BfdWindowInternal.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected BfdWindowInternal(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class BfdLinkInfo
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.BfdLinkInfo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.BfdLinkInfo>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::libopcodes.BfdLinkInfo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::libopcodes.BfdLinkInfo(native.ToPointer(), skipVTables);
        }

        internal static global::libopcodes.BfdLinkInfo __CreateInstance(global::libopcodes.BfdLinkInfo.__Internal native, bool skipVTables = false)
        {
            return new global::libopcodes.BfdLinkInfo(native, skipVTables);
        }

        private static void* __CopyValue(global::libopcodes.BfdLinkInfo.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::libopcodes.BfdLinkInfo.__Internal));
            *(global::libopcodes.BfdLinkInfo.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private BfdLinkInfo(global::libopcodes.BfdLinkInfo.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected BfdLinkInfo(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class BfdLinkHashTable
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.BfdLinkHashTable> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.BfdLinkHashTable>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::libopcodes.BfdLinkHashTable __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::libopcodes.BfdLinkHashTable(native.ToPointer(), skipVTables);
        }

        internal static global::libopcodes.BfdLinkHashTable __CreateInstance(global::libopcodes.BfdLinkHashTable.__Internal native, bool skipVTables = false)
        {
            return new global::libopcodes.BfdLinkHashTable(native, skipVTables);
        }

        private static void* __CopyValue(global::libopcodes.BfdLinkHashTable.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::libopcodes.BfdLinkHashTable.__Internal));
            *(global::libopcodes.BfdLinkHashTable.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private BfdLinkHashTable(global::libopcodes.BfdLinkHashTable.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected BfdLinkHashTable(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class BfdLinkHashEntry
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.BfdLinkHashEntry> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.BfdLinkHashEntry>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::libopcodes.BfdLinkHashEntry __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::libopcodes.BfdLinkHashEntry(native.ToPointer(), skipVTables);
        }

        internal static global::libopcodes.BfdLinkHashEntry __CreateInstance(global::libopcodes.BfdLinkHashEntry.__Internal native, bool skipVTables = false)
        {
            return new global::libopcodes.BfdLinkHashEntry(native, skipVTables);
        }

        private static void* __CopyValue(global::libopcodes.BfdLinkHashEntry.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::libopcodes.BfdLinkHashEntry.__Internal));
            *(global::libopcodes.BfdLinkHashEntry.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private BfdLinkHashEntry(global::libopcodes.BfdLinkHashEntry.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected BfdLinkHashEntry(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class FlagInfo
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.FlagInfo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.FlagInfo>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::libopcodes.FlagInfo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::libopcodes.FlagInfo(native.ToPointer(), skipVTables);
        }

        internal static global::libopcodes.FlagInfo __CreateInstance(global::libopcodes.FlagInfo.__Internal native, bool skipVTables = false)
        {
            return new global::libopcodes.FlagInfo(native, skipVTables);
        }

        private static void* __CopyValue(global::libopcodes.FlagInfo.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::libopcodes.FlagInfo.__Internal));
            *(global::libopcodes.FlagInfo.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private FlagInfo(global::libopcodes.FlagInfo.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected FlagInfo(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class BfdIovec
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.BfdIovec> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.BfdIovec>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::libopcodes.BfdIovec __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::libopcodes.BfdIovec(native.ToPointer(), skipVTables);
        }

        internal static global::libopcodes.BfdIovec __CreateInstance(global::libopcodes.BfdIovec.__Internal native, bool skipVTables = false)
        {
            return new global::libopcodes.BfdIovec(native, skipVTables);
        }

        private static void* __CopyValue(global::libopcodes.BfdIovec.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::libopcodes.BfdIovec.__Internal));
            *(global::libopcodes.BfdIovec.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private BfdIovec(global::libopcodes.BfdIovec.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected BfdIovec(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class AoutDataStruct
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.AoutDataStruct> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.AoutDataStruct>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::libopcodes.AoutDataStruct __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::libopcodes.AoutDataStruct(native.ToPointer(), skipVTables);
        }

        internal static global::libopcodes.AoutDataStruct __CreateInstance(global::libopcodes.AoutDataStruct.__Internal native, bool skipVTables = false)
        {
            return new global::libopcodes.AoutDataStruct(native, skipVTables);
        }

        private static void* __CopyValue(global::libopcodes.AoutDataStruct.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::libopcodes.AoutDataStruct.__Internal));
            *(global::libopcodes.AoutDataStruct.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private AoutDataStruct(global::libopcodes.AoutDataStruct.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected AoutDataStruct(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class Artdata
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.Artdata> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.Artdata>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::libopcodes.Artdata __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::libopcodes.Artdata(native.ToPointer(), skipVTables);
        }

        internal static global::libopcodes.Artdata __CreateInstance(global::libopcodes.Artdata.__Internal native, bool skipVTables = false)
        {
            return new global::libopcodes.Artdata(native, skipVTables);
        }

        private static void* __CopyValue(global::libopcodes.Artdata.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::libopcodes.Artdata.__Internal));
            *(global::libopcodes.Artdata.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private Artdata(global::libopcodes.Artdata.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected Artdata(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class CoffTdata
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.CoffTdata> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.CoffTdata>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::libopcodes.CoffTdata __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::libopcodes.CoffTdata(native.ToPointer(), skipVTables);
        }

        internal static global::libopcodes.CoffTdata __CreateInstance(global::libopcodes.CoffTdata.__Internal native, bool skipVTables = false)
        {
            return new global::libopcodes.CoffTdata(native, skipVTables);
        }

        private static void* __CopyValue(global::libopcodes.CoffTdata.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::libopcodes.CoffTdata.__Internal));
            *(global::libopcodes.CoffTdata.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CoffTdata(global::libopcodes.CoffTdata.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CoffTdata(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class PeTdata
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.PeTdata> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.PeTdata>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::libopcodes.PeTdata __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::libopcodes.PeTdata(native.ToPointer(), skipVTables);
        }

        internal static global::libopcodes.PeTdata __CreateInstance(global::libopcodes.PeTdata.__Internal native, bool skipVTables = false)
        {
            return new global::libopcodes.PeTdata(native, skipVTables);
        }

        private static void* __CopyValue(global::libopcodes.PeTdata.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::libopcodes.PeTdata.__Internal));
            *(global::libopcodes.PeTdata.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private PeTdata(global::libopcodes.PeTdata.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected PeTdata(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class XcoffTdata
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.XcoffTdata> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.XcoffTdata>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::libopcodes.XcoffTdata __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::libopcodes.XcoffTdata(native.ToPointer(), skipVTables);
        }

        internal static global::libopcodes.XcoffTdata __CreateInstance(global::libopcodes.XcoffTdata.__Internal native, bool skipVTables = false)
        {
            return new global::libopcodes.XcoffTdata(native, skipVTables);
        }

        private static void* __CopyValue(global::libopcodes.XcoffTdata.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::libopcodes.XcoffTdata.__Internal));
            *(global::libopcodes.XcoffTdata.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private XcoffTdata(global::libopcodes.XcoffTdata.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected XcoffTdata(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class EcoffTdata
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.EcoffTdata> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.EcoffTdata>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::libopcodes.EcoffTdata __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::libopcodes.EcoffTdata(native.ToPointer(), skipVTables);
        }

        internal static global::libopcodes.EcoffTdata __CreateInstance(global::libopcodes.EcoffTdata.__Internal native, bool skipVTables = false)
        {
            return new global::libopcodes.EcoffTdata(native, skipVTables);
        }

        private static void* __CopyValue(global::libopcodes.EcoffTdata.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::libopcodes.EcoffTdata.__Internal));
            *(global::libopcodes.EcoffTdata.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private EcoffTdata(global::libopcodes.EcoffTdata.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected EcoffTdata(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class SrecDataStruct
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.SrecDataStruct> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.SrecDataStruct>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::libopcodes.SrecDataStruct __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::libopcodes.SrecDataStruct(native.ToPointer(), skipVTables);
        }

        internal static global::libopcodes.SrecDataStruct __CreateInstance(global::libopcodes.SrecDataStruct.__Internal native, bool skipVTables = false)
        {
            return new global::libopcodes.SrecDataStruct(native, skipVTables);
        }

        private static void* __CopyValue(global::libopcodes.SrecDataStruct.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::libopcodes.SrecDataStruct.__Internal));
            *(global::libopcodes.SrecDataStruct.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private SrecDataStruct(global::libopcodes.SrecDataStruct.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected SrecDataStruct(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class VerilogDataStruct
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.VerilogDataStruct> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.VerilogDataStruct>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::libopcodes.VerilogDataStruct __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::libopcodes.VerilogDataStruct(native.ToPointer(), skipVTables);
        }

        internal static global::libopcodes.VerilogDataStruct __CreateInstance(global::libopcodes.VerilogDataStruct.__Internal native, bool skipVTables = false)
        {
            return new global::libopcodes.VerilogDataStruct(native, skipVTables);
        }

        private static void* __CopyValue(global::libopcodes.VerilogDataStruct.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::libopcodes.VerilogDataStruct.__Internal));
            *(global::libopcodes.VerilogDataStruct.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private VerilogDataStruct(global::libopcodes.VerilogDataStruct.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected VerilogDataStruct(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class IhexDataStruct
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.IhexDataStruct> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.IhexDataStruct>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::libopcodes.IhexDataStruct __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::libopcodes.IhexDataStruct(native.ToPointer(), skipVTables);
        }

        internal static global::libopcodes.IhexDataStruct __CreateInstance(global::libopcodes.IhexDataStruct.__Internal native, bool skipVTables = false)
        {
            return new global::libopcodes.IhexDataStruct(native, skipVTables);
        }

        private static void* __CopyValue(global::libopcodes.IhexDataStruct.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::libopcodes.IhexDataStruct.__Internal));
            *(global::libopcodes.IhexDataStruct.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private IhexDataStruct(global::libopcodes.IhexDataStruct.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected IhexDataStruct(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class TekhexDataStruct
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.TekhexDataStruct> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.TekhexDataStruct>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::libopcodes.TekhexDataStruct __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::libopcodes.TekhexDataStruct(native.ToPointer(), skipVTables);
        }

        internal static global::libopcodes.TekhexDataStruct __CreateInstance(global::libopcodes.TekhexDataStruct.__Internal native, bool skipVTables = false)
        {
            return new global::libopcodes.TekhexDataStruct(native, skipVTables);
        }

        private static void* __CopyValue(global::libopcodes.TekhexDataStruct.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::libopcodes.TekhexDataStruct.__Internal));
            *(global::libopcodes.TekhexDataStruct.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private TekhexDataStruct(global::libopcodes.TekhexDataStruct.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected TekhexDataStruct(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class ElfObjTdata
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.ElfObjTdata> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.ElfObjTdata>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::libopcodes.ElfObjTdata __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::libopcodes.ElfObjTdata(native.ToPointer(), skipVTables);
        }

        internal static global::libopcodes.ElfObjTdata __CreateInstance(global::libopcodes.ElfObjTdata.__Internal native, bool skipVTables = false)
        {
            return new global::libopcodes.ElfObjTdata(native, skipVTables);
        }

        private static void* __CopyValue(global::libopcodes.ElfObjTdata.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::libopcodes.ElfObjTdata.__Internal));
            *(global::libopcodes.ElfObjTdata.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ElfObjTdata(global::libopcodes.ElfObjTdata.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ElfObjTdata(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class MmoDataStruct
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.MmoDataStruct> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.MmoDataStruct>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::libopcodes.MmoDataStruct __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::libopcodes.MmoDataStruct(native.ToPointer(), skipVTables);
        }

        internal static global::libopcodes.MmoDataStruct __CreateInstance(global::libopcodes.MmoDataStruct.__Internal native, bool skipVTables = false)
        {
            return new global::libopcodes.MmoDataStruct(native, skipVTables);
        }

        private static void* __CopyValue(global::libopcodes.MmoDataStruct.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::libopcodes.MmoDataStruct.__Internal));
            *(global::libopcodes.MmoDataStruct.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private MmoDataStruct(global::libopcodes.MmoDataStruct.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected MmoDataStruct(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class SunCoreStruct
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.SunCoreStruct> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.SunCoreStruct>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::libopcodes.SunCoreStruct __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::libopcodes.SunCoreStruct(native.ToPointer(), skipVTables);
        }

        internal static global::libopcodes.SunCoreStruct __CreateInstance(global::libopcodes.SunCoreStruct.__Internal native, bool skipVTables = false)
        {
            return new global::libopcodes.SunCoreStruct(native, skipVTables);
        }

        private static void* __CopyValue(global::libopcodes.SunCoreStruct.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::libopcodes.SunCoreStruct.__Internal));
            *(global::libopcodes.SunCoreStruct.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private SunCoreStruct(global::libopcodes.SunCoreStruct.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected SunCoreStruct(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class Sco5CoreStruct
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.Sco5CoreStruct> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.Sco5CoreStruct>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::libopcodes.Sco5CoreStruct __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::libopcodes.Sco5CoreStruct(native.ToPointer(), skipVTables);
        }

        internal static global::libopcodes.Sco5CoreStruct __CreateInstance(global::libopcodes.Sco5CoreStruct.__Internal native, bool skipVTables = false)
        {
            return new global::libopcodes.Sco5CoreStruct(native, skipVTables);
        }

        private static void* __CopyValue(global::libopcodes.Sco5CoreStruct.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::libopcodes.Sco5CoreStruct.__Internal));
            *(global::libopcodes.Sco5CoreStruct.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private Sco5CoreStruct(global::libopcodes.Sco5CoreStruct.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected Sco5CoreStruct(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class TradCoreStruct
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.TradCoreStruct> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.TradCoreStruct>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::libopcodes.TradCoreStruct __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::libopcodes.TradCoreStruct(native.ToPointer(), skipVTables);
        }

        internal static global::libopcodes.TradCoreStruct __CreateInstance(global::libopcodes.TradCoreStruct.__Internal native, bool skipVTables = false)
        {
            return new global::libopcodes.TradCoreStruct(native, skipVTables);
        }

        private static void* __CopyValue(global::libopcodes.TradCoreStruct.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::libopcodes.TradCoreStruct.__Internal));
            *(global::libopcodes.TradCoreStruct.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private TradCoreStruct(global::libopcodes.TradCoreStruct.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected TradCoreStruct(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class SomDataStruct
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.SomDataStruct> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.SomDataStruct>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::libopcodes.SomDataStruct __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::libopcodes.SomDataStruct(native.ToPointer(), skipVTables);
        }

        internal static global::libopcodes.SomDataStruct __CreateInstance(global::libopcodes.SomDataStruct.__Internal native, bool skipVTables = false)
        {
            return new global::libopcodes.SomDataStruct(native, skipVTables);
        }

        private static void* __CopyValue(global::libopcodes.SomDataStruct.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::libopcodes.SomDataStruct.__Internal));
            *(global::libopcodes.SomDataStruct.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private SomDataStruct(global::libopcodes.SomDataStruct.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected SomDataStruct(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class HpuxCoreStruct
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.HpuxCoreStruct> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.HpuxCoreStruct>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::libopcodes.HpuxCoreStruct __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::libopcodes.HpuxCoreStruct(native.ToPointer(), skipVTables);
        }

        internal static global::libopcodes.HpuxCoreStruct __CreateInstance(global::libopcodes.HpuxCoreStruct.__Internal native, bool skipVTables = false)
        {
            return new global::libopcodes.HpuxCoreStruct(native, skipVTables);
        }

        private static void* __CopyValue(global::libopcodes.HpuxCoreStruct.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::libopcodes.HpuxCoreStruct.__Internal));
            *(global::libopcodes.HpuxCoreStruct.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private HpuxCoreStruct(global::libopcodes.HpuxCoreStruct.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected HpuxCoreStruct(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class HppabsdCoreStruct
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.HppabsdCoreStruct> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.HppabsdCoreStruct>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::libopcodes.HppabsdCoreStruct __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::libopcodes.HppabsdCoreStruct(native.ToPointer(), skipVTables);
        }

        internal static global::libopcodes.HppabsdCoreStruct __CreateInstance(global::libopcodes.HppabsdCoreStruct.__Internal native, bool skipVTables = false)
        {
            return new global::libopcodes.HppabsdCoreStruct(native, skipVTables);
        }

        private static void* __CopyValue(global::libopcodes.HppabsdCoreStruct.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::libopcodes.HppabsdCoreStruct.__Internal));
            *(global::libopcodes.HppabsdCoreStruct.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private HppabsdCoreStruct(global::libopcodes.HppabsdCoreStruct.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected HppabsdCoreStruct(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class SgiCoreStruct
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.SgiCoreStruct> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.SgiCoreStruct>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::libopcodes.SgiCoreStruct __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::libopcodes.SgiCoreStruct(native.ToPointer(), skipVTables);
        }

        internal static global::libopcodes.SgiCoreStruct __CreateInstance(global::libopcodes.SgiCoreStruct.__Internal native, bool skipVTables = false)
        {
            return new global::libopcodes.SgiCoreStruct(native, skipVTables);
        }

        private static void* __CopyValue(global::libopcodes.SgiCoreStruct.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::libopcodes.SgiCoreStruct.__Internal));
            *(global::libopcodes.SgiCoreStruct.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private SgiCoreStruct(global::libopcodes.SgiCoreStruct.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected SgiCoreStruct(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class LynxCoreStruct
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.LynxCoreStruct> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.LynxCoreStruct>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::libopcodes.LynxCoreStruct __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::libopcodes.LynxCoreStruct(native.ToPointer(), skipVTables);
        }

        internal static global::libopcodes.LynxCoreStruct __CreateInstance(global::libopcodes.LynxCoreStruct.__Internal native, bool skipVTables = false)
        {
            return new global::libopcodes.LynxCoreStruct(native, skipVTables);
        }

        private static void* __CopyValue(global::libopcodes.LynxCoreStruct.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::libopcodes.LynxCoreStruct.__Internal));
            *(global::libopcodes.LynxCoreStruct.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private LynxCoreStruct(global::libopcodes.LynxCoreStruct.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected LynxCoreStruct(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class OsfCoreStruct
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.OsfCoreStruct> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.OsfCoreStruct>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::libopcodes.OsfCoreStruct __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::libopcodes.OsfCoreStruct(native.ToPointer(), skipVTables);
        }

        internal static global::libopcodes.OsfCoreStruct __CreateInstance(global::libopcodes.OsfCoreStruct.__Internal native, bool skipVTables = false)
        {
            return new global::libopcodes.OsfCoreStruct(native, skipVTables);
        }

        private static void* __CopyValue(global::libopcodes.OsfCoreStruct.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::libopcodes.OsfCoreStruct.__Internal));
            *(global::libopcodes.OsfCoreStruct.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private OsfCoreStruct(global::libopcodes.OsfCoreStruct.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected OsfCoreStruct(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class CiscoCoreStruct
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.CiscoCoreStruct> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.CiscoCoreStruct>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::libopcodes.CiscoCoreStruct __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::libopcodes.CiscoCoreStruct(native.ToPointer(), skipVTables);
        }

        internal static global::libopcodes.CiscoCoreStruct __CreateInstance(global::libopcodes.CiscoCoreStruct.__Internal native, bool skipVTables = false)
        {
            return new global::libopcodes.CiscoCoreStruct(native, skipVTables);
        }

        private static void* __CopyValue(global::libopcodes.CiscoCoreStruct.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::libopcodes.CiscoCoreStruct.__Internal));
            *(global::libopcodes.CiscoCoreStruct.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CiscoCoreStruct(global::libopcodes.CiscoCoreStruct.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CiscoCoreStruct(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class VersadosDataStruct
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.VersadosDataStruct> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.VersadosDataStruct>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::libopcodes.VersadosDataStruct __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::libopcodes.VersadosDataStruct(native.ToPointer(), skipVTables);
        }

        internal static global::libopcodes.VersadosDataStruct __CreateInstance(global::libopcodes.VersadosDataStruct.__Internal native, bool skipVTables = false)
        {
            return new global::libopcodes.VersadosDataStruct(native, skipVTables);
        }

        private static void* __CopyValue(global::libopcodes.VersadosDataStruct.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::libopcodes.VersadosDataStruct.__Internal));
            *(global::libopcodes.VersadosDataStruct.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private VersadosDataStruct(global::libopcodes.VersadosDataStruct.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected VersadosDataStruct(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class NetbsdCoreStruct
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.NetbsdCoreStruct> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.NetbsdCoreStruct>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::libopcodes.NetbsdCoreStruct __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::libopcodes.NetbsdCoreStruct(native.ToPointer(), skipVTables);
        }

        internal static global::libopcodes.NetbsdCoreStruct __CreateInstance(global::libopcodes.NetbsdCoreStruct.__Internal native, bool skipVTables = false)
        {
            return new global::libopcodes.NetbsdCoreStruct(native, skipVTables);
        }

        private static void* __CopyValue(global::libopcodes.NetbsdCoreStruct.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::libopcodes.NetbsdCoreStruct.__Internal));
            *(global::libopcodes.NetbsdCoreStruct.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private NetbsdCoreStruct(global::libopcodes.NetbsdCoreStruct.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected NetbsdCoreStruct(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class MachODataStruct
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.MachODataStruct> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.MachODataStruct>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::libopcodes.MachODataStruct __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::libopcodes.MachODataStruct(native.ToPointer(), skipVTables);
        }

        internal static global::libopcodes.MachODataStruct __CreateInstance(global::libopcodes.MachODataStruct.__Internal native, bool skipVTables = false)
        {
            return new global::libopcodes.MachODataStruct(native, skipVTables);
        }

        private static void* __CopyValue(global::libopcodes.MachODataStruct.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::libopcodes.MachODataStruct.__Internal));
            *(global::libopcodes.MachODataStruct.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private MachODataStruct(global::libopcodes.MachODataStruct.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected MachODataStruct(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class MachOFatDataStruct
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.MachOFatDataStruct> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.MachOFatDataStruct>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::libopcodes.MachOFatDataStruct __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::libopcodes.MachOFatDataStruct(native.ToPointer(), skipVTables);
        }

        internal static global::libopcodes.MachOFatDataStruct __CreateInstance(global::libopcodes.MachOFatDataStruct.__Internal native, bool skipVTables = false)
        {
            return new global::libopcodes.MachOFatDataStruct(native, skipVTables);
        }

        private static void* __CopyValue(global::libopcodes.MachOFatDataStruct.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::libopcodes.MachOFatDataStruct.__Internal));
            *(global::libopcodes.MachOFatDataStruct.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private MachOFatDataStruct(global::libopcodes.MachOFatDataStruct.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected MachOFatDataStruct(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class PluginDataStruct
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.PluginDataStruct> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.PluginDataStruct>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::libopcodes.PluginDataStruct __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::libopcodes.PluginDataStruct(native.ToPointer(), skipVTables);
        }

        internal static global::libopcodes.PluginDataStruct __CreateInstance(global::libopcodes.PluginDataStruct.__Internal native, bool skipVTables = false)
        {
            return new global::libopcodes.PluginDataStruct(native, skipVTables);
        }

        private static void* __CopyValue(global::libopcodes.PluginDataStruct.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::libopcodes.PluginDataStruct.__Internal));
            *(global::libopcodes.PluginDataStruct.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private PluginDataStruct(global::libopcodes.PluginDataStruct.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected PluginDataStruct(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class BfdPefDataStruct
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.BfdPefDataStruct> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.BfdPefDataStruct>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::libopcodes.BfdPefDataStruct __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::libopcodes.BfdPefDataStruct(native.ToPointer(), skipVTables);
        }

        internal static global::libopcodes.BfdPefDataStruct __CreateInstance(global::libopcodes.BfdPefDataStruct.__Internal native, bool skipVTables = false)
        {
            return new global::libopcodes.BfdPefDataStruct(native, skipVTables);
        }

        private static void* __CopyValue(global::libopcodes.BfdPefDataStruct.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::libopcodes.BfdPefDataStruct.__Internal));
            *(global::libopcodes.BfdPefDataStruct.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private BfdPefDataStruct(global::libopcodes.BfdPefDataStruct.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected BfdPefDataStruct(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class BfdPefXlibDataStruct
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.BfdPefXlibDataStruct> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.BfdPefXlibDataStruct>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::libopcodes.BfdPefXlibDataStruct __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::libopcodes.BfdPefXlibDataStruct(native.ToPointer(), skipVTables);
        }

        internal static global::libopcodes.BfdPefXlibDataStruct __CreateInstance(global::libopcodes.BfdPefXlibDataStruct.__Internal native, bool skipVTables = false)
        {
            return new global::libopcodes.BfdPefXlibDataStruct(native, skipVTables);
        }

        private static void* __CopyValue(global::libopcodes.BfdPefXlibDataStruct.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::libopcodes.BfdPefXlibDataStruct.__Internal));
            *(global::libopcodes.BfdPefXlibDataStruct.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private BfdPefXlibDataStruct(global::libopcodes.BfdPefXlibDataStruct.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected BfdPefXlibDataStruct(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class BfdSymDataStruct
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.BfdSymDataStruct> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.BfdSymDataStruct>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::libopcodes.BfdSymDataStruct __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::libopcodes.BfdSymDataStruct(native.ToPointer(), skipVTables);
        }

        internal static global::libopcodes.BfdSymDataStruct __CreateInstance(global::libopcodes.BfdSymDataStruct.__Internal native, bool skipVTables = false)
        {
            return new global::libopcodes.BfdSymDataStruct(native, skipVTables);
        }

        private static void* __CopyValue(global::libopcodes.BfdSymDataStruct.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::libopcodes.BfdSymDataStruct.__Internal));
            *(global::libopcodes.BfdSymDataStruct.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private BfdSymDataStruct(global::libopcodes.BfdSymDataStruct.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected BfdSymDataStruct(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class BfdStrtabHash
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.BfdStrtabHash> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.BfdStrtabHash>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::libopcodes.BfdStrtabHash __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::libopcodes.BfdStrtabHash(native.ToPointer(), skipVTables);
        }

        internal static global::libopcodes.BfdStrtabHash __CreateInstance(global::libopcodes.BfdStrtabHash.__Internal native, bool skipVTables = false)
        {
            return new global::libopcodes.BfdStrtabHash(native, skipVTables);
        }

        private static void* __CopyValue(global::libopcodes.BfdStrtabHash.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::libopcodes.BfdStrtabHash.__Internal));
            *(global::libopcodes.BfdStrtabHash.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private BfdStrtabHash(global::libopcodes.BfdStrtabHash.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected BfdStrtabHash(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class EcoffDebugInfo
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.EcoffDebugInfo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.EcoffDebugInfo>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::libopcodes.EcoffDebugInfo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::libopcodes.EcoffDebugInfo(native.ToPointer(), skipVTables);
        }

        internal static global::libopcodes.EcoffDebugInfo __CreateInstance(global::libopcodes.EcoffDebugInfo.__Internal native, bool skipVTables = false)
        {
            return new global::libopcodes.EcoffDebugInfo(native, skipVTables);
        }

        private static void* __CopyValue(global::libopcodes.EcoffDebugInfo.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::libopcodes.EcoffDebugInfo.__Internal));
            *(global::libopcodes.EcoffDebugInfo.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private EcoffDebugInfo(global::libopcodes.EcoffDebugInfo.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected EcoffDebugInfo(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class EcoffDebugSwap
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.EcoffDebugSwap> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.EcoffDebugSwap>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::libopcodes.EcoffDebugSwap __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::libopcodes.EcoffDebugSwap(native.ToPointer(), skipVTables);
        }

        internal static global::libopcodes.EcoffDebugSwap __CreateInstance(global::libopcodes.EcoffDebugSwap.__Internal native, bool skipVTables = false)
        {
            return new global::libopcodes.EcoffDebugSwap(native, skipVTables);
        }

        private static void* __CopyValue(global::libopcodes.EcoffDebugSwap.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::libopcodes.EcoffDebugSwap.__Internal));
            *(global::libopcodes.EcoffDebugSwap.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private EcoffDebugSwap(global::libopcodes.EcoffDebugSwap.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected EcoffDebugSwap(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class EcoffExtr
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.EcoffExtr> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.EcoffExtr>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::libopcodes.EcoffExtr __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::libopcodes.EcoffExtr(native.ToPointer(), skipVTables);
        }

        internal static global::libopcodes.EcoffExtr __CreateInstance(global::libopcodes.EcoffExtr.__Internal native, bool skipVTables = false)
        {
            return new global::libopcodes.EcoffExtr(native, skipVTables);
        }

        private static void* __CopyValue(global::libopcodes.EcoffExtr.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::libopcodes.EcoffExtr.__Internal));
            *(global::libopcodes.EcoffExtr.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private EcoffExtr(global::libopcodes.EcoffExtr.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected EcoffExtr(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class BfdElfVersionTree
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.BfdElfVersionTree> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.BfdElfVersionTree>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::libopcodes.BfdElfVersionTree __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::libopcodes.BfdElfVersionTree(native.ToPointer(), skipVTables);
        }

        internal static global::libopcodes.BfdElfVersionTree __CreateInstance(global::libopcodes.BfdElfVersionTree.__Internal native, bool skipVTables = false)
        {
            return new global::libopcodes.BfdElfVersionTree(native, skipVTables);
        }

        private static void* __CopyValue(global::libopcodes.BfdElfVersionTree.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::libopcodes.BfdElfVersionTree.__Internal));
            *(global::libopcodes.BfdElfVersionTree.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private BfdElfVersionTree(global::libopcodes.BfdElfVersionTree.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected BfdElfVersionTree(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class Carsym : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr name;

            [FieldOffset(8)]
            internal long file_offset;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0carsym@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.Carsym> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.Carsym>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::libopcodes.Carsym __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::libopcodes.Carsym(native.ToPointer(), skipVTables);
        }

        internal static global::libopcodes.Carsym __CreateInstance(global::libopcodes.Carsym.__Internal native, bool skipVTables = false)
        {
            return new global::libopcodes.Carsym(native, skipVTables);
        }

        private static void* __CopyValue(global::libopcodes.Carsym.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::libopcodes.Carsym.__Internal));
            *(global::libopcodes.Carsym.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private Carsym(global::libopcodes.Carsym.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected Carsym(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public Carsym()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::libopcodes.Carsym.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public Carsym(global::libopcodes.Carsym _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::libopcodes.Carsym.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::libopcodes.Carsym.__Internal*) __Instance) = *((global::libopcodes.Carsym.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::libopcodes.Carsym __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public string Name
        {
            get
            {
                if (((global::libopcodes.Carsym.__Internal*) __Instance)->name == global::System.IntPtr.Zero)
                    return default(string);
                var __retPtr = (byte*) ((global::libopcodes.Carsym.__Internal*) __Instance)->name;
                int __length = 0;
                while (*(__retPtr++) != 0) __length += sizeof(byte);
                return global::System.Text.Encoding.UTF8.GetString((byte*) ((global::libopcodes.Carsym.__Internal*) __Instance)->name, __length);
            }

            set
            {
                byte[] __bytes0 = global::System.Text.Encoding.UTF8.GetBytes(value);
                fixed (byte* __bytePtr0 = __bytes0)
                {
                    ((global::libopcodes.Carsym.__Internal*)__Instance)->name = (global::System.IntPtr) new global::System.IntPtr(__bytePtr0);
                }
            }
        }

        public long FileOffset
        {
            get
            {
                return ((global::libopcodes.Carsym.__Internal*) __Instance)->file_offset;
            }

            set
            {
                ((global::libopcodes.Carsym.__Internal*)__Instance)->file_offset = value;
            }
        }
    }

    public unsafe partial class Orl : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr name;

            [FieldOffset(8)]
            internal global::libopcodes.Orl.U.__Internal u;

            [FieldOffset(16)]
            internal int namidx;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0orl@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public unsafe partial struct U
        {
            [StructLayout(LayoutKind.Explicit, Size = 8)]
            public partial struct __Internal
            {
                [FieldOffset(0)]
                internal long pos;

                [FieldOffset(0)]
                internal global::System.IntPtr abfd;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="??0<unnamed-type-u>@orl@@QEAA@AEBT01@@Z")]
                internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
            }

            private U.__Internal __instance;
            internal U.__Internal __Instance { get { return __instance; } }

            internal static global::libopcodes.Orl.U __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new global::libopcodes.Orl.U(native.ToPointer(), skipVTables);
            }

            internal static global::libopcodes.Orl.U __CreateInstance(global::libopcodes.Orl.U.__Internal native, bool skipVTables = false)
            {
                return new global::libopcodes.Orl.U(native, skipVTables);
            }

            private U(global::libopcodes.Orl.U.__Internal native, bool skipVTables = false)
                : this()
            {
                __instance = native;
            }

            private U(void* native, bool skipVTables = false) : this()
            {
                __instance = *(global::libopcodes.Orl.U.__Internal*) native;
            }

            public U(global::libopcodes.Orl.U _0)
                : this()
            {
                var ____arg0 = _0.__Instance;
                var __arg0 = new global::System.IntPtr(&____arg0);
                fixed (__Internal* __instancePtr = &__instance)
                {
                    __Internal.cctor(new global::System.IntPtr(__instancePtr), __arg0);
                }
            }

            public long Pos
            {
                get
                {
                    return __instance.pos;
                }

                set
                {
                    __instance.pos = value;
                }
            }

            public global::libopcodes.Bfd Abfd
            {
                get
                {
                    global::libopcodes.Bfd __result0;
                    if (__instance.abfd == IntPtr.Zero) __result0 = null;
                    else if (global::libopcodes.Bfd.NativeToManagedMap.ContainsKey(__instance.abfd))
                        __result0 = (global::libopcodes.Bfd) global::libopcodes.Bfd.NativeToManagedMap[__instance.abfd];
                    else __result0 = global::libopcodes.Bfd.__CreateInstance(__instance.abfd);
                    return __result0;
                }

                set
                {
                    __instance.abfd = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                }
            }
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.Orl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.Orl>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::libopcodes.Orl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::libopcodes.Orl(native.ToPointer(), skipVTables);
        }

        internal static global::libopcodes.Orl __CreateInstance(global::libopcodes.Orl.__Internal native, bool skipVTables = false)
        {
            return new global::libopcodes.Orl(native, skipVTables);
        }

        private static void* __CopyValue(global::libopcodes.Orl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::libopcodes.Orl.__Internal));
            *(global::libopcodes.Orl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private Orl(global::libopcodes.Orl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected Orl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public Orl()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::libopcodes.Orl.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public Orl(global::libopcodes.Orl _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::libopcodes.Orl.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::libopcodes.Orl.__Internal*) __Instance) = *((global::libopcodes.Orl.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::libopcodes.Orl __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public sbyte** Name
        {
            get
            {
                return (sbyte**) ((global::libopcodes.Orl.__Internal*) __Instance)->name;
            }

            set
            {
                ((global::libopcodes.Orl.__Internal*)__Instance)->name = (global::System.IntPtr) value;
            }
        }

        public global::libopcodes.Orl.U u
        {
            get
            {
                return global::libopcodes.Orl.U.__CreateInstance(((global::libopcodes.Orl.__Internal*) __Instance)->u);
            }

            set
            {
                ((global::libopcodes.Orl.__Internal*)__Instance)->u = value.__Instance;
            }
        }

        public int Namidx
        {
            get
            {
                return ((global::libopcodes.Orl.__Internal*) __Instance)->namidx;
            }

            set
            {
                ((global::libopcodes.Orl.__Internal*)__Instance)->namidx = value;
            }
        }
    }

    public unsafe partial class LinenoCacheEntry : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint line_number;

            [FieldOffset(8)]
            internal global::libopcodes.LinenoCacheEntry.U.__Internal u;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0lineno_cache_entry@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public unsafe partial struct U
        {
            [StructLayout(LayoutKind.Explicit, Size = 8)]
            public partial struct __Internal
            {
                [FieldOffset(0)]
                internal global::System.IntPtr sym;

                [FieldOffset(0)]
                internal ulong offset;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="??0<unnamed-type-u>@lineno_cache_entry@@QEAA@AEBT01@@Z")]
                internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
            }

            private U.__Internal __instance;
            internal U.__Internal __Instance { get { return __instance; } }

            internal static global::libopcodes.LinenoCacheEntry.U __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new global::libopcodes.LinenoCacheEntry.U(native.ToPointer(), skipVTables);
            }

            internal static global::libopcodes.LinenoCacheEntry.U __CreateInstance(global::libopcodes.LinenoCacheEntry.U.__Internal native, bool skipVTables = false)
            {
                return new global::libopcodes.LinenoCacheEntry.U(native, skipVTables);
            }

            private U(global::libopcodes.LinenoCacheEntry.U.__Internal native, bool skipVTables = false)
                : this()
            {
                __instance = native;
            }

            private U(void* native, bool skipVTables = false) : this()
            {
                __instance = *(global::libopcodes.LinenoCacheEntry.U.__Internal*) native;
            }

            public U(global::libopcodes.LinenoCacheEntry.U _0)
                : this()
            {
                var ____arg0 = _0.__Instance;
                var __arg0 = new global::System.IntPtr(&____arg0);
                fixed (__Internal* __instancePtr = &__instance)
                {
                    __Internal.cctor(new global::System.IntPtr(__instancePtr), __arg0);
                }
            }

            public global::libopcodes.BfdSymbol Sym
            {
                get
                {
                    global::libopcodes.BfdSymbol __result0;
                    if (__instance.sym == IntPtr.Zero) __result0 = null;
                    else if (global::libopcodes.BfdSymbol.NativeToManagedMap.ContainsKey(__instance.sym))
                        __result0 = (global::libopcodes.BfdSymbol) global::libopcodes.BfdSymbol.NativeToManagedMap[__instance.sym];
                    else __result0 = global::libopcodes.BfdSymbol.__CreateInstance(__instance.sym);
                    return __result0;
                }

                set
                {
                    __instance.sym = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                }
            }

            public ulong Offset
            {
                get
                {
                    return __instance.offset;
                }

                set
                {
                    __instance.offset = value;
                }
            }
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.LinenoCacheEntry> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.LinenoCacheEntry>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::libopcodes.LinenoCacheEntry __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::libopcodes.LinenoCacheEntry(native.ToPointer(), skipVTables);
        }

        internal static global::libopcodes.LinenoCacheEntry __CreateInstance(global::libopcodes.LinenoCacheEntry.__Internal native, bool skipVTables = false)
        {
            return new global::libopcodes.LinenoCacheEntry(native, skipVTables);
        }

        private static void* __CopyValue(global::libopcodes.LinenoCacheEntry.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::libopcodes.LinenoCacheEntry.__Internal));
            *(global::libopcodes.LinenoCacheEntry.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private LinenoCacheEntry(global::libopcodes.LinenoCacheEntry.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected LinenoCacheEntry(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public LinenoCacheEntry()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::libopcodes.LinenoCacheEntry.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public LinenoCacheEntry(global::libopcodes.LinenoCacheEntry _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::libopcodes.LinenoCacheEntry.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::libopcodes.LinenoCacheEntry.__Internal*) __Instance) = *((global::libopcodes.LinenoCacheEntry.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::libopcodes.LinenoCacheEntry __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint LineNumber
        {
            get
            {
                return ((global::libopcodes.LinenoCacheEntry.__Internal*) __Instance)->line_number;
            }

            set
            {
                ((global::libopcodes.LinenoCacheEntry.__Internal*)__Instance)->line_number = value;
            }
        }

        public global::libopcodes.LinenoCacheEntry.U u
        {
            get
            {
                return global::libopcodes.LinenoCacheEntry.U.__CreateInstance(((global::libopcodes.LinenoCacheEntry.__Internal*) __Instance)->u);
            }

            set
            {
                ((global::libopcodes.LinenoCacheEntry.__Internal*)__Instance)->u = value.__Instance;
            }
        }
    }

    public unsafe partial class SymbolInfo : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 40)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal ulong value;

            [FieldOffset(8)]
            internal sbyte type;

            [FieldOffset(16)]
            internal global::System.IntPtr name;

            [FieldOffset(24)]
            internal byte stab_type;

            [FieldOffset(25)]
            internal sbyte stab_other;

            [FieldOffset(26)]
            internal short stab_desc;

            [FieldOffset(32)]
            internal global::System.IntPtr stab_name;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0_symbol_info@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.SymbolInfo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.SymbolInfo>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::libopcodes.SymbolInfo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::libopcodes.SymbolInfo(native.ToPointer(), skipVTables);
        }

        internal static global::libopcodes.SymbolInfo __CreateInstance(global::libopcodes.SymbolInfo.__Internal native, bool skipVTables = false)
        {
            return new global::libopcodes.SymbolInfo(native, skipVTables);
        }

        private static void* __CopyValue(global::libopcodes.SymbolInfo.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::libopcodes.SymbolInfo.__Internal));
            *(global::libopcodes.SymbolInfo.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private SymbolInfo(global::libopcodes.SymbolInfo.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected SymbolInfo(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public SymbolInfo()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::libopcodes.SymbolInfo.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public SymbolInfo(global::libopcodes.SymbolInfo _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::libopcodes.SymbolInfo.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::libopcodes.SymbolInfo.__Internal*) __Instance) = *((global::libopcodes.SymbolInfo.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::libopcodes.SymbolInfo __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public ulong Value
        {
            get
            {
                return ((global::libopcodes.SymbolInfo.__Internal*) __Instance)->value;
            }

            set
            {
                ((global::libopcodes.SymbolInfo.__Internal*)__Instance)->value = value;
            }
        }

        public sbyte Type
        {
            get
            {
                return ((global::libopcodes.SymbolInfo.__Internal*) __Instance)->type;
            }

            set
            {
                ((global::libopcodes.SymbolInfo.__Internal*)__Instance)->type = value;
            }
        }

        public string Name
        {
            get
            {
                if (((global::libopcodes.SymbolInfo.__Internal*) __Instance)->name == global::System.IntPtr.Zero)
                    return default(string);
                var __retPtr = (byte*) ((global::libopcodes.SymbolInfo.__Internal*) __Instance)->name;
                int __length = 0;
                while (*(__retPtr++) != 0) __length += sizeof(byte);
                return global::System.Text.Encoding.UTF8.GetString((byte*) ((global::libopcodes.SymbolInfo.__Internal*) __Instance)->name, __length);
            }

            set
            {
                byte[] __bytes0 = global::System.Text.Encoding.UTF8.GetBytes(value);
                fixed (byte* __bytePtr0 = __bytes0)
                {
                    ((global::libopcodes.SymbolInfo.__Internal*)__Instance)->name = (global::System.IntPtr) new global::System.IntPtr(__bytePtr0);
                }
            }
        }

        public byte StabType
        {
            get
            {
                return ((global::libopcodes.SymbolInfo.__Internal*) __Instance)->stab_type;
            }

            set
            {
                ((global::libopcodes.SymbolInfo.__Internal*)__Instance)->stab_type = value;
            }
        }

        public sbyte StabOther
        {
            get
            {
                return ((global::libopcodes.SymbolInfo.__Internal*) __Instance)->stab_other;
            }

            set
            {
                ((global::libopcodes.SymbolInfo.__Internal*)__Instance)->stab_other = value;
            }
        }

        public short StabDesc
        {
            get
            {
                return ((global::libopcodes.SymbolInfo.__Internal*) __Instance)->stab_desc;
            }

            set
            {
                ((global::libopcodes.SymbolInfo.__Internal*)__Instance)->stab_desc = value;
            }
        }

        public string StabName
        {
            get
            {
                if (((global::libopcodes.SymbolInfo.__Internal*) __Instance)->stab_name == global::System.IntPtr.Zero)
                    return default(string);
                var __retPtr = (byte*) ((global::libopcodes.SymbolInfo.__Internal*) __Instance)->stab_name;
                int __length = 0;
                while (*(__retPtr++) != 0) __length += sizeof(byte);
                return global::System.Text.Encoding.UTF8.GetString((byte*) ((global::libopcodes.SymbolInfo.__Internal*) __Instance)->stab_name, __length);
            }

            set
            {
                byte[] __bytes0 = global::System.Text.Encoding.UTF8.GetBytes(value);
                fixed (byte* __bytePtr0 = __bytes0)
                {
                    ((global::libopcodes.SymbolInfo.__Internal*)__Instance)->stab_name = (global::System.IntPtr) new global::System.IntPtr(__bytePtr0);
                }
            }
        }
    }

    public unsafe partial class BfdHashEntry : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr next;

            [FieldOffset(8)]
            internal global::System.IntPtr @string;

            [FieldOffset(16)]
            internal uint hash;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0bfd_hash_entry@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.BfdHashEntry> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.BfdHashEntry>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::libopcodes.BfdHashEntry __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::libopcodes.BfdHashEntry(native.ToPointer(), skipVTables);
        }

        internal static global::libopcodes.BfdHashEntry __CreateInstance(global::libopcodes.BfdHashEntry.__Internal native, bool skipVTables = false)
        {
            return new global::libopcodes.BfdHashEntry(native, skipVTables);
        }

        private static void* __CopyValue(global::libopcodes.BfdHashEntry.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::libopcodes.BfdHashEntry.__Internal));
            *(global::libopcodes.BfdHashEntry.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private BfdHashEntry(global::libopcodes.BfdHashEntry.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected BfdHashEntry(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public BfdHashEntry()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::libopcodes.BfdHashEntry.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public BfdHashEntry(global::libopcodes.BfdHashEntry _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::libopcodes.BfdHashEntry.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::libopcodes.BfdHashEntry.__Internal*) __Instance) = *((global::libopcodes.BfdHashEntry.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::libopcodes.BfdHashEntry __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::libopcodes.BfdHashEntry Next
        {
            get
            {
                global::libopcodes.BfdHashEntry __result0;
                if (((global::libopcodes.BfdHashEntry.__Internal*) __Instance)->next == IntPtr.Zero) __result0 = null;
                else if (global::libopcodes.BfdHashEntry.NativeToManagedMap.ContainsKey(((global::libopcodes.BfdHashEntry.__Internal*) __Instance)->next))
                    __result0 = (global::libopcodes.BfdHashEntry) global::libopcodes.BfdHashEntry.NativeToManagedMap[((global::libopcodes.BfdHashEntry.__Internal*) __Instance)->next];
                else __result0 = global::libopcodes.BfdHashEntry.__CreateInstance(((global::libopcodes.BfdHashEntry.__Internal*) __Instance)->next);
                return __result0;
            }

            set
            {
                ((global::libopcodes.BfdHashEntry.__Internal*)__Instance)->next = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public string String
        {
            get
            {
                if (((global::libopcodes.BfdHashEntry.__Internal*) __Instance)->@string == global::System.IntPtr.Zero)
                    return default(string);
                var __retPtr = (byte*) ((global::libopcodes.BfdHashEntry.__Internal*) __Instance)->@string;
                int __length = 0;
                while (*(__retPtr++) != 0) __length += sizeof(byte);
                return global::System.Text.Encoding.UTF8.GetString((byte*) ((global::libopcodes.BfdHashEntry.__Internal*) __Instance)->@string, __length);
            }

            set
            {
                byte[] __bytes0 = global::System.Text.Encoding.UTF8.GetBytes(value);
                fixed (byte* __bytePtr0 = __bytes0)
                {
                    ((global::libopcodes.BfdHashEntry.__Internal*)__Instance)->@string = (global::System.IntPtr) new global::System.IntPtr(__bytePtr0);
                }
            }
        }

        public uint Hash
        {
            get
            {
                return ((global::libopcodes.BfdHashEntry.__Internal*) __Instance)->hash;
            }

            set
            {
                ((global::libopcodes.BfdHashEntry.__Internal*)__Instance)->hash = value;
            }
        }
    }

    public unsafe partial class BfdHashTable : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 40)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr table;

            [FieldOffset(8)]
            internal global::System.IntPtr newfunc;

            [FieldOffset(16)]
            internal global::System.IntPtr memory;

            [FieldOffset(24)]
            internal uint size;

            [FieldOffset(28)]
            internal uint count;

            [FieldOffset(32)]
            internal uint entsize;

            [FieldOffset(36)]
            internal uint frozen;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0bfd_hash_table@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.BfdHashTable> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.BfdHashTable>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::libopcodes.BfdHashTable __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::libopcodes.BfdHashTable(native.ToPointer(), skipVTables);
        }

        internal static global::libopcodes.BfdHashTable __CreateInstance(global::libopcodes.BfdHashTable.__Internal native, bool skipVTables = false)
        {
            return new global::libopcodes.BfdHashTable(native, skipVTables);
        }

        private static void* __CopyValue(global::libopcodes.BfdHashTable.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::libopcodes.BfdHashTable.__Internal));
            *(global::libopcodes.BfdHashTable.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private BfdHashTable(global::libopcodes.BfdHashTable.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected BfdHashTable(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public BfdHashTable()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::libopcodes.BfdHashTable.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public BfdHashTable(global::libopcodes.BfdHashTable _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::libopcodes.BfdHashTable.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::libopcodes.BfdHashTable.__Internal*) __Instance) = *((global::libopcodes.BfdHashTable.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::libopcodes.BfdHashTable __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::libopcodes.BfdHashEntry Table
        {
            get
            {
                global::libopcodes.BfdHashEntry __result0;
                if (((global::libopcodes.BfdHashTable.__Internal*) __Instance)->table == IntPtr.Zero) __result0 = null;
                else if (global::libopcodes.BfdHashEntry.NativeToManagedMap.ContainsKey(((global::libopcodes.BfdHashTable.__Internal*) __Instance)->table))
                    __result0 = (global::libopcodes.BfdHashEntry) global::libopcodes.BfdHashEntry.NativeToManagedMap[((global::libopcodes.BfdHashTable.__Internal*) __Instance)->table];
                else __result0 = global::libopcodes.BfdHashEntry.__CreateInstance(((global::libopcodes.BfdHashTable.__Internal*) __Instance)->table);
                return __result0;
            }

            set
            {
                var __value = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                ((global::libopcodes.BfdHashTable.__Internal*)__Instance)->table = new global::System.IntPtr(&__value);
            }
        }

        public global::libopcodes.Delegates.Func_IntPtr_IntPtr_IntPtr_string Newfunc
        {
            get
            {
                var __ptr0 = ((global::libopcodes.BfdHashTable.__Internal*) __Instance)->newfunc;
                return __ptr0 == IntPtr.Zero? null : (global::libopcodes.Delegates.Func_IntPtr_IntPtr_IntPtr_string) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::libopcodes.Delegates.Func_IntPtr_IntPtr_IntPtr_string));
            }

            set
            {
                ((global::libopcodes.BfdHashTable.__Internal*)__Instance)->newfunc = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::System.IntPtr Memory
        {
            get
            {
                return ((global::libopcodes.BfdHashTable.__Internal*) __Instance)->memory;
            }

            set
            {
                ((global::libopcodes.BfdHashTable.__Internal*)__Instance)->memory = (global::System.IntPtr) value;
            }
        }

        public uint Size
        {
            get
            {
                return ((global::libopcodes.BfdHashTable.__Internal*) __Instance)->size;
            }

            set
            {
                ((global::libopcodes.BfdHashTable.__Internal*)__Instance)->size = value;
            }
        }

        public uint Count
        {
            get
            {
                return ((global::libopcodes.BfdHashTable.__Internal*) __Instance)->count;
            }

            set
            {
                ((global::libopcodes.BfdHashTable.__Internal*)__Instance)->count = value;
            }
        }

        public uint Entsize
        {
            get
            {
                return ((global::libopcodes.BfdHashTable.__Internal*) __Instance)->entsize;
            }

            set
            {
                ((global::libopcodes.BfdHashTable.__Internal*)__Instance)->entsize = value;
            }
        }

        public uint Frozen
        {
            get
            {
                return ((global::libopcodes.BfdHashTable.__Internal*) __Instance)->frozen;
            }

            set
            {
                ((global::libopcodes.BfdHashTable.__Internal*)__Instance)->frozen = value;
            }
        }
    }

    public unsafe partial class StabInfo : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr strings;

            [FieldOffset(8)]
            internal global::libopcodes.BfdHashTable.__Internal includes;

            [FieldOffset(48)]
            internal global::System.IntPtr stabstr;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0stab_info@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.StabInfo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.StabInfo>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::libopcodes.StabInfo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::libopcodes.StabInfo(native.ToPointer(), skipVTables);
        }

        internal static global::libopcodes.StabInfo __CreateInstance(global::libopcodes.StabInfo.__Internal native, bool skipVTables = false)
        {
            return new global::libopcodes.StabInfo(native, skipVTables);
        }

        private static void* __CopyValue(global::libopcodes.StabInfo.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::libopcodes.StabInfo.__Internal));
            *(global::libopcodes.StabInfo.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private StabInfo(global::libopcodes.StabInfo.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected StabInfo(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public StabInfo()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::libopcodes.StabInfo.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public StabInfo(global::libopcodes.StabInfo _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::libopcodes.StabInfo.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::libopcodes.StabInfo.__Internal*) __Instance) = *((global::libopcodes.StabInfo.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::libopcodes.StabInfo __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::libopcodes.BfdStrtabHash Strings
        {
            get
            {
                global::libopcodes.BfdStrtabHash __result0;
                if (((global::libopcodes.StabInfo.__Internal*) __Instance)->strings == IntPtr.Zero) __result0 = null;
                else if (global::libopcodes.BfdStrtabHash.NativeToManagedMap.ContainsKey(((global::libopcodes.StabInfo.__Internal*) __Instance)->strings))
                    __result0 = (global::libopcodes.BfdStrtabHash) global::libopcodes.BfdStrtabHash.NativeToManagedMap[((global::libopcodes.StabInfo.__Internal*) __Instance)->strings];
                else __result0 = global::libopcodes.BfdStrtabHash.__CreateInstance(((global::libopcodes.StabInfo.__Internal*) __Instance)->strings);
                return __result0;
            }

            set
            {
                ((global::libopcodes.StabInfo.__Internal*)__Instance)->strings = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public global::libopcodes.BfdHashTable Includes
        {
            get
            {
                return global::libopcodes.BfdHashTable.__CreateInstance(new global::System.IntPtr(&((global::libopcodes.StabInfo.__Internal*) __Instance)->includes));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::libopcodes.StabInfo.__Internal*)__Instance)->includes = *(global::libopcodes.BfdHashTable.__Internal*) value.__Instance;
            }
        }

        public global::libopcodes.BfdSection Stabstr
        {
            get
            {
                global::libopcodes.BfdSection __result0;
                if (((global::libopcodes.StabInfo.__Internal*) __Instance)->stabstr == IntPtr.Zero) __result0 = null;
                else if (global::libopcodes.BfdSection.NativeToManagedMap.ContainsKey(((global::libopcodes.StabInfo.__Internal*) __Instance)->stabstr))
                    __result0 = (global::libopcodes.BfdSection) global::libopcodes.BfdSection.NativeToManagedMap[((global::libopcodes.StabInfo.__Internal*) __Instance)->stabstr];
                else __result0 = global::libopcodes.BfdSection.__CreateInstance(((global::libopcodes.StabInfo.__Internal*) __Instance)->stabstr);
                return __result0;
            }

            set
            {
                ((global::libopcodes.StabInfo.__Internal*)__Instance)->stabstr = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }
    }

    public unsafe partial class BfdWindow : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr data;

            [FieldOffset(8)]
            internal ulong size;

            [FieldOffset(16)]
            internal global::System.IntPtr i;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0_bfd_window@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.BfdWindow> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.BfdWindow>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::libopcodes.BfdWindow __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::libopcodes.BfdWindow(native.ToPointer(), skipVTables);
        }

        internal static global::libopcodes.BfdWindow __CreateInstance(global::libopcodes.BfdWindow.__Internal native, bool skipVTables = false)
        {
            return new global::libopcodes.BfdWindow(native, skipVTables);
        }

        private static void* __CopyValue(global::libopcodes.BfdWindow.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::libopcodes.BfdWindow.__Internal));
            *(global::libopcodes.BfdWindow.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private BfdWindow(global::libopcodes.BfdWindow.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected BfdWindow(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public BfdWindow()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::libopcodes.BfdWindow.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public BfdWindow(global::libopcodes.BfdWindow _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::libopcodes.BfdWindow.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::libopcodes.BfdWindow.__Internal*) __Instance) = *((global::libopcodes.BfdWindow.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::libopcodes.BfdWindow __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::System.IntPtr Data
        {
            get
            {
                return ((global::libopcodes.BfdWindow.__Internal*) __Instance)->data;
            }

            set
            {
                ((global::libopcodes.BfdWindow.__Internal*)__Instance)->data = (global::System.IntPtr) value;
            }
        }

        public ulong Size
        {
            get
            {
                return ((global::libopcodes.BfdWindow.__Internal*) __Instance)->size;
            }

            set
            {
                ((global::libopcodes.BfdWindow.__Internal*)__Instance)->size = value;
            }
        }

        public global::libopcodes.BfdWindowInternal I
        {
            get
            {
                global::libopcodes.BfdWindowInternal __result0;
                if (((global::libopcodes.BfdWindow.__Internal*) __Instance)->i == IntPtr.Zero) __result0 = null;
                else if (global::libopcodes.BfdWindowInternal.NativeToManagedMap.ContainsKey(((global::libopcodes.BfdWindow.__Internal*) __Instance)->i))
                    __result0 = (global::libopcodes.BfdWindowInternal) global::libopcodes.BfdWindowInternal.NativeToManagedMap[((global::libopcodes.BfdWindow.__Internal*) __Instance)->i];
                else __result0 = global::libopcodes.BfdWindowInternal.__CreateInstance(((global::libopcodes.BfdWindow.__Internal*) __Instance)->i);
                return __result0;
            }

            set
            {
                ((global::libopcodes.BfdWindow.__Internal*)__Instance)->i = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }
    }

    public unsafe partial class BfdSection : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 280)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr name;

            [FieldOffset(8)]
            internal uint id;

            [FieldOffset(12)]
            internal uint index;

            [FieldOffset(16)]
            internal global::System.IntPtr next;

            [FieldOffset(24)]
            internal global::System.IntPtr prev;

            [FieldOffset(32)]
            internal uint flags;

            [FieldOffset(36)]
            internal uint user_set_vma;

            [FieldOffset(36)]
            internal uint linker_mark;

            [FieldOffset(36)]
            internal uint linker_has_input;

            [FieldOffset(36)]
            internal uint gc_mark;

            [FieldOffset(36)]
            internal uint compress_status;

            [FieldOffset(36)]
            internal uint segment_mark;

            [FieldOffset(36)]
            internal uint sec_info_type;

            [FieldOffset(37)]
            internal uint use_rela_p;

            [FieldOffset(37)]
            internal uint sec_flg0;

            [FieldOffset(37)]
            internal uint sec_flg1;

            [FieldOffset(37)]
            internal uint sec_flg2;

            [FieldOffset(37)]
            internal uint sec_flg3;

            [FieldOffset(37)]
            internal uint sec_flg4;

            [FieldOffset(38)]
            internal uint sec_flg5;

            [FieldOffset(40)]
            internal ulong vma;

            [FieldOffset(48)]
            internal ulong lma;

            [FieldOffset(56)]
            internal ulong size;

            [FieldOffset(64)]
            internal ulong rawsize;

            [FieldOffset(72)]
            internal ulong compressed_size;

            [FieldOffset(80)]
            internal global::System.IntPtr relax;

            [FieldOffset(88)]
            internal int relax_count;

            [FieldOffset(96)]
            internal ulong output_offset;

            [FieldOffset(104)]
            internal global::System.IntPtr output_section;

            [FieldOffset(112)]
            internal uint alignment_power;

            [FieldOffset(120)]
            internal global::System.IntPtr relocation;

            [FieldOffset(128)]
            internal global::System.IntPtr orelocation;

            [FieldOffset(136)]
            internal uint reloc_count;

            [FieldOffset(144)]
            internal long filepos;

            [FieldOffset(152)]
            internal long rel_filepos;

            [FieldOffset(160)]
            internal long line_filepos;

            [FieldOffset(168)]
            internal global::System.IntPtr userdata;

            [FieldOffset(176)]
            internal global::System.IntPtr contents;

            [FieldOffset(184)]
            internal global::System.IntPtr lineno;

            [FieldOffset(192)]
            internal uint lineno_count;

            [FieldOffset(196)]
            internal uint entsize;

            [FieldOffset(200)]
            internal global::System.IntPtr kept_section;

            [FieldOffset(208)]
            internal long moving_line_filepos;

            [FieldOffset(216)]
            internal int target_index;

            [FieldOffset(224)]
            internal global::System.IntPtr used_by_bfd;

            [FieldOffset(232)]
            internal global::System.IntPtr constructor_chain;

            [FieldOffset(240)]
            internal global::System.IntPtr owner;

            [FieldOffset(248)]
            internal global::System.IntPtr symbol;

            [FieldOffset(256)]
            internal global::System.IntPtr symbol_ptr_ptr;

            [FieldOffset(264)]
            internal global::libopcodes.BfdSection.MapTail.__Internal map_head;

            [FieldOffset(272)]
            internal global::libopcodes.BfdSection.MapTail.__Internal map_tail;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0bfd_section@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public unsafe partial struct MapTail
        {
            [StructLayout(LayoutKind.Explicit, Size = 8)]
            public partial struct __Internal
            {
                [FieldOffset(0)]
                internal global::System.IntPtr link_order;

                [FieldOffset(0)]
                internal global::System.IntPtr s;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="??0<unnamed-type-map_head>@bfd_section@@QEAA@AEBT01@@Z")]
                internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
            }

            private MapTail.__Internal __instance;
            internal MapTail.__Internal __Instance { get { return __instance; } }

            internal static global::libopcodes.BfdSection.MapTail __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new global::libopcodes.BfdSection.MapTail(native.ToPointer(), skipVTables);
            }

            internal static global::libopcodes.BfdSection.MapTail __CreateInstance(global::libopcodes.BfdSection.MapTail.__Internal native, bool skipVTables = false)
            {
                return new global::libopcodes.BfdSection.MapTail(native, skipVTables);
            }

            private MapTail(global::libopcodes.BfdSection.MapTail.__Internal native, bool skipVTables = false)
                : this()
            {
                __instance = native;
            }

            private MapTail(void* native, bool skipVTables = false) : this()
            {
                __instance = *(global::libopcodes.BfdSection.MapTail.__Internal*) native;
            }

            public MapTail(global::libopcodes.BfdSection.MapTail _0)
                : this()
            {
                var ____arg0 = _0.__Instance;
                var __arg0 = new global::System.IntPtr(&____arg0);
                fixed (__Internal* __instancePtr = &__instance)
                {
                    __Internal.cctor(new global::System.IntPtr(__instancePtr), __arg0);
                }
            }

            public global::libopcodes.BfdLinkOrder LinkOrder
            {
                get
                {
                    global::libopcodes.BfdLinkOrder __result0;
                    if (__instance.link_order == IntPtr.Zero) __result0 = null;
                    else if (global::libopcodes.BfdLinkOrder.NativeToManagedMap.ContainsKey(__instance.link_order))
                        __result0 = (global::libopcodes.BfdLinkOrder) global::libopcodes.BfdLinkOrder.NativeToManagedMap[__instance.link_order];
                    else __result0 = global::libopcodes.BfdLinkOrder.__CreateInstance(__instance.link_order);
                    return __result0;
                }

                set
                {
                    __instance.link_order = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                }
            }

            public global::libopcodes.BfdSection S
            {
                get
                {
                    global::libopcodes.BfdSection __result0;
                    if (__instance.s == IntPtr.Zero) __result0 = null;
                    else if (global::libopcodes.BfdSection.NativeToManagedMap.ContainsKey(__instance.s))
                        __result0 = (global::libopcodes.BfdSection) global::libopcodes.BfdSection.NativeToManagedMap[__instance.s];
                    else __result0 = global::libopcodes.BfdSection.__CreateInstance(__instance.s);
                    return __result0;
                }

                set
                {
                    __instance.s = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                }
            }
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.BfdSection> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.BfdSection>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::libopcodes.BfdSection __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::libopcodes.BfdSection(native.ToPointer(), skipVTables);
        }

        internal static global::libopcodes.BfdSection __CreateInstance(global::libopcodes.BfdSection.__Internal native, bool skipVTables = false)
        {
            return new global::libopcodes.BfdSection(native, skipVTables);
        }

        private static void* __CopyValue(global::libopcodes.BfdSection.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::libopcodes.BfdSection.__Internal));
            *(global::libopcodes.BfdSection.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private BfdSection(global::libopcodes.BfdSection.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected BfdSection(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public BfdSection()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::libopcodes.BfdSection.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public BfdSection(global::libopcodes.BfdSection _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::libopcodes.BfdSection.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::libopcodes.BfdSection.__Internal*) __Instance) = *((global::libopcodes.BfdSection.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::libopcodes.BfdSection __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public string Name
        {
            get
            {
                if (((global::libopcodes.BfdSection.__Internal*) __Instance)->name == global::System.IntPtr.Zero)
                    return default(string);
                var __retPtr = (byte*) ((global::libopcodes.BfdSection.__Internal*) __Instance)->name;
                int __length = 0;
                while (*(__retPtr++) != 0) __length += sizeof(byte);
                return global::System.Text.Encoding.UTF8.GetString((byte*) ((global::libopcodes.BfdSection.__Internal*) __Instance)->name, __length);
            }

            set
            {
                byte[] __bytes0 = global::System.Text.Encoding.UTF8.GetBytes(value);
                fixed (byte* __bytePtr0 = __bytes0)
                {
                    ((global::libopcodes.BfdSection.__Internal*)__Instance)->name = (global::System.IntPtr) new global::System.IntPtr(__bytePtr0);
                }
            }
        }

        public uint Id
        {
            get
            {
                return ((global::libopcodes.BfdSection.__Internal*) __Instance)->id;
            }

            set
            {
                ((global::libopcodes.BfdSection.__Internal*)__Instance)->id = value;
            }
        }

        public uint Index
        {
            get
            {
                return ((global::libopcodes.BfdSection.__Internal*) __Instance)->index;
            }

            set
            {
                ((global::libopcodes.BfdSection.__Internal*)__Instance)->index = value;
            }
        }

        public global::libopcodes.BfdSection Next
        {
            get
            {
                global::libopcodes.BfdSection __result0;
                if (((global::libopcodes.BfdSection.__Internal*) __Instance)->next == IntPtr.Zero) __result0 = null;
                else if (global::libopcodes.BfdSection.NativeToManagedMap.ContainsKey(((global::libopcodes.BfdSection.__Internal*) __Instance)->next))
                    __result0 = (global::libopcodes.BfdSection) global::libopcodes.BfdSection.NativeToManagedMap[((global::libopcodes.BfdSection.__Internal*) __Instance)->next];
                else __result0 = global::libopcodes.BfdSection.__CreateInstance(((global::libopcodes.BfdSection.__Internal*) __Instance)->next);
                return __result0;
            }

            set
            {
                ((global::libopcodes.BfdSection.__Internal*)__Instance)->next = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public global::libopcodes.BfdSection Prev
        {
            get
            {
                global::libopcodes.BfdSection __result0;
                if (((global::libopcodes.BfdSection.__Internal*) __Instance)->prev == IntPtr.Zero) __result0 = null;
                else if (global::libopcodes.BfdSection.NativeToManagedMap.ContainsKey(((global::libopcodes.BfdSection.__Internal*) __Instance)->prev))
                    __result0 = (global::libopcodes.BfdSection) global::libopcodes.BfdSection.NativeToManagedMap[((global::libopcodes.BfdSection.__Internal*) __Instance)->prev];
                else __result0 = global::libopcodes.BfdSection.__CreateInstance(((global::libopcodes.BfdSection.__Internal*) __Instance)->prev);
                return __result0;
            }

            set
            {
                ((global::libopcodes.BfdSection.__Internal*)__Instance)->prev = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public uint Flags
        {
            get
            {
                return ((global::libopcodes.BfdSection.__Internal*) __Instance)->flags;
            }

            set
            {
                ((global::libopcodes.BfdSection.__Internal*)__Instance)->flags = value;
            }
        }

        public uint UserSetVma
        {
            get
            {
                return ((global::libopcodes.BfdSection.__Internal*) __Instance)->user_set_vma;
            }

            set
            {
                ((global::libopcodes.BfdSection.__Internal*)__Instance)->user_set_vma = value;
            }
        }

        public uint LinkerMark
        {
            get
            {
                return ((global::libopcodes.BfdSection.__Internal*) __Instance)->linker_mark;
            }

            set
            {
                ((global::libopcodes.BfdSection.__Internal*)__Instance)->linker_mark = value;
            }
        }

        public uint LinkerHasInput
        {
            get
            {
                return ((global::libopcodes.BfdSection.__Internal*) __Instance)->linker_has_input;
            }

            set
            {
                ((global::libopcodes.BfdSection.__Internal*)__Instance)->linker_has_input = value;
            }
        }

        public uint GcMark
        {
            get
            {
                return ((global::libopcodes.BfdSection.__Internal*) __Instance)->gc_mark;
            }

            set
            {
                ((global::libopcodes.BfdSection.__Internal*)__Instance)->gc_mark = value;
            }
        }

        public uint CompressStatus
        {
            get
            {
                return ((global::libopcodes.BfdSection.__Internal*) __Instance)->compress_status;
            }

            set
            {
                ((global::libopcodes.BfdSection.__Internal*)__Instance)->compress_status = value;
            }
        }

        public uint SegmentMark
        {
            get
            {
                return ((global::libopcodes.BfdSection.__Internal*) __Instance)->segment_mark;
            }

            set
            {
                ((global::libopcodes.BfdSection.__Internal*)__Instance)->segment_mark = value;
            }
        }

        public uint SecInfoType
        {
            get
            {
                return ((global::libopcodes.BfdSection.__Internal*) __Instance)->sec_info_type;
            }

            set
            {
                ((global::libopcodes.BfdSection.__Internal*)__Instance)->sec_info_type = value;
            }
        }

        public uint UseRelaP
        {
            get
            {
                return ((global::libopcodes.BfdSection.__Internal*) __Instance)->use_rela_p;
            }

            set
            {
                ((global::libopcodes.BfdSection.__Internal*)__Instance)->use_rela_p = value;
            }
        }

        public uint SecFlg0
        {
            get
            {
                return ((global::libopcodes.BfdSection.__Internal*) __Instance)->sec_flg0;
            }

            set
            {
                ((global::libopcodes.BfdSection.__Internal*)__Instance)->sec_flg0 = value;
            }
        }

        public uint SecFlg1
        {
            get
            {
                return ((global::libopcodes.BfdSection.__Internal*) __Instance)->sec_flg1;
            }

            set
            {
                ((global::libopcodes.BfdSection.__Internal*)__Instance)->sec_flg1 = value;
            }
        }

        public uint SecFlg2
        {
            get
            {
                return ((global::libopcodes.BfdSection.__Internal*) __Instance)->sec_flg2;
            }

            set
            {
                ((global::libopcodes.BfdSection.__Internal*)__Instance)->sec_flg2 = value;
            }
        }

        public uint SecFlg3
        {
            get
            {
                return ((global::libopcodes.BfdSection.__Internal*) __Instance)->sec_flg3;
            }

            set
            {
                ((global::libopcodes.BfdSection.__Internal*)__Instance)->sec_flg3 = value;
            }
        }

        public uint SecFlg4
        {
            get
            {
                return ((global::libopcodes.BfdSection.__Internal*) __Instance)->sec_flg4;
            }

            set
            {
                ((global::libopcodes.BfdSection.__Internal*)__Instance)->sec_flg4 = value;
            }
        }

        public uint SecFlg5
        {
            get
            {
                return ((global::libopcodes.BfdSection.__Internal*) __Instance)->sec_flg5;
            }

            set
            {
                ((global::libopcodes.BfdSection.__Internal*)__Instance)->sec_flg5 = value;
            }
        }

        public ulong Vma
        {
            get
            {
                return ((global::libopcodes.BfdSection.__Internal*) __Instance)->vma;
            }

            set
            {
                ((global::libopcodes.BfdSection.__Internal*)__Instance)->vma = value;
            }
        }

        public ulong Lma
        {
            get
            {
                return ((global::libopcodes.BfdSection.__Internal*) __Instance)->lma;
            }

            set
            {
                ((global::libopcodes.BfdSection.__Internal*)__Instance)->lma = value;
            }
        }

        public ulong Size
        {
            get
            {
                return ((global::libopcodes.BfdSection.__Internal*) __Instance)->size;
            }

            set
            {
                ((global::libopcodes.BfdSection.__Internal*)__Instance)->size = value;
            }
        }

        public ulong Rawsize
        {
            get
            {
                return ((global::libopcodes.BfdSection.__Internal*) __Instance)->rawsize;
            }

            set
            {
                ((global::libopcodes.BfdSection.__Internal*)__Instance)->rawsize = value;
            }
        }

        public ulong CompressedSize
        {
            get
            {
                return ((global::libopcodes.BfdSection.__Internal*) __Instance)->compressed_size;
            }

            set
            {
                ((global::libopcodes.BfdSection.__Internal*)__Instance)->compressed_size = value;
            }
        }

        public global::libopcodes.RelaxTable Relax
        {
            get
            {
                global::libopcodes.RelaxTable __result0;
                if (((global::libopcodes.BfdSection.__Internal*) __Instance)->relax == IntPtr.Zero) __result0 = null;
                else if (global::libopcodes.RelaxTable.NativeToManagedMap.ContainsKey(((global::libopcodes.BfdSection.__Internal*) __Instance)->relax))
                    __result0 = (global::libopcodes.RelaxTable) global::libopcodes.RelaxTable.NativeToManagedMap[((global::libopcodes.BfdSection.__Internal*) __Instance)->relax];
                else __result0 = global::libopcodes.RelaxTable.__CreateInstance(((global::libopcodes.BfdSection.__Internal*) __Instance)->relax);
                return __result0;
            }

            set
            {
                ((global::libopcodes.BfdSection.__Internal*)__Instance)->relax = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public int RelaxCount
        {
            get
            {
                return ((global::libopcodes.BfdSection.__Internal*) __Instance)->relax_count;
            }

            set
            {
                ((global::libopcodes.BfdSection.__Internal*)__Instance)->relax_count = value;
            }
        }

        public ulong OutputOffset
        {
            get
            {
                return ((global::libopcodes.BfdSection.__Internal*) __Instance)->output_offset;
            }

            set
            {
                ((global::libopcodes.BfdSection.__Internal*)__Instance)->output_offset = value;
            }
        }

        public global::libopcodes.BfdSection OutputSection
        {
            get
            {
                global::libopcodes.BfdSection __result0;
                if (((global::libopcodes.BfdSection.__Internal*) __Instance)->output_section == IntPtr.Zero) __result0 = null;
                else if (global::libopcodes.BfdSection.NativeToManagedMap.ContainsKey(((global::libopcodes.BfdSection.__Internal*) __Instance)->output_section))
                    __result0 = (global::libopcodes.BfdSection) global::libopcodes.BfdSection.NativeToManagedMap[((global::libopcodes.BfdSection.__Internal*) __Instance)->output_section];
                else __result0 = global::libopcodes.BfdSection.__CreateInstance(((global::libopcodes.BfdSection.__Internal*) __Instance)->output_section);
                return __result0;
            }

            set
            {
                ((global::libopcodes.BfdSection.__Internal*)__Instance)->output_section = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public uint AlignmentPower
        {
            get
            {
                return ((global::libopcodes.BfdSection.__Internal*) __Instance)->alignment_power;
            }

            set
            {
                ((global::libopcodes.BfdSection.__Internal*)__Instance)->alignment_power = value;
            }
        }

        public global::libopcodes.RelocCacheEntry Relocation
        {
            get
            {
                global::libopcodes.RelocCacheEntry __result0;
                if (((global::libopcodes.BfdSection.__Internal*) __Instance)->relocation == IntPtr.Zero) __result0 = null;
                else if (global::libopcodes.RelocCacheEntry.NativeToManagedMap.ContainsKey(((global::libopcodes.BfdSection.__Internal*) __Instance)->relocation))
                    __result0 = (global::libopcodes.RelocCacheEntry) global::libopcodes.RelocCacheEntry.NativeToManagedMap[((global::libopcodes.BfdSection.__Internal*) __Instance)->relocation];
                else __result0 = global::libopcodes.RelocCacheEntry.__CreateInstance(((global::libopcodes.BfdSection.__Internal*) __Instance)->relocation);
                return __result0;
            }

            set
            {
                ((global::libopcodes.BfdSection.__Internal*)__Instance)->relocation = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public global::libopcodes.RelocCacheEntry Orelocation
        {
            get
            {
                global::libopcodes.RelocCacheEntry __result0;
                if (((global::libopcodes.BfdSection.__Internal*) __Instance)->orelocation == IntPtr.Zero) __result0 = null;
                else if (global::libopcodes.RelocCacheEntry.NativeToManagedMap.ContainsKey(((global::libopcodes.BfdSection.__Internal*) __Instance)->orelocation))
                    __result0 = (global::libopcodes.RelocCacheEntry) global::libopcodes.RelocCacheEntry.NativeToManagedMap[((global::libopcodes.BfdSection.__Internal*) __Instance)->orelocation];
                else __result0 = global::libopcodes.RelocCacheEntry.__CreateInstance(((global::libopcodes.BfdSection.__Internal*) __Instance)->orelocation);
                return __result0;
            }

            set
            {
                var __value = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                ((global::libopcodes.BfdSection.__Internal*)__Instance)->orelocation = new global::System.IntPtr(&__value);
            }
        }

        public uint RelocCount
        {
            get
            {
                return ((global::libopcodes.BfdSection.__Internal*) __Instance)->reloc_count;
            }

            set
            {
                ((global::libopcodes.BfdSection.__Internal*)__Instance)->reloc_count = value;
            }
        }

        public long Filepos
        {
            get
            {
                return ((global::libopcodes.BfdSection.__Internal*) __Instance)->filepos;
            }

            set
            {
                ((global::libopcodes.BfdSection.__Internal*)__Instance)->filepos = value;
            }
        }

        public long RelFilepos
        {
            get
            {
                return ((global::libopcodes.BfdSection.__Internal*) __Instance)->rel_filepos;
            }

            set
            {
                ((global::libopcodes.BfdSection.__Internal*)__Instance)->rel_filepos = value;
            }
        }

        public long LineFilepos
        {
            get
            {
                return ((global::libopcodes.BfdSection.__Internal*) __Instance)->line_filepos;
            }

            set
            {
                ((global::libopcodes.BfdSection.__Internal*)__Instance)->line_filepos = value;
            }
        }

        public global::System.IntPtr Userdata
        {
            get
            {
                return ((global::libopcodes.BfdSection.__Internal*) __Instance)->userdata;
            }

            set
            {
                ((global::libopcodes.BfdSection.__Internal*)__Instance)->userdata = (global::System.IntPtr) value;
            }
        }

        public byte* Contents
        {
            get
            {
                return (byte*) ((global::libopcodes.BfdSection.__Internal*) __Instance)->contents;
            }

            set
            {
                ((global::libopcodes.BfdSection.__Internal*)__Instance)->contents = (global::System.IntPtr) value;
            }
        }

        public global::libopcodes.LinenoCacheEntry Lineno
        {
            get
            {
                global::libopcodes.LinenoCacheEntry __result0;
                if (((global::libopcodes.BfdSection.__Internal*) __Instance)->lineno == IntPtr.Zero) __result0 = null;
                else if (global::libopcodes.LinenoCacheEntry.NativeToManagedMap.ContainsKey(((global::libopcodes.BfdSection.__Internal*) __Instance)->lineno))
                    __result0 = (global::libopcodes.LinenoCacheEntry) global::libopcodes.LinenoCacheEntry.NativeToManagedMap[((global::libopcodes.BfdSection.__Internal*) __Instance)->lineno];
                else __result0 = global::libopcodes.LinenoCacheEntry.__CreateInstance(((global::libopcodes.BfdSection.__Internal*) __Instance)->lineno);
                return __result0;
            }

            set
            {
                ((global::libopcodes.BfdSection.__Internal*)__Instance)->lineno = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public uint LinenoCount
        {
            get
            {
                return ((global::libopcodes.BfdSection.__Internal*) __Instance)->lineno_count;
            }

            set
            {
                ((global::libopcodes.BfdSection.__Internal*)__Instance)->lineno_count = value;
            }
        }

        public uint Entsize
        {
            get
            {
                return ((global::libopcodes.BfdSection.__Internal*) __Instance)->entsize;
            }

            set
            {
                ((global::libopcodes.BfdSection.__Internal*)__Instance)->entsize = value;
            }
        }

        public global::libopcodes.BfdSection KeptSection
        {
            get
            {
                global::libopcodes.BfdSection __result0;
                if (((global::libopcodes.BfdSection.__Internal*) __Instance)->kept_section == IntPtr.Zero) __result0 = null;
                else if (global::libopcodes.BfdSection.NativeToManagedMap.ContainsKey(((global::libopcodes.BfdSection.__Internal*) __Instance)->kept_section))
                    __result0 = (global::libopcodes.BfdSection) global::libopcodes.BfdSection.NativeToManagedMap[((global::libopcodes.BfdSection.__Internal*) __Instance)->kept_section];
                else __result0 = global::libopcodes.BfdSection.__CreateInstance(((global::libopcodes.BfdSection.__Internal*) __Instance)->kept_section);
                return __result0;
            }

            set
            {
                ((global::libopcodes.BfdSection.__Internal*)__Instance)->kept_section = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public long MovingLineFilepos
        {
            get
            {
                return ((global::libopcodes.BfdSection.__Internal*) __Instance)->moving_line_filepos;
            }

            set
            {
                ((global::libopcodes.BfdSection.__Internal*)__Instance)->moving_line_filepos = value;
            }
        }

        public int TargetIndex
        {
            get
            {
                return ((global::libopcodes.BfdSection.__Internal*) __Instance)->target_index;
            }

            set
            {
                ((global::libopcodes.BfdSection.__Internal*)__Instance)->target_index = value;
            }
        }

        public global::System.IntPtr UsedByBfd
        {
            get
            {
                return ((global::libopcodes.BfdSection.__Internal*) __Instance)->used_by_bfd;
            }

            set
            {
                ((global::libopcodes.BfdSection.__Internal*)__Instance)->used_by_bfd = (global::System.IntPtr) value;
            }
        }

        public global::libopcodes.RelentChain ConstructorChain
        {
            get
            {
                global::libopcodes.RelentChain __result0;
                if (((global::libopcodes.BfdSection.__Internal*) __Instance)->constructor_chain == IntPtr.Zero) __result0 = null;
                else if (global::libopcodes.RelentChain.NativeToManagedMap.ContainsKey(((global::libopcodes.BfdSection.__Internal*) __Instance)->constructor_chain))
                    __result0 = (global::libopcodes.RelentChain) global::libopcodes.RelentChain.NativeToManagedMap[((global::libopcodes.BfdSection.__Internal*) __Instance)->constructor_chain];
                else __result0 = global::libopcodes.RelentChain.__CreateInstance(((global::libopcodes.BfdSection.__Internal*) __Instance)->constructor_chain);
                return __result0;
            }

            set
            {
                ((global::libopcodes.BfdSection.__Internal*)__Instance)->constructor_chain = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public global::libopcodes.Bfd Owner
        {
            get
            {
                global::libopcodes.Bfd __result0;
                if (((global::libopcodes.BfdSection.__Internal*) __Instance)->owner == IntPtr.Zero) __result0 = null;
                else if (global::libopcodes.Bfd.NativeToManagedMap.ContainsKey(((global::libopcodes.BfdSection.__Internal*) __Instance)->owner))
                    __result0 = (global::libopcodes.Bfd) global::libopcodes.Bfd.NativeToManagedMap[((global::libopcodes.BfdSection.__Internal*) __Instance)->owner];
                else __result0 = global::libopcodes.Bfd.__CreateInstance(((global::libopcodes.BfdSection.__Internal*) __Instance)->owner);
                return __result0;
            }

            set
            {
                ((global::libopcodes.BfdSection.__Internal*)__Instance)->owner = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public global::libopcodes.BfdSymbol Symbol
        {
            get
            {
                global::libopcodes.BfdSymbol __result0;
                if (((global::libopcodes.BfdSection.__Internal*) __Instance)->symbol == IntPtr.Zero) __result0 = null;
                else if (global::libopcodes.BfdSymbol.NativeToManagedMap.ContainsKey(((global::libopcodes.BfdSection.__Internal*) __Instance)->symbol))
                    __result0 = (global::libopcodes.BfdSymbol) global::libopcodes.BfdSymbol.NativeToManagedMap[((global::libopcodes.BfdSection.__Internal*) __Instance)->symbol];
                else __result0 = global::libopcodes.BfdSymbol.__CreateInstance(((global::libopcodes.BfdSection.__Internal*) __Instance)->symbol);
                return __result0;
            }

            set
            {
                ((global::libopcodes.BfdSection.__Internal*)__Instance)->symbol = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public global::libopcodes.BfdSymbol SymbolPtrPtr
        {
            get
            {
                global::libopcodes.BfdSymbol __result0;
                if (((global::libopcodes.BfdSection.__Internal*) __Instance)->symbol_ptr_ptr == IntPtr.Zero) __result0 = null;
                else if (global::libopcodes.BfdSymbol.NativeToManagedMap.ContainsKey(((global::libopcodes.BfdSection.__Internal*) __Instance)->symbol_ptr_ptr))
                    __result0 = (global::libopcodes.BfdSymbol) global::libopcodes.BfdSymbol.NativeToManagedMap[((global::libopcodes.BfdSection.__Internal*) __Instance)->symbol_ptr_ptr];
                else __result0 = global::libopcodes.BfdSymbol.__CreateInstance(((global::libopcodes.BfdSection.__Internal*) __Instance)->symbol_ptr_ptr);
                return __result0;
            }

            set
            {
                var __value = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                ((global::libopcodes.BfdSection.__Internal*)__Instance)->symbol_ptr_ptr = new global::System.IntPtr(&__value);
            }
        }

        public global::libopcodes.BfdSection.MapTail MapHead
        {
            get
            {
                return global::libopcodes.BfdSection.MapTail.__CreateInstance(((global::libopcodes.BfdSection.__Internal*) __Instance)->map_head);
            }

            set
            {
                ((global::libopcodes.BfdSection.__Internal*)__Instance)->map_head = value.__Instance;
            }
        }

        public global::libopcodes.BfdSection.MapTail map_tail
        {
            get
            {
                return global::libopcodes.BfdSection.MapTail.__CreateInstance(((global::libopcodes.BfdSection.__Internal*) __Instance)->map_tail);
            }

            set
            {
                ((global::libopcodes.BfdSection.__Internal*)__Instance)->map_tail = value.__Instance;
            }
        }
    }

    public unsafe partial class RelaxTable : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal ulong addr;

            [FieldOffset(8)]
            internal int size;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0relax_table@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.RelaxTable> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.RelaxTable>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::libopcodes.RelaxTable __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::libopcodes.RelaxTable(native.ToPointer(), skipVTables);
        }

        internal static global::libopcodes.RelaxTable __CreateInstance(global::libopcodes.RelaxTable.__Internal native, bool skipVTables = false)
        {
            return new global::libopcodes.RelaxTable(native, skipVTables);
        }

        private static void* __CopyValue(global::libopcodes.RelaxTable.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::libopcodes.RelaxTable.__Internal));
            *(global::libopcodes.RelaxTable.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private RelaxTable(global::libopcodes.RelaxTable.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected RelaxTable(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public RelaxTable()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::libopcodes.RelaxTable.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public RelaxTable(global::libopcodes.RelaxTable _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::libopcodes.RelaxTable.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::libopcodes.RelaxTable.__Internal*) __Instance) = *((global::libopcodes.RelaxTable.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::libopcodes.RelaxTable __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public ulong Addr
        {
            get
            {
                return ((global::libopcodes.RelaxTable.__Internal*) __Instance)->addr;
            }

            set
            {
                ((global::libopcodes.RelaxTable.__Internal*)__Instance)->addr = value;
            }
        }

        public int Size
        {
            get
            {
                return ((global::libopcodes.RelaxTable.__Internal*) __Instance)->size;
            }

            set
            {
                ((global::libopcodes.RelaxTable.__Internal*)__Instance)->size = value;
            }
        }
    }

    public unsafe partial class BfdArchInfo : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 88)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal int bits_per_word;

            [FieldOffset(4)]
            internal int bits_per_address;

            [FieldOffset(8)]
            internal int bits_per_byte;

            [FieldOffset(12)]
            internal global::libopcodes.BfdArchitecture arch;

            [FieldOffset(16)]
            internal uint mach;

            [FieldOffset(24)]
            internal global::System.IntPtr arch_name;

            [FieldOffset(32)]
            internal global::System.IntPtr printable_name;

            [FieldOffset(40)]
            internal uint section_align_power;

            [FieldOffset(44)]
            internal int the_default;

            [FieldOffset(48)]
            internal global::System.IntPtr compatible;

            [FieldOffset(56)]
            internal global::System.IntPtr scan;

            [FieldOffset(64)]
            internal global::System.IntPtr fill;

            [FieldOffset(72)]
            internal global::System.IntPtr next;

            [FieldOffset(80)]
            internal int max_reloc_offset_into_insn;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0bfd_arch_info@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.BfdArchInfo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.BfdArchInfo>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::libopcodes.BfdArchInfo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::libopcodes.BfdArchInfo(native.ToPointer(), skipVTables);
        }

        internal static global::libopcodes.BfdArchInfo __CreateInstance(global::libopcodes.BfdArchInfo.__Internal native, bool skipVTables = false)
        {
            return new global::libopcodes.BfdArchInfo(native, skipVTables);
        }

        private static void* __CopyValue(global::libopcodes.BfdArchInfo.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::libopcodes.BfdArchInfo.__Internal));
            *(global::libopcodes.BfdArchInfo.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private BfdArchInfo(global::libopcodes.BfdArchInfo.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected BfdArchInfo(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public BfdArchInfo()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::libopcodes.BfdArchInfo.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public BfdArchInfo(global::libopcodes.BfdArchInfo _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::libopcodes.BfdArchInfo.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::libopcodes.BfdArchInfo.__Internal*) __Instance) = *((global::libopcodes.BfdArchInfo.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::libopcodes.BfdArchInfo __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int BitsPerWord
        {
            get
            {
                return ((global::libopcodes.BfdArchInfo.__Internal*) __Instance)->bits_per_word;
            }

            set
            {
                ((global::libopcodes.BfdArchInfo.__Internal*)__Instance)->bits_per_word = value;
            }
        }

        public int BitsPerAddress
        {
            get
            {
                return ((global::libopcodes.BfdArchInfo.__Internal*) __Instance)->bits_per_address;
            }

            set
            {
                ((global::libopcodes.BfdArchInfo.__Internal*)__Instance)->bits_per_address = value;
            }
        }

        public int BitsPerByte
        {
            get
            {
                return ((global::libopcodes.BfdArchInfo.__Internal*) __Instance)->bits_per_byte;
            }

            set
            {
                ((global::libopcodes.BfdArchInfo.__Internal*)__Instance)->bits_per_byte = value;
            }
        }

        public global::libopcodes.BfdArchitecture Arch
        {
            get
            {
                return ((global::libopcodes.BfdArchInfo.__Internal*) __Instance)->arch;
            }

            set
            {
                ((global::libopcodes.BfdArchInfo.__Internal*)__Instance)->arch = value;
            }
        }

        public uint Mach
        {
            get
            {
                return ((global::libopcodes.BfdArchInfo.__Internal*) __Instance)->mach;
            }

            set
            {
                ((global::libopcodes.BfdArchInfo.__Internal*)__Instance)->mach = value;
            }
        }

        public string ArchName
        {
            get
            {
                if (((global::libopcodes.BfdArchInfo.__Internal*) __Instance)->arch_name == global::System.IntPtr.Zero)
                    return default(string);
                var __retPtr = (byte*) ((global::libopcodes.BfdArchInfo.__Internal*) __Instance)->arch_name;
                int __length = 0;
                while (*(__retPtr++) != 0) __length += sizeof(byte);
                return global::System.Text.Encoding.UTF8.GetString((byte*) ((global::libopcodes.BfdArchInfo.__Internal*) __Instance)->arch_name, __length);
            }

            set
            {
                byte[] __bytes0 = global::System.Text.Encoding.UTF8.GetBytes(value);
                fixed (byte* __bytePtr0 = __bytes0)
                {
                    ((global::libopcodes.BfdArchInfo.__Internal*)__Instance)->arch_name = (global::System.IntPtr) new global::System.IntPtr(__bytePtr0);
                }
            }
        }

        public string PrintableName
        {
            get
            {
                if (((global::libopcodes.BfdArchInfo.__Internal*) __Instance)->printable_name == global::System.IntPtr.Zero)
                    return default(string);
                var __retPtr = (byte*) ((global::libopcodes.BfdArchInfo.__Internal*) __Instance)->printable_name;
                int __length = 0;
                while (*(__retPtr++) != 0) __length += sizeof(byte);
                return global::System.Text.Encoding.UTF8.GetString((byte*) ((global::libopcodes.BfdArchInfo.__Internal*) __Instance)->printable_name, __length);
            }

            set
            {
                byte[] __bytes0 = global::System.Text.Encoding.UTF8.GetBytes(value);
                fixed (byte* __bytePtr0 = __bytes0)
                {
                    ((global::libopcodes.BfdArchInfo.__Internal*)__Instance)->printable_name = (global::System.IntPtr) new global::System.IntPtr(__bytePtr0);
                }
            }
        }

        public uint SectionAlignPower
        {
            get
            {
                return ((global::libopcodes.BfdArchInfo.__Internal*) __Instance)->section_align_power;
            }

            set
            {
                ((global::libopcodes.BfdArchInfo.__Internal*)__Instance)->section_align_power = value;
            }
        }

        public int TheDefault
        {
            get
            {
                return ((global::libopcodes.BfdArchInfo.__Internal*) __Instance)->the_default;
            }

            set
            {
                ((global::libopcodes.BfdArchInfo.__Internal*)__Instance)->the_default = value;
            }
        }

        public global::libopcodes.Delegates.Func_IntPtr_IntPtr_IntPtr Compatible
        {
            get
            {
                var __ptr0 = ((global::libopcodes.BfdArchInfo.__Internal*) __Instance)->compatible;
                return __ptr0 == IntPtr.Zero? null : (global::libopcodes.Delegates.Func_IntPtr_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::libopcodes.Delegates.Func_IntPtr_IntPtr_IntPtr));
            }

            set
            {
                ((global::libopcodes.BfdArchInfo.__Internal*)__Instance)->compatible = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::libopcodes.Delegates.Func_int_IntPtr_string Scan
        {
            get
            {
                var __ptr0 = ((global::libopcodes.BfdArchInfo.__Internal*) __Instance)->scan;
                return __ptr0 == IntPtr.Zero? null : (global::libopcodes.Delegates.Func_int_IntPtr_string) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::libopcodes.Delegates.Func_int_IntPtr_string));
            }

            set
            {
                ((global::libopcodes.BfdArchInfo.__Internal*)__Instance)->scan = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::libopcodes.Delegates.Func_IntPtr_ulong_int_int Fill
        {
            get
            {
                var __ptr0 = ((global::libopcodes.BfdArchInfo.__Internal*) __Instance)->fill;
                return __ptr0 == IntPtr.Zero? null : (global::libopcodes.Delegates.Func_IntPtr_ulong_int_int) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::libopcodes.Delegates.Func_IntPtr_ulong_int_int));
            }

            set
            {
                ((global::libopcodes.BfdArchInfo.__Internal*)__Instance)->fill = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::libopcodes.BfdArchInfo Next
        {
            get
            {
                global::libopcodes.BfdArchInfo __result0;
                if (((global::libopcodes.BfdArchInfo.__Internal*) __Instance)->next == IntPtr.Zero) __result0 = null;
                else if (global::libopcodes.BfdArchInfo.NativeToManagedMap.ContainsKey(((global::libopcodes.BfdArchInfo.__Internal*) __Instance)->next))
                    __result0 = (global::libopcodes.BfdArchInfo) global::libopcodes.BfdArchInfo.NativeToManagedMap[((global::libopcodes.BfdArchInfo.__Internal*) __Instance)->next];
                else __result0 = global::libopcodes.BfdArchInfo.__CreateInstance(((global::libopcodes.BfdArchInfo.__Internal*) __Instance)->next);
                return __result0;
            }

            set
            {
                ((global::libopcodes.BfdArchInfo.__Internal*)__Instance)->next = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public int MaxRelocOffsetIntoInsn
        {
            get
            {
                return ((global::libopcodes.BfdArchInfo.__Internal*) __Instance)->max_reloc_offset_into_insn;
            }

            set
            {
                ((global::libopcodes.BfdArchInfo.__Internal*)__Instance)->max_reloc_offset_into_insn = value;
            }
        }
    }

    public unsafe partial class RelocCacheEntry : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 32)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr sym_ptr_ptr;

            [FieldOffset(8)]
            internal ulong address;

            [FieldOffset(16)]
            internal ulong addend;

            [FieldOffset(24)]
            internal global::System.IntPtr howto;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0reloc_cache_entry@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.RelocCacheEntry> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.RelocCacheEntry>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::libopcodes.RelocCacheEntry __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::libopcodes.RelocCacheEntry(native.ToPointer(), skipVTables);
        }

        internal static global::libopcodes.RelocCacheEntry __CreateInstance(global::libopcodes.RelocCacheEntry.__Internal native, bool skipVTables = false)
        {
            return new global::libopcodes.RelocCacheEntry(native, skipVTables);
        }

        private static void* __CopyValue(global::libopcodes.RelocCacheEntry.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::libopcodes.RelocCacheEntry.__Internal));
            *(global::libopcodes.RelocCacheEntry.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private RelocCacheEntry(global::libopcodes.RelocCacheEntry.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected RelocCacheEntry(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public RelocCacheEntry()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::libopcodes.RelocCacheEntry.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public RelocCacheEntry(global::libopcodes.RelocCacheEntry _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::libopcodes.RelocCacheEntry.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::libopcodes.RelocCacheEntry.__Internal*) __Instance) = *((global::libopcodes.RelocCacheEntry.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::libopcodes.RelocCacheEntry __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::libopcodes.BfdSymbol SymPtrPtr
        {
            get
            {
                global::libopcodes.BfdSymbol __result0;
                if (((global::libopcodes.RelocCacheEntry.__Internal*) __Instance)->sym_ptr_ptr == IntPtr.Zero) __result0 = null;
                else if (global::libopcodes.BfdSymbol.NativeToManagedMap.ContainsKey(((global::libopcodes.RelocCacheEntry.__Internal*) __Instance)->sym_ptr_ptr))
                    __result0 = (global::libopcodes.BfdSymbol) global::libopcodes.BfdSymbol.NativeToManagedMap[((global::libopcodes.RelocCacheEntry.__Internal*) __Instance)->sym_ptr_ptr];
                else __result0 = global::libopcodes.BfdSymbol.__CreateInstance(((global::libopcodes.RelocCacheEntry.__Internal*) __Instance)->sym_ptr_ptr);
                return __result0;
            }

            set
            {
                var __value = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                ((global::libopcodes.RelocCacheEntry.__Internal*)__Instance)->sym_ptr_ptr = new global::System.IntPtr(&__value);
            }
        }

        public ulong Address
        {
            get
            {
                return ((global::libopcodes.RelocCacheEntry.__Internal*) __Instance)->address;
            }

            set
            {
                ((global::libopcodes.RelocCacheEntry.__Internal*)__Instance)->address = value;
            }
        }

        public ulong Addend
        {
            get
            {
                return ((global::libopcodes.RelocCacheEntry.__Internal*) __Instance)->addend;
            }

            set
            {
                ((global::libopcodes.RelocCacheEntry.__Internal*)__Instance)->addend = value;
            }
        }

        public global::libopcodes.RelocHowtoStruct Howto
        {
            get
            {
                global::libopcodes.RelocHowtoStruct __result0;
                if (((global::libopcodes.RelocCacheEntry.__Internal*) __Instance)->howto == IntPtr.Zero) __result0 = null;
                else if (global::libopcodes.RelocHowtoStruct.NativeToManagedMap.ContainsKey(((global::libopcodes.RelocCacheEntry.__Internal*) __Instance)->howto))
                    __result0 = (global::libopcodes.RelocHowtoStruct) global::libopcodes.RelocHowtoStruct.NativeToManagedMap[((global::libopcodes.RelocCacheEntry.__Internal*) __Instance)->howto];
                else __result0 = global::libopcodes.RelocHowtoStruct.__CreateInstance(((global::libopcodes.RelocCacheEntry.__Internal*) __Instance)->howto);
                return __result0;
            }

            set
            {
                ((global::libopcodes.RelocCacheEntry.__Internal*)__Instance)->howto = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }
    }

    public unsafe partial class RelocHowtoStruct : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 40)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint type;

            [FieldOffset(4)]
            internal uint size;

            [FieldOffset(4)]
            internal uint bitsize;

            [FieldOffset(5)]
            internal uint rightshift;

            [FieldOffset(6)]
            internal uint bitpos;

            [FieldOffset(6)]
            internal global::libopcodes.ComplainOverflow complain_on_overflow;

            [FieldOffset(7)]
            internal uint negate;

            [FieldOffset(7)]
            internal uint pc_relative;

            [FieldOffset(7)]
            internal uint partial_inplace;

            [FieldOffset(7)]
            internal uint pcrel_offset;

            [FieldOffset(8)]
            internal ulong src_mask;

            [FieldOffset(16)]
            internal ulong dst_mask;

            [FieldOffset(24)]
            internal global::System.IntPtr special_function;

            [FieldOffset(32)]
            internal global::System.IntPtr name;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0reloc_howto_struct@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.RelocHowtoStruct> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.RelocHowtoStruct>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::libopcodes.RelocHowtoStruct __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::libopcodes.RelocHowtoStruct(native.ToPointer(), skipVTables);
        }

        internal static global::libopcodes.RelocHowtoStruct __CreateInstance(global::libopcodes.RelocHowtoStruct.__Internal native, bool skipVTables = false)
        {
            return new global::libopcodes.RelocHowtoStruct(native, skipVTables);
        }

        private static void* __CopyValue(global::libopcodes.RelocHowtoStruct.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::libopcodes.RelocHowtoStruct.__Internal));
            *(global::libopcodes.RelocHowtoStruct.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private RelocHowtoStruct(global::libopcodes.RelocHowtoStruct.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected RelocHowtoStruct(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public RelocHowtoStruct()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::libopcodes.RelocHowtoStruct.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public RelocHowtoStruct(global::libopcodes.RelocHowtoStruct _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::libopcodes.RelocHowtoStruct.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::libopcodes.RelocHowtoStruct.__Internal*) __Instance) = *((global::libopcodes.RelocHowtoStruct.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::libopcodes.RelocHowtoStruct __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint Type
        {
            get
            {
                return ((global::libopcodes.RelocHowtoStruct.__Internal*) __Instance)->type;
            }

            set
            {
                ((global::libopcodes.RelocHowtoStruct.__Internal*)__Instance)->type = value;
            }
        }

        public uint Size
        {
            get
            {
                return ((global::libopcodes.RelocHowtoStruct.__Internal*) __Instance)->size;
            }

            set
            {
                ((global::libopcodes.RelocHowtoStruct.__Internal*)__Instance)->size = value;
            }
        }

        public uint Bitsize
        {
            get
            {
                return ((global::libopcodes.RelocHowtoStruct.__Internal*) __Instance)->bitsize;
            }

            set
            {
                ((global::libopcodes.RelocHowtoStruct.__Internal*)__Instance)->bitsize = value;
            }
        }

        public uint Rightshift
        {
            get
            {
                return ((global::libopcodes.RelocHowtoStruct.__Internal*) __Instance)->rightshift;
            }

            set
            {
                ((global::libopcodes.RelocHowtoStruct.__Internal*)__Instance)->rightshift = value;
            }
        }

        public uint Bitpos
        {
            get
            {
                return ((global::libopcodes.RelocHowtoStruct.__Internal*) __Instance)->bitpos;
            }

            set
            {
                ((global::libopcodes.RelocHowtoStruct.__Internal*)__Instance)->bitpos = value;
            }
        }

        public global::libopcodes.ComplainOverflow ComplainOnOverflow
        {
            get
            {
                return ((global::libopcodes.RelocHowtoStruct.__Internal*) __Instance)->complain_on_overflow;
            }

            set
            {
                ((global::libopcodes.RelocHowtoStruct.__Internal*)__Instance)->complain_on_overflow = value;
            }
        }

        public uint Negate
        {
            get
            {
                return ((global::libopcodes.RelocHowtoStruct.__Internal*) __Instance)->negate;
            }

            set
            {
                ((global::libopcodes.RelocHowtoStruct.__Internal*)__Instance)->negate = value;
            }
        }

        public uint PcRelative
        {
            get
            {
                return ((global::libopcodes.RelocHowtoStruct.__Internal*) __Instance)->pc_relative;
            }

            set
            {
                ((global::libopcodes.RelocHowtoStruct.__Internal*)__Instance)->pc_relative = value;
            }
        }

        public uint PartialInplace
        {
            get
            {
                return ((global::libopcodes.RelocHowtoStruct.__Internal*) __Instance)->partial_inplace;
            }

            set
            {
                ((global::libopcodes.RelocHowtoStruct.__Internal*)__Instance)->partial_inplace = value;
            }
        }

        public uint PcrelOffset
        {
            get
            {
                return ((global::libopcodes.RelocHowtoStruct.__Internal*) __Instance)->pcrel_offset;
            }

            set
            {
                ((global::libopcodes.RelocHowtoStruct.__Internal*)__Instance)->pcrel_offset = value;
            }
        }

        public ulong SrcMask
        {
            get
            {
                return ((global::libopcodes.RelocHowtoStruct.__Internal*) __Instance)->src_mask;
            }

            set
            {
                ((global::libopcodes.RelocHowtoStruct.__Internal*)__Instance)->src_mask = value;
            }
        }

        public ulong DstMask
        {
            get
            {
                return ((global::libopcodes.RelocHowtoStruct.__Internal*) __Instance)->dst_mask;
            }

            set
            {
                ((global::libopcodes.RelocHowtoStruct.__Internal*)__Instance)->dst_mask = value;
            }
        }

        public global::libopcodes.Delegates.Func_libopcodes_bfd_reloc_status_IntPtr_IntPtr_IntPtr_IntPtr_IntPtr_IntPtr_sbytePtrPtr SpecialFunction
        {
            get
            {
                var __ptr0 = ((global::libopcodes.RelocHowtoStruct.__Internal*) __Instance)->special_function;
                return __ptr0 == IntPtr.Zero? null : (global::libopcodes.Delegates.Func_libopcodes_bfd_reloc_status_IntPtr_IntPtr_IntPtr_IntPtr_IntPtr_IntPtr_sbytePtrPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::libopcodes.Delegates.Func_libopcodes_bfd_reloc_status_IntPtr_IntPtr_IntPtr_IntPtr_IntPtr_IntPtr_sbytePtrPtr));
            }

            set
            {
                ((global::libopcodes.RelocHowtoStruct.__Internal*)__Instance)->special_function = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public string Name
        {
            get
            {
                if (((global::libopcodes.RelocHowtoStruct.__Internal*) __Instance)->name == global::System.IntPtr.Zero)
                    return default(string);
                var __retPtr = (byte*) ((global::libopcodes.RelocHowtoStruct.__Internal*) __Instance)->name;
                int __length = 0;
                while (*(__retPtr++) != 0) __length += sizeof(byte);
                return global::System.Text.Encoding.UTF8.GetString((byte*) ((global::libopcodes.RelocHowtoStruct.__Internal*) __Instance)->name, __length);
            }

            set
            {
                byte[] __bytes0 = global::System.Text.Encoding.UTF8.GetBytes(value);
                fixed (byte* __bytePtr0 = __bytes0)
                {
                    ((global::libopcodes.RelocHowtoStruct.__Internal*)__Instance)->name = (global::System.IntPtr) new global::System.IntPtr(__bytePtr0);
                }
            }
        }
    }

    public unsafe partial class RelentChain : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 40)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::libopcodes.RelocCacheEntry.__Internal relent;

            [FieldOffset(32)]
            internal global::System.IntPtr next;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0relent_chain@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.RelentChain> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.RelentChain>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::libopcodes.RelentChain __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::libopcodes.RelentChain(native.ToPointer(), skipVTables);
        }

        internal static global::libopcodes.RelentChain __CreateInstance(global::libopcodes.RelentChain.__Internal native, bool skipVTables = false)
        {
            return new global::libopcodes.RelentChain(native, skipVTables);
        }

        private static void* __CopyValue(global::libopcodes.RelentChain.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::libopcodes.RelentChain.__Internal));
            *(global::libopcodes.RelentChain.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private RelentChain(global::libopcodes.RelentChain.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected RelentChain(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public RelentChain()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::libopcodes.RelentChain.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public RelentChain(global::libopcodes.RelentChain _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::libopcodes.RelentChain.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::libopcodes.RelentChain.__Internal*) __Instance) = *((global::libopcodes.RelentChain.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::libopcodes.RelentChain __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::libopcodes.RelocCacheEntry Relent
        {
            get
            {
                return global::libopcodes.RelocCacheEntry.__CreateInstance(new global::System.IntPtr(&((global::libopcodes.RelentChain.__Internal*) __Instance)->relent));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::libopcodes.RelentChain.__Internal*)__Instance)->relent = *(global::libopcodes.RelocCacheEntry.__Internal*) value.__Instance;
            }
        }

        public global::libopcodes.RelentChain Next
        {
            get
            {
                global::libopcodes.RelentChain __result0;
                if (((global::libopcodes.RelentChain.__Internal*) __Instance)->next == IntPtr.Zero) __result0 = null;
                else if (global::libopcodes.RelentChain.NativeToManagedMap.ContainsKey(((global::libopcodes.RelentChain.__Internal*) __Instance)->next))
                    __result0 = (global::libopcodes.RelentChain) global::libopcodes.RelentChain.NativeToManagedMap[((global::libopcodes.RelentChain.__Internal*) __Instance)->next];
                else __result0 = global::libopcodes.RelentChain.__CreateInstance(((global::libopcodes.RelentChain.__Internal*) __Instance)->next);
                return __result0;
            }

            set
            {
                ((global::libopcodes.RelentChain.__Internal*)__Instance)->next = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }
    }

    public unsafe partial class BfdSymbol : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 48)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr the_bfd;

            [FieldOffset(8)]
            internal global::System.IntPtr name;

            [FieldOffset(16)]
            internal ulong value;

            [FieldOffset(24)]
            internal uint flags;

            [FieldOffset(32)]
            internal global::System.IntPtr section;

            [FieldOffset(40)]
            internal global::libopcodes.BfdSymbol.Udata.__Internal udata;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0bfd_symbol@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public unsafe partial struct Udata
        {
            [StructLayout(LayoutKind.Explicit, Size = 8)]
            public partial struct __Internal
            {
                [FieldOffset(0)]
                internal global::System.IntPtr p;

                [FieldOffset(0)]
                internal ulong i;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="??0<unnamed-type-udata>@bfd_symbol@@QEAA@AEBT01@@Z")]
                internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
            }

            private Udata.__Internal __instance;
            internal Udata.__Internal __Instance { get { return __instance; } }

            internal static global::libopcodes.BfdSymbol.Udata __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new global::libopcodes.BfdSymbol.Udata(native.ToPointer(), skipVTables);
            }

            internal static global::libopcodes.BfdSymbol.Udata __CreateInstance(global::libopcodes.BfdSymbol.Udata.__Internal native, bool skipVTables = false)
            {
                return new global::libopcodes.BfdSymbol.Udata(native, skipVTables);
            }

            private Udata(global::libopcodes.BfdSymbol.Udata.__Internal native, bool skipVTables = false)
                : this()
            {
                __instance = native;
            }

            private Udata(void* native, bool skipVTables = false) : this()
            {
                __instance = *(global::libopcodes.BfdSymbol.Udata.__Internal*) native;
            }

            public Udata(global::libopcodes.BfdSymbol.Udata _0)
                : this()
            {
                var ____arg0 = _0.__Instance;
                var __arg0 = new global::System.IntPtr(&____arg0);
                fixed (__Internal* __instancePtr = &__instance)
                {
                    __Internal.cctor(new global::System.IntPtr(__instancePtr), __arg0);
                }
            }

            public global::System.IntPtr P
            {
                get
                {
                    return __instance.p;
                }

                set
                {
                    __instance.p = (global::System.IntPtr) value;
                }
            }

            public ulong I
            {
                get
                {
                    return __instance.i;
                }

                set
                {
                    __instance.i = value;
                }
            }
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.BfdSymbol> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.BfdSymbol>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::libopcodes.BfdSymbol __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::libopcodes.BfdSymbol(native.ToPointer(), skipVTables);
        }

        internal static global::libopcodes.BfdSymbol __CreateInstance(global::libopcodes.BfdSymbol.__Internal native, bool skipVTables = false)
        {
            return new global::libopcodes.BfdSymbol(native, skipVTables);
        }

        private static void* __CopyValue(global::libopcodes.BfdSymbol.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::libopcodes.BfdSymbol.__Internal));
            *(global::libopcodes.BfdSymbol.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private BfdSymbol(global::libopcodes.BfdSymbol.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected BfdSymbol(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public BfdSymbol()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::libopcodes.BfdSymbol.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public BfdSymbol(global::libopcodes.BfdSymbol _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::libopcodes.BfdSymbol.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::libopcodes.BfdSymbol.__Internal*) __Instance) = *((global::libopcodes.BfdSymbol.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::libopcodes.BfdSymbol __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::libopcodes.Bfd TheBfd
        {
            get
            {
                global::libopcodes.Bfd __result0;
                if (((global::libopcodes.BfdSymbol.__Internal*) __Instance)->the_bfd == IntPtr.Zero) __result0 = null;
                else if (global::libopcodes.Bfd.NativeToManagedMap.ContainsKey(((global::libopcodes.BfdSymbol.__Internal*) __Instance)->the_bfd))
                    __result0 = (global::libopcodes.Bfd) global::libopcodes.Bfd.NativeToManagedMap[((global::libopcodes.BfdSymbol.__Internal*) __Instance)->the_bfd];
                else __result0 = global::libopcodes.Bfd.__CreateInstance(((global::libopcodes.BfdSymbol.__Internal*) __Instance)->the_bfd);
                return __result0;
            }

            set
            {
                ((global::libopcodes.BfdSymbol.__Internal*)__Instance)->the_bfd = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public string Name
        {
            get
            {
                if (((global::libopcodes.BfdSymbol.__Internal*) __Instance)->name == global::System.IntPtr.Zero)
                    return default(string);
                var __retPtr = (byte*) ((global::libopcodes.BfdSymbol.__Internal*) __Instance)->name;
                int __length = 0;
                while (*(__retPtr++) != 0) __length += sizeof(byte);
                return global::System.Text.Encoding.UTF8.GetString((byte*) ((global::libopcodes.BfdSymbol.__Internal*) __Instance)->name, __length);
            }

            set
            {
                byte[] __bytes0 = global::System.Text.Encoding.UTF8.GetBytes(value);
                fixed (byte* __bytePtr0 = __bytes0)
                {
                    ((global::libopcodes.BfdSymbol.__Internal*)__Instance)->name = (global::System.IntPtr) new global::System.IntPtr(__bytePtr0);
                }
            }
        }

        public ulong Value
        {
            get
            {
                return ((global::libopcodes.BfdSymbol.__Internal*) __Instance)->value;
            }

            set
            {
                ((global::libopcodes.BfdSymbol.__Internal*)__Instance)->value = value;
            }
        }

        public uint Flags
        {
            get
            {
                return ((global::libopcodes.BfdSymbol.__Internal*) __Instance)->flags;
            }

            set
            {
                ((global::libopcodes.BfdSymbol.__Internal*)__Instance)->flags = value;
            }
        }

        public global::libopcodes.BfdSection Section
        {
            get
            {
                global::libopcodes.BfdSection __result0;
                if (((global::libopcodes.BfdSymbol.__Internal*) __Instance)->section == IntPtr.Zero) __result0 = null;
                else if (global::libopcodes.BfdSection.NativeToManagedMap.ContainsKey(((global::libopcodes.BfdSymbol.__Internal*) __Instance)->section))
                    __result0 = (global::libopcodes.BfdSection) global::libopcodes.BfdSection.NativeToManagedMap[((global::libopcodes.BfdSymbol.__Internal*) __Instance)->section];
                else __result0 = global::libopcodes.BfdSection.__CreateInstance(((global::libopcodes.BfdSymbol.__Internal*) __Instance)->section);
                return __result0;
            }

            set
            {
                ((global::libopcodes.BfdSymbol.__Internal*)__Instance)->section = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public global::libopcodes.BfdSymbol.Udata udata
        {
            get
            {
                return global::libopcodes.BfdSymbol.Udata.__CreateInstance(((global::libopcodes.BfdSymbol.__Internal*) __Instance)->udata);
            }

            set
            {
                ((global::libopcodes.BfdSymbol.__Internal*)__Instance)->udata = value.__Instance;
            }
        }
    }

    public unsafe partial class BfdBuildId : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal ulong size;

            [FieldOffset(8)]
            internal fixed byte data[1];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0bfd_build_id@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.BfdBuildId> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.BfdBuildId>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::libopcodes.BfdBuildId __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::libopcodes.BfdBuildId(native.ToPointer(), skipVTables);
        }

        internal static global::libopcodes.BfdBuildId __CreateInstance(global::libopcodes.BfdBuildId.__Internal native, bool skipVTables = false)
        {
            return new global::libopcodes.BfdBuildId(native, skipVTables);
        }

        private static void* __CopyValue(global::libopcodes.BfdBuildId.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::libopcodes.BfdBuildId.__Internal));
            *(global::libopcodes.BfdBuildId.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private BfdBuildId(global::libopcodes.BfdBuildId.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected BfdBuildId(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public BfdBuildId()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::libopcodes.BfdBuildId.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public BfdBuildId(global::libopcodes.BfdBuildId _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::libopcodes.BfdBuildId.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::libopcodes.BfdBuildId.__Internal*) __Instance) = *((global::libopcodes.BfdBuildId.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::libopcodes.BfdBuildId __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public ulong Size
        {
            get
            {
                return ((global::libopcodes.BfdBuildId.__Internal*) __Instance)->size;
            }

            set
            {
                ((global::libopcodes.BfdBuildId.__Internal*)__Instance)->size = value;
            }
        }

        public byte[] Data
        {
            get
            {
                byte[] __value = null;
                if (((global::libopcodes.BfdBuildId.__Internal*) __Instance)->data != null)
                {
                    __value = new byte[1];
                    for (int i = 0; i < 1; i++)
                        __value[i] = ((global::libopcodes.BfdBuildId.__Internal*) __Instance)->data[i];
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 1; i++)
                        ((global::libopcodes.BfdBuildId.__Internal*)__Instance)->data[i] = value[i];
                }
            }
        }
    }

    public unsafe partial class Bfd : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 280)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr filename;

            [FieldOffset(8)]
            internal global::System.IntPtr xvec;

            [FieldOffset(16)]
            internal global::System.IntPtr iostream;

            [FieldOffset(24)]
            internal global::System.IntPtr iovec;

            [FieldOffset(32)]
            internal global::System.IntPtr lru_prev;

            [FieldOffset(40)]
            internal global::System.IntPtr lru_next;

            [FieldOffset(48)]
            internal ulong @where;

            [FieldOffset(56)]
            internal int mtime;

            [FieldOffset(60)]
            internal uint id;

            [FieldOffset(64)]
            internal global::libopcodes.BfdFormat format;

            [FieldOffset(64)]
            internal global::libopcodes.BfdDirection direction;

            [FieldOffset(68)]
            internal uint flags;

            [FieldOffset(72)]
            internal uint cacheable;

            [FieldOffset(72)]
            internal uint target_defaulted;

            [FieldOffset(72)]
            internal uint opened_once;

            [FieldOffset(72)]
            internal uint mtime_set;

            [FieldOffset(72)]
            internal uint no_export;

            [FieldOffset(72)]
            internal uint output_has_begun;

            [FieldOffset(72)]
            internal uint has_armap;

            [FieldOffset(72)]
            internal uint is_thin_archive;

            [FieldOffset(73)]
            internal uint no_element_cache;

            [FieldOffset(73)]
            internal uint selective_search;

            [FieldOffset(73)]
            internal uint is_linker_output;

            [FieldOffset(73)]
            internal uint is_linker_input;

            [FieldOffset(73)]
            internal global::libopcodes.BfdPluginFormat plugin_format;

            [FieldOffset(73)]
            internal uint lto_output;

            [FieldOffset(73)]
            internal uint lto_slim_object;

            [FieldOffset(80)]
            internal global::System.IntPtr plugin_dummy_bfd;

            [FieldOffset(88)]
            internal ulong origin;

            [FieldOffset(96)]
            internal ulong proxy_origin;

            [FieldOffset(104)]
            internal global::libopcodes.BfdHashTable.__Internal section_htab;

            [FieldOffset(144)]
            internal global::System.IntPtr sections;

            [FieldOffset(152)]
            internal global::System.IntPtr section_last;

            [FieldOffset(160)]
            internal uint section_count;

            [FieldOffset(164)]
            internal int archive_pass;

            [FieldOffset(168)]
            internal ulong start_address;

            [FieldOffset(176)]
            internal global::System.IntPtr outsymbols;

            [FieldOffset(184)]
            internal uint symcount;

            [FieldOffset(188)]
            internal uint dynsymcount;

            [FieldOffset(192)]
            internal global::System.IntPtr arch_info;

            [FieldOffset(200)]
            internal global::System.IntPtr arelt_data;

            [FieldOffset(208)]
            internal global::System.IntPtr my_archive;

            [FieldOffset(216)]
            internal global::System.IntPtr archive_next;

            [FieldOffset(224)]
            internal global::System.IntPtr archive_head;

            [FieldOffset(232)]
            internal global::System.IntPtr nested_archives;

            [FieldOffset(240)]
            internal global::libopcodes.Bfd.Link.__Internal link;

            [FieldOffset(248)]
            internal global::libopcodes.Bfd.Tdata.__Internal tdata;

            [FieldOffset(256)]
            internal global::System.IntPtr usrdata;

            [FieldOffset(264)]
            internal global::System.IntPtr memory;

            [FieldOffset(272)]
            internal global::System.IntPtr build_id;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0bfd@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_sprintf_vma")]
            internal static extern void BfdSprintfVma(global::System.IntPtr _0, sbyte* _1, ulong _2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_fprintf_vma")]
            internal static extern void BfdFprintfVma(global::System.IntPtr _0, global::System.IntPtr _1, ulong _2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_get_stab_name")]
            internal static extern global::System.IntPtr BfdGetStabName(int _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_hash_table_init")]
            internal static extern int BfdHashTableInit(global::System.IntPtr _0, global::System.IntPtr _1, uint _2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_hash_table_init_n")]
            internal static extern int BfdHashTableInitN(global::System.IntPtr _0, global::System.IntPtr _1, uint _2, uint _3);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_hash_table_free")]
            internal static extern void BfdHashTableFree(global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_hash_lookup")]
            internal static extern global::System.IntPtr BfdHashLookup(global::System.IntPtr _0, [MarshalAs(UnmanagedType.LPUTF8Str)] string _1, int create, int copy);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_hash_insert")]
            internal static extern global::System.IntPtr BfdHashInsert(global::System.IntPtr _0, [MarshalAs(UnmanagedType.LPUTF8Str)] string _1, uint _2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_hash_rename")]
            internal static extern void BfdHashRename(global::System.IntPtr _0, [MarshalAs(UnmanagedType.LPUTF8Str)] string _1, global::System.IntPtr _2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_hash_replace")]
            internal static extern void BfdHashReplace(global::System.IntPtr _0, global::System.IntPtr old, global::System.IntPtr nw);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_hash_newfunc")]
            internal static extern global::System.IntPtr BfdHashNewfunc(global::System.IntPtr _0, global::System.IntPtr _1, [MarshalAs(UnmanagedType.LPUTF8Str)] string _2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_hash_allocate")]
            internal static extern global::System.IntPtr BfdHashAllocate(global::System.IntPtr _0, uint _1);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_hash_traverse")]
            internal static extern void BfdHashTraverse(global::System.IntPtr _0, global::System.IntPtr _1, global::System.IntPtr info);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_hash_set_default_size")]
            internal static extern uint BfdHashSetDefaultSize(uint _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_bread")]
            internal static extern ulong BfdBread(global::System.IntPtr _0, ulong _1, global::System.IntPtr _2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_bwrite")]
            internal static extern ulong BfdBwrite(global::System.IntPtr _0, ulong _1, global::System.IntPtr _2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_seek")]
            internal static extern int BfdSeek(global::System.IntPtr _0, long _1, int _2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_tell")]
            internal static extern long BfdTell(global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_flush")]
            internal static extern int BfdFlush(global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_bfd_warn_deprecated")]
            internal static extern void BfdWarnDeprecated([MarshalAs(UnmanagedType.LPUTF8Str)] string _0, [MarshalAs(UnmanagedType.LPUTF8Str)] string _1, int _2, [MarshalAs(UnmanagedType.LPUTF8Str)] string _3);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_cache_close")]
            internal static extern int BfdCacheClose(global::System.IntPtr abfd);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_record_phdr")]
            internal static extern int BfdRecordPhdr(global::System.IntPtr _0, uint _1, int _2, uint _3, int _4, ulong _5, int _6, int _7, uint _8, global::System.IntPtr _9);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_getb64")]
            internal static extern ulong BfdGetb64(global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_getl64")]
            internal static extern ulong BfdGetl64(global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_getb_signed_64")]
            internal static extern long BfdGetbSigned64(global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_getl_signed_64")]
            internal static extern long BfdGetlSigned64(global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_getb32")]
            internal static extern ulong BfdGetb32(global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_getl32")]
            internal static extern ulong BfdGetl32(global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_getb_signed_32")]
            internal static extern long BfdGetbSigned32(global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_getl_signed_32")]
            internal static extern long BfdGetlSigned32(global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_getb16")]
            internal static extern ulong BfdGetb16(global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_getl16")]
            internal static extern ulong BfdGetl16(global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_getb_signed_16")]
            internal static extern long BfdGetbSigned16(global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_getl_signed_16")]
            internal static extern long BfdGetlSigned16(global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_putb64")]
            internal static extern void BfdPutb64(ulong _0, global::System.IntPtr _1);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_putl64")]
            internal static extern void BfdPutl64(ulong _0, global::System.IntPtr _1);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_putb32")]
            internal static extern void BfdPutb32(ulong _0, global::System.IntPtr _1);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_putl32")]
            internal static extern void BfdPutl32(ulong _0, global::System.IntPtr _1);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_putb24")]
            internal static extern void BfdPutb24(ulong _0, global::System.IntPtr _1);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_putl24")]
            internal static extern void BfdPutl24(ulong _0, global::System.IntPtr _1);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_putb16")]
            internal static extern void BfdPutb16(ulong _0, global::System.IntPtr _1);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_putl16")]
            internal static extern void BfdPutl16(ulong _0, global::System.IntPtr _1);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_get_bits")]
            internal static extern ulong BfdGetBits(global::System.IntPtr _0, int _1, int _2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_put_bits")]
            internal static extern void BfdPutBits(ulong _0, global::System.IntPtr _1, int _2, int _3);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_init_window")]
            internal static extern void BfdInitWindow(global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_free_window")]
            internal static extern void BfdFreeWindow(global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_get_file_window")]
            internal static extern int BfdGetFileWindow(global::System.IntPtr _0, long _1, ulong _2, global::System.IntPtr _3, int _4);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_elf_bfd_from_remote_memory")]
            internal static extern global::System.IntPtr BfdElfBfdFromRemoteMemory(global::System.IntPtr templ, ulong ehdr_vma, ulong size, ulong* loadbasep, global::System.IntPtr target_read_memory);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_fopen")]
            internal static extern global::System.IntPtr BfdFopen([MarshalAs(UnmanagedType.LPUTF8Str)] string filename, [MarshalAs(UnmanagedType.LPUTF8Str)] string target, [MarshalAs(UnmanagedType.LPUTF8Str)] string mode, int fd);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_openr")]
            internal static extern global::System.IntPtr BfdOpenr([MarshalAs(UnmanagedType.LPUTF8Str)] string filename, [MarshalAs(UnmanagedType.LPUTF8Str)] string target);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_fdopenr")]
            internal static extern global::System.IntPtr BfdFdopenr([MarshalAs(UnmanagedType.LPUTF8Str)] string filename, [MarshalAs(UnmanagedType.LPUTF8Str)] string target, int fd);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_openstreamr")]
            internal static extern global::System.IntPtr BfdOpenstreamr([MarshalAs(UnmanagedType.LPUTF8Str)] string filename, [MarshalAs(UnmanagedType.LPUTF8Str)] string target, global::System.IntPtr stream);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_openw")]
            internal static extern global::System.IntPtr BfdOpenw([MarshalAs(UnmanagedType.LPUTF8Str)] string filename, [MarshalAs(UnmanagedType.LPUTF8Str)] string target);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_close")]
            internal static extern int BfdClose(global::System.IntPtr abfd);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_close_all_done")]
            internal static extern int BfdCloseAllDone(global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_create")]
            internal static extern global::System.IntPtr BfdCreate([MarshalAs(UnmanagedType.LPUTF8Str)] string filename, global::System.IntPtr templ);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_make_writable")]
            internal static extern int BfdMakeWritable(global::System.IntPtr abfd);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_make_readable")]
            internal static extern int BfdMakeReadable(global::System.IntPtr abfd);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_alloc")]
            internal static extern global::System.IntPtr BfdAlloc(global::System.IntPtr abfd, ulong wanted);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_zalloc")]
            internal static extern global::System.IntPtr BfdZalloc(global::System.IntPtr abfd, ulong wanted);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_calc_gnu_debuglink_crc32")]
            internal static extern uint BfdCalcGnuDebuglinkCrc32(uint crc, byte* buf, ulong len);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_get_debug_link_info")]
            internal static extern sbyte* BfdGetDebugLinkInfo(global::System.IntPtr abfd, uint* crc32_out);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_get_alt_debug_link_info")]
            internal static extern sbyte* BfdGetAltDebugLinkInfo(global::System.IntPtr abfd, ulong* buildid_len, byte** buildid_out);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_follow_gnu_debuglink")]
            internal static extern sbyte* BfdFollowGnuDebuglink(global::System.IntPtr abfd, [MarshalAs(UnmanagedType.LPUTF8Str)] string dir);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_follow_gnu_debugaltlink")]
            internal static extern sbyte* BfdFollowGnuDebugaltlink(global::System.IntPtr abfd, [MarshalAs(UnmanagedType.LPUTF8Str)] string dir);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_create_gnu_debuglink_section")]
            internal static extern global::System.IntPtr BfdCreateGnuDebuglinkSection(global::System.IntPtr abfd, [MarshalAs(UnmanagedType.LPUTF8Str)] string filename);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_fill_in_gnu_debuglink_section")]
            internal static extern int BfdFillInGnuDebuglinkSection(global::System.IntPtr abfd, global::System.IntPtr sect, [MarshalAs(UnmanagedType.LPUTF8Str)] string filename);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_follow_build_id_debuglink")]
            internal static extern sbyte* BfdFollowBuildIdDebuglink(global::System.IntPtr abfd, [MarshalAs(UnmanagedType.LPUTF8Str)] string dir);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_set_filename")]
            internal static extern void BfdSetFilename(global::System.IntPtr abfd, sbyte* filename);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_getb24")]
            internal static extern ulong BfdGetb24(global::System.IntPtr p);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_getl24")]
            internal static extern ulong BfdGetl24(global::System.IntPtr p);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_get_mtime")]
            internal static extern int BfdGetMtime(global::System.IntPtr abfd);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_get_size")]
            internal static extern ulong BfdGetSize(global::System.IntPtr abfd);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_get_file_size")]
            internal static extern ulong BfdGetFileSize(global::System.IntPtr abfd);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_mmap")]
            internal static extern global::System.IntPtr BfdMmap(global::System.IntPtr abfd, global::System.IntPtr addr, ulong len, int prot, int flags, long offset, void** map_addr, ulong* map_len);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?bfd_section_name@@YAPEBDPEBUbfd_section@@@Z")]
            internal static extern global::System.IntPtr BfdSectionName(global::System.IntPtr sec);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?bfd_section_size@@YA_KPEBUbfd_section@@@Z")]
            internal static extern ulong BfdSectionSize(global::System.IntPtr sec);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?bfd_section_vma@@YA_KPEBUbfd_section@@@Z")]
            internal static extern ulong BfdSectionVma(global::System.IntPtr sec);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?bfd_section_lma@@YA_KPEBUbfd_section@@@Z")]
            internal static extern ulong BfdSectionLma(global::System.IntPtr sec);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?bfd_section_alignment@@YAIPEBUbfd_section@@@Z")]
            internal static extern uint BfdSectionAlignment(global::System.IntPtr sec);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?bfd_section_flags@@YAIPEBUbfd_section@@@Z")]
            internal static extern uint BfdSectionFlags(global::System.IntPtr sec);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?bfd_section_userdata@@YAPEAXPEBUbfd_section@@@Z")]
            internal static extern global::System.IntPtr BfdSectionUserdata(global::System.IntPtr sec);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?bfd_is_com_section@@YAHPEBUbfd_section@@@Z")]
            internal static extern int BfdIsComSection(global::System.IntPtr sec);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?bfd_set_section_userdata@@YAHPEAUbfd_section@@PEAX@Z")]
            internal static extern int BfdSetSectionUserdata(global::System.IntPtr sec, global::System.IntPtr val);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?bfd_set_section_vma@@YAHPEAUbfd_section@@_K@Z")]
            internal static extern int BfdSetSectionVma(global::System.IntPtr sec, ulong val);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?bfd_set_section_lma@@YAHPEAUbfd_section@@_K@Z")]
            internal static extern int BfdSetSectionLma(global::System.IntPtr sec, ulong val);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?bfd_set_section_alignment@@YAHPEAUbfd_section@@I@Z")]
            internal static extern int BfdSetSectionAlignment(global::System.IntPtr sec, uint val);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?bfd_is_und_section@@YAHPEBUbfd_section@@@Z")]
            internal static extern int BfdIsUndSection(global::System.IntPtr sec);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?bfd_is_abs_section@@YAHPEBUbfd_section@@@Z")]
            internal static extern int BfdIsAbsSection(global::System.IntPtr sec);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?bfd_is_ind_section@@YAHPEBUbfd_section@@@Z")]
            internal static extern int BfdIsIndSection(global::System.IntPtr sec);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?bfd_is_const_section@@YAHPEBUbfd_section@@@Z")]
            internal static extern int BfdIsConstSection(global::System.IntPtr sec);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?discarded_section@@YAHPEBUbfd_section@@@Z")]
            internal static extern int DiscardedSection(global::System.IntPtr sec);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_section_list_clear")]
            internal static extern void BfdSectionListClear(global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_get_section_by_name")]
            internal static extern global::System.IntPtr BfdGetSectionByName(global::System.IntPtr abfd, [MarshalAs(UnmanagedType.LPUTF8Str)] string name);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_get_next_section_by_name")]
            internal static extern global::System.IntPtr BfdGetNextSectionByName(global::System.IntPtr ibfd, global::System.IntPtr sec);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_get_linker_section")]
            internal static extern global::System.IntPtr BfdGetLinkerSection(global::System.IntPtr abfd, [MarshalAs(UnmanagedType.LPUTF8Str)] string name);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_get_section_by_name_if")]
            internal static extern global::System.IntPtr BfdGetSectionByNameIf(global::System.IntPtr abfd, [MarshalAs(UnmanagedType.LPUTF8Str)] string name, global::System.IntPtr func, global::System.IntPtr obj);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_get_unique_section_name")]
            internal static extern sbyte* BfdGetUniqueSectionName(global::System.IntPtr abfd, [MarshalAs(UnmanagedType.LPUTF8Str)] string templat, int* count);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_make_section_old_way")]
            internal static extern global::System.IntPtr BfdMakeSectionOldWay(global::System.IntPtr abfd, [MarshalAs(UnmanagedType.LPUTF8Str)] string name);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_make_section_anyway_with_flags")]
            internal static extern global::System.IntPtr BfdMakeSectionAnywayWithFlags(global::System.IntPtr abfd, [MarshalAs(UnmanagedType.LPUTF8Str)] string name, uint flags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_make_section_anyway")]
            internal static extern global::System.IntPtr BfdMakeSectionAnyway(global::System.IntPtr abfd, [MarshalAs(UnmanagedType.LPUTF8Str)] string name);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_make_section_with_flags")]
            internal static extern global::System.IntPtr BfdMakeSectionWithFlags(global::System.IntPtr _0, [MarshalAs(UnmanagedType.LPUTF8Str)] string name, uint flags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_make_section")]
            internal static extern global::System.IntPtr BfdMakeSection(global::System.IntPtr _0, [MarshalAs(UnmanagedType.LPUTF8Str)] string name);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_set_section_flags")]
            internal static extern int BfdSetSectionFlags(global::System.IntPtr sec, uint flags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_rename_section")]
            internal static extern void BfdRenameSection(global::System.IntPtr sec, [MarshalAs(UnmanagedType.LPUTF8Str)] string newname);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_map_over_sections")]
            internal static extern void BfdMapOverSections(global::System.IntPtr abfd, global::System.IntPtr func, global::System.IntPtr obj);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_sections_find_if")]
            internal static extern global::System.IntPtr BfdSectionsFindIf(global::System.IntPtr abfd, global::System.IntPtr operation, global::System.IntPtr obj);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_set_section_size")]
            internal static extern int BfdSetSectionSize(global::System.IntPtr sec, ulong val);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_set_section_contents")]
            internal static extern int BfdSetSectionContents(global::System.IntPtr abfd, global::System.IntPtr section, global::System.IntPtr data, long offset, ulong count);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_get_section_contents")]
            internal static extern int BfdGetSectionContents(global::System.IntPtr abfd, global::System.IntPtr section, global::System.IntPtr location, long offset, ulong count);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_malloc_and_get_section")]
            internal static extern int BfdMallocAndGetSection(global::System.IntPtr abfd, global::System.IntPtr section, byte** buf);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_copy_private_section_data")]
            internal static extern int BfdCopyPrivateSectionData(global::System.IntPtr ibfd, global::System.IntPtr isec, global::System.IntPtr obfd, global::System.IntPtr osec);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_generic_is_group_section")]
            internal static extern int BfdGenericIsGroupSection(global::System.IntPtr _0, global::System.IntPtr sec);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_generic_group_name")]
            internal static extern global::System.IntPtr BfdGenericGroupName(global::System.IntPtr _0, global::System.IntPtr sec);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_generic_discard_group")]
            internal static extern int BfdGenericDiscardGroup(global::System.IntPtr abfd, global::System.IntPtr group);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_printable_name")]
            internal static extern global::System.IntPtr BfdPrintableName(global::System.IntPtr abfd);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_scan_arch")]
            internal static extern global::System.IntPtr BfdScanArch([MarshalAs(UnmanagedType.LPUTF8Str)] string @string);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_arch_get_compatible")]
            internal static extern global::System.IntPtr BfdArchGetCompatible(global::System.IntPtr abfd, global::System.IntPtr bbfd, int accept_unknowns);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_set_arch_info")]
            internal static extern void BfdSetArchInfo(global::System.IntPtr abfd, global::System.IntPtr arg);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_default_set_arch_mach")]
            internal static extern int BfdDefaultSetArchMach(global::System.IntPtr abfd, global::libopcodes.BfdArchitecture arch, uint mach);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_get_arch")]
            internal static extern global::libopcodes.BfdArchitecture BfdGetArch(global::System.IntPtr abfd);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_get_mach")]
            internal static extern uint BfdGetMach(global::System.IntPtr abfd);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_arch_bits_per_byte")]
            internal static extern uint BfdArchBitsPerByte(global::System.IntPtr abfd);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_arch_bits_per_address")]
            internal static extern uint BfdArchBitsPerAddress(global::System.IntPtr abfd);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_get_arch_info")]
            internal static extern global::System.IntPtr BfdGetArchInfo(global::System.IntPtr abfd);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_lookup_arch")]
            internal static extern global::System.IntPtr BfdLookupArch(global::libopcodes.BfdArchitecture arch, uint machine);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_printable_arch_mach")]
            internal static extern global::System.IntPtr BfdPrintableArchMach(global::libopcodes.BfdArchitecture arch, uint machine);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_octets_per_byte")]
            internal static extern uint BfdOctetsPerByte(global::System.IntPtr abfd, global::System.IntPtr sec);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_arch_mach_octets_per_byte")]
            internal static extern uint BfdArchMachOctetsPerByte(global::libopcodes.BfdArchitecture arch, uint machine);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_get_reloc_size")]
            internal static extern uint BfdGetRelocSize(global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_check_overflow")]
            internal static extern global::libopcodes.BfdRelocStatus BfdCheckOverflow(global::libopcodes.ComplainOverflow how, uint bitsize, uint rightshift, uint addrsize, ulong relocation);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_reloc_offset_in_range")]
            internal static extern int BfdRelocOffsetInRange(global::System.IntPtr howto, global::System.IntPtr abfd, global::System.IntPtr section, ulong offset);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_perform_relocation")]
            internal static extern global::libopcodes.BfdRelocStatus BfdPerformRelocation(global::System.IntPtr abfd, global::System.IntPtr reloc_entry, global::System.IntPtr data, global::System.IntPtr input_section, global::System.IntPtr output_bfd, sbyte** error_message);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_install_relocation")]
            internal static extern global::libopcodes.BfdRelocStatus BfdInstallRelocation(global::System.IntPtr abfd, global::System.IntPtr reloc_entry, global::System.IntPtr data, ulong data_start, global::System.IntPtr input_section, sbyte** error_message);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_reloc_type_lookup")]
            internal static extern global::System.IntPtr BfdRelocTypeLookup(global::System.IntPtr abfd, global::libopcodes.BfdRelocCodeReal code);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_reloc_name_lookup")]
            internal static extern global::System.IntPtr BfdRelocNameLookup(global::System.IntPtr abfd, [MarshalAs(UnmanagedType.LPUTF8Str)] string reloc_name);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_get_reloc_code_name")]
            internal static extern global::System.IntPtr BfdGetRelocCodeName(global::libopcodes.BfdRelocCodeReal code);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_is_local_label")]
            internal static extern int BfdIsLocalLabel(global::System.IntPtr abfd, global::System.IntPtr sym);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_is_local_label_name")]
            internal static extern int BfdIsLocalLabelName(global::System.IntPtr abfd, [MarshalAs(UnmanagedType.LPUTF8Str)] string name);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_is_target_special_symbol")]
            internal static extern int BfdIsTargetSpecialSymbol(global::System.IntPtr abfd, global::System.IntPtr sym);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_set_symtab")]
            internal static extern int BfdSetSymtab(global::System.IntPtr abfd, global::System.IntPtr location, uint count);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_print_symbol_vandf")]
            internal static extern void BfdPrintSymbolVandf(global::System.IntPtr abfd, global::System.IntPtr file, global::System.IntPtr symbol);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_bfd_generic_make_empty_symbol")]
            internal static extern global::System.IntPtr BfdGenericMakeEmptySymbol(global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_decode_symclass")]
            internal static extern int BfdDecodeSymclass(global::System.IntPtr symbol);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_is_undefined_symclass")]
            internal static extern int BfdIsUndefinedSymclass(int symclass);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_symbol_info")]
            internal static extern void BfdSymbolInfo(global::System.IntPtr symbol, global::System.IntPtr ret);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_copy_private_symbol_data")]
            internal static extern int BfdCopyPrivateSymbolData(global::System.IntPtr ibfd, global::System.IntPtr isym, global::System.IntPtr obfd, global::System.IntPtr osym);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?bfd_get_filename@@YAPEBDPEBUbfd@@@Z")]
            internal static extern global::System.IntPtr BfdGetFilename(global::System.IntPtr abfd);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?bfd_get_cacheable@@YAHPEBUbfd@@@Z")]
            internal static extern int BfdGetCacheable(global::System.IntPtr abfd);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?bfd_get_format@@YA?AW4bfd_format@@PEBUbfd@@@Z")]
            internal static extern global::libopcodes.BfdFormat BfdGetFormat(global::System.IntPtr abfd);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?bfd_get_file_flags@@YAIPEBUbfd@@@Z")]
            internal static extern uint BfdGetFileFlags(global::System.IntPtr abfd);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?bfd_get_start_address@@YA_KPEBUbfd@@@Z")]
            internal static extern ulong BfdGetStartAddress(global::System.IntPtr abfd);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?bfd_get_symcount@@YAIPEBUbfd@@@Z")]
            internal static extern uint BfdGetSymcount(global::System.IntPtr abfd);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?bfd_get_dynamic_symcount@@YAIPEBUbfd@@@Z")]
            internal static extern uint BfdGetDynamicSymcount(global::System.IntPtr abfd);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?bfd_get_outsymbols@@YAPEAPEAUbfd_symbol@@PEBUbfd@@@Z")]
            internal static extern global::System.IntPtr BfdGetOutsymbols(global::System.IntPtr abfd);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?bfd_count_sections@@YAIPEBUbfd@@@Z")]
            internal static extern uint BfdCountSections(global::System.IntPtr abfd);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?bfd_has_map@@YAHPEBUbfd@@@Z")]
            internal static extern int BfdHasMap(global::System.IntPtr abfd);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?bfd_is_thin_archive@@YAHPEBUbfd@@@Z")]
            internal static extern int BfdIsThinArchive(global::System.IntPtr abfd);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?bfd_usrdata@@YAPEAXPEBUbfd@@@Z")]
            internal static extern global::System.IntPtr BfdUsrdata(global::System.IntPtr abfd);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?bfd_set_cacheable@@YAHPEAUbfd@@H@Z")]
            internal static extern int BfdSetCacheable(global::System.IntPtr abfd, int val);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?bfd_set_thin_archive@@YAXPEAUbfd@@H@Z")]
            internal static extern void BfdSetThinArchive(global::System.IntPtr abfd, int val);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?bfd_set_usrdata@@YAXPEAUbfd@@PEAX@Z")]
            internal static extern void BfdSetUsrdata(global::System.IntPtr abfd, global::System.IntPtr val);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?bfd_asymbol_section@@YAPEAUbfd_section@@PEBUbfd_symbol@@@Z")]
            internal static extern global::System.IntPtr BfdAsymbolSection(global::System.IntPtr sy);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?bfd_asymbol_value@@YA_KPEBUbfd_symbol@@@Z")]
            internal static extern ulong BfdAsymbolValue(global::System.IntPtr sy);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?bfd_asymbol_name@@YAPEBDPEBUbfd_symbol@@@Z")]
            internal static extern global::System.IntPtr BfdAsymbolName(global::System.IntPtr sy);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?bfd_asymbol_bfd@@YAPEAUbfd@@PEBUbfd_symbol@@@Z")]
            internal static extern global::System.IntPtr BfdAsymbolBfd(global::System.IntPtr sy);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?bfd_set_asymbol_name@@YAXPEAUbfd_symbol@@PEBD@Z")]
            internal static extern void BfdSetAsymbolName(global::System.IntPtr sy, [MarshalAs(UnmanagedType.LPUTF8Str)] string name);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?bfd_get_section_limit_octets@@YA_KPEBUbfd@@PEBUbfd_section@@@Z")]
            internal static extern ulong BfdGetSectionLimitOctets(global::System.IntPtr abfd, global::System.IntPtr sec);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?bfd_get_section_limit@@YA_KPEBUbfd@@PEBUbfd_section@@@Z")]
            internal static extern ulong BfdGetSectionLimit(global::System.IntPtr abfd, global::System.IntPtr sec);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?bfd_section_list_remove@@YAXPEAUbfd@@PEAUbfd_section@@@Z")]
            internal static extern void BfdSectionListRemove(global::System.IntPtr abfd, global::System.IntPtr s);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?bfd_section_list_append@@YAXPEAUbfd@@PEAUbfd_section@@@Z")]
            internal static extern void BfdSectionListAppend(global::System.IntPtr abfd, global::System.IntPtr s);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?bfd_section_list_prepend@@YAXPEAUbfd@@PEAUbfd_section@@@Z")]
            internal static extern void BfdSectionListPrepend(global::System.IntPtr abfd, global::System.IntPtr s);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?bfd_section_list_insert_after@@YAXPEAUbfd@@PEAUbfd_section@@1@Z")]
            internal static extern void BfdSectionListInsertAfter(global::System.IntPtr abfd, global::System.IntPtr a, global::System.IntPtr s);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?bfd_section_list_insert_before@@YAXPEAUbfd@@PEAUbfd_section@@1@Z")]
            internal static extern void BfdSectionListInsertBefore(global::System.IntPtr abfd, global::System.IntPtr b, global::System.IntPtr s);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?bfd_section_removed_from_list@@YAHPEBUbfd@@PEBUbfd_section@@@Z")]
            internal static extern int BfdSectionRemovedFromList(global::System.IntPtr abfd, global::System.IntPtr s);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_set_error")]
            internal static extern void BfdSetError(global::libopcodes.BfdError error_tag);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_set_input_error")]
            internal static extern void BfdSetInputError(global::System.IntPtr input, global::libopcodes.BfdError error_tag);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_errmsg")]
            internal static extern global::System.IntPtr BfdErrmsg(global::libopcodes.BfdError error_tag);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_perror")]
            internal static extern void BfdPerror([MarshalAs(UnmanagedType.LPUTF8Str)] string message);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_bfd_error_handler")]
            internal static extern void BfdErrorHandler([MarshalAs(UnmanagedType.LPUTF8Str)] string fmt);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_set_error_program_name")]
            internal static extern void BfdSetErrorProgramName([MarshalAs(UnmanagedType.LPUTF8Str)] string _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_set_assert_handler")]
            internal static extern global::System.IntPtr BfdSetAssertHandler(global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_get_reloc_upper_bound")]
            internal static extern int BfdGetRelocUpperBound(global::System.IntPtr abfd, global::System.IntPtr sect);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_canonicalize_reloc")]
            internal static extern int BfdCanonicalizeReloc(global::System.IntPtr abfd, global::System.IntPtr sec, global::System.IntPtr loc, global::System.IntPtr syms);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_set_reloc")]
            internal static extern void BfdSetReloc(global::System.IntPtr abfd, global::System.IntPtr sec, global::System.IntPtr rel, uint count);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_set_file_flags")]
            internal static extern int BfdSetFileFlags(global::System.IntPtr abfd, uint flags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_get_arch_size")]
            internal static extern int BfdGetArchSize(global::System.IntPtr abfd);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_get_sign_extend_vma")]
            internal static extern int BfdGetSignExtendVma(global::System.IntPtr abfd);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_set_start_address")]
            internal static extern int BfdSetStartAddress(global::System.IntPtr abfd, ulong vma);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_get_gp_size")]
            internal static extern uint BfdGetGpSize(global::System.IntPtr abfd);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_set_gp_size")]
            internal static extern void BfdSetGpSize(global::System.IntPtr abfd, uint i);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_scan_vma")]
            internal static extern ulong BfdScanVma([MarshalAs(UnmanagedType.LPUTF8Str)] string @string, sbyte** end, int @base);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_copy_private_header_data")]
            internal static extern int BfdCopyPrivateHeaderData(global::System.IntPtr ibfd, global::System.IntPtr obfd);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_copy_private_bfd_data")]
            internal static extern int BfdCopyPrivateBfdData(global::System.IntPtr ibfd, global::System.IntPtr obfd);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_set_private_flags")]
            internal static extern int BfdSetPrivateFlags(global::System.IntPtr abfd, uint flags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_get_relocated_section_contents")]
            internal static extern byte* BfdGetRelocatedSectionContents(global::System.IntPtr _0, global::System.IntPtr _1, global::System.IntPtr _2, byte* _3, int _4, global::System.IntPtr _5);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_alt_mach_code")]
            internal static extern int BfdAltMachCode(global::System.IntPtr abfd, int alternative);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_emul_get_maxpagesize")]
            internal static extern ulong BfdEmulGetMaxpagesize([MarshalAs(UnmanagedType.LPUTF8Str)] string _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_emul_set_maxpagesize")]
            internal static extern void BfdEmulSetMaxpagesize([MarshalAs(UnmanagedType.LPUTF8Str)] string _0, ulong _1);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_emul_get_commonpagesize")]
            internal static extern ulong BfdEmulGetCommonpagesize([MarshalAs(UnmanagedType.LPUTF8Str)] string _0, int _1);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_emul_set_commonpagesize")]
            internal static extern void BfdEmulSetCommonpagesize([MarshalAs(UnmanagedType.LPUTF8Str)] string _0, ulong _1);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_demangle")]
            internal static extern sbyte* BfdDemangle(global::System.IntPtr _0, [MarshalAs(UnmanagedType.LPUTF8Str)] string _1, int _2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_update_compression_header")]
            internal static extern void BfdUpdateCompressionHeader(global::System.IntPtr abfd, byte* contents, global::System.IntPtr sec);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_check_compression_header")]
            internal static extern int BfdCheckCompressionHeader(global::System.IntPtr abfd, byte* contents, global::System.IntPtr sec, ulong* uncompressed_size, uint* uncompressed_alignment_power);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_get_compression_header_size")]
            internal static extern int BfdGetCompressionHeaderSize(global::System.IntPtr abfd, global::System.IntPtr sec);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_convert_section_size")]
            internal static extern ulong BfdConvertSectionSize(global::System.IntPtr ibfd, global::System.IntPtr isec, global::System.IntPtr obfd, ulong size);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_convert_section_contents")]
            internal static extern int BfdConvertSectionContents(global::System.IntPtr ibfd, global::System.IntPtr isec, global::System.IntPtr obfd, byte** ptr, ulong* ptr_size);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_get_next_mapent")]
            internal static extern uint BfdGetNextMapent(global::System.IntPtr abfd, uint previous, global::System.IntPtr sym);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_set_archive_head")]
            internal static extern int BfdSetArchiveHead(global::System.IntPtr output, global::System.IntPtr new_head);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_openr_next_archived_file")]
            internal static extern global::System.IntPtr BfdOpenrNextArchivedFile(global::System.IntPtr archive, global::System.IntPtr previous);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_core_file_failing_command")]
            internal static extern global::System.IntPtr BfdCoreFileFailingCommand(global::System.IntPtr abfd);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_core_file_failing_signal")]
            internal static extern int BfdCoreFileFailingSignal(global::System.IntPtr abfd);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_core_file_pid")]
            internal static extern int BfdCoreFilePid(global::System.IntPtr abfd);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="core_file_matches_executable_p")]
            internal static extern int CoreFileMatchesExecutableP(global::System.IntPtr core_bfd, global::System.IntPtr exec_bfd);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="generic_core_file_matches_executable_p")]
            internal static extern int GenericCoreFileMatchesExecutableP(global::System.IntPtr core_bfd, global::System.IntPtr exec_bfd);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?bfd_get_target@@YAPEBDPEBUbfd@@@Z")]
            internal static extern global::System.IntPtr BfdGetTarget(global::System.IntPtr abfd);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?bfd_get_flavour@@YA?AW4bfd_flavour@@PEBUbfd@@@Z")]
            internal static extern global::libopcodes.BfdFlavour BfdGetFlavour(global::System.IntPtr abfd);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?bfd_applicable_file_flags@@YAIPEBUbfd@@@Z")]
            internal static extern uint BfdApplicableFileFlags(global::System.IntPtr abfd);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?bfd_family_coff@@YAHPEBUbfd@@@Z")]
            internal static extern int BfdFamilyCoff(global::System.IntPtr abfd);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?bfd_big_endian@@YAHPEBUbfd@@@Z")]
            internal static extern int BfdBigEndian(global::System.IntPtr abfd);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?bfd_little_endian@@YAHPEBUbfd@@@Z")]
            internal static extern int BfdLittleEndian(global::System.IntPtr abfd);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?bfd_header_big_endian@@YAHPEBUbfd@@@Z")]
            internal static extern int BfdHeaderBigEndian(global::System.IntPtr abfd);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?bfd_header_little_endian@@YAHPEBUbfd@@@Z")]
            internal static extern int BfdHeaderLittleEndian(global::System.IntPtr abfd);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?bfd_applicable_section_flags@@YAIPEBUbfd@@@Z")]
            internal static extern uint BfdApplicableSectionFlags(global::System.IntPtr abfd);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?bfd_get_symbol_leading_char@@YADPEBUbfd@@@Z")]
            internal static extern sbyte BfdGetSymbolLeadingChar(global::System.IntPtr abfd);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="?bfd_asymbol_flavour@@YA?AW4bfd_flavour@@PEBUbfd_symbol@@@Z")]
            internal static extern global::libopcodes.BfdFlavour BfdAsymbolFlavour(global::System.IntPtr sy);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_set_default_target")]
            internal static extern int BfdSetDefaultTarget([MarshalAs(UnmanagedType.LPUTF8Str)] string name);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_find_target")]
            internal static extern global::System.IntPtr BfdFindTarget([MarshalAs(UnmanagedType.LPUTF8Str)] string target_name, global::System.IntPtr abfd);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_get_target_info")]
            internal static extern global::System.IntPtr BfdGetTargetInfo([MarshalAs(UnmanagedType.LPUTF8Str)] string target_name, global::System.IntPtr abfd, int* is_bigendian, int* underscoring, sbyte** def_target_arch);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_iterate_over_targets")]
            internal static extern global::System.IntPtr BfdIterateOverTargets(global::System.IntPtr func, global::System.IntPtr data);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_flavour_name")]
            internal static extern global::System.IntPtr BfdFlavourName(global::libopcodes.BfdFlavour flavour);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_check_format")]
            internal static extern int BfdCheckFormat(global::System.IntPtr abfd, global::libopcodes.BfdFormat format);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_check_format_matches")]
            internal static extern int BfdCheckFormatMatches(global::System.IntPtr abfd, global::libopcodes.BfdFormat format, sbyte*** matching);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_set_format")]
            internal static extern int BfdSetFormat(global::System.IntPtr abfd, global::libopcodes.BfdFormat format);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_format_string")]
            internal static extern global::System.IntPtr BfdFormatString(global::libopcodes.BfdFormat format);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_link_split_section")]
            internal static extern int BfdLinkSplitSection(global::System.IntPtr abfd, global::System.IntPtr sec);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_section_already_linked")]
            internal static extern int BfdSectionAlreadyLinked(global::System.IntPtr abfd, global::System.IntPtr sec, global::System.IntPtr info);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_generic_define_common_symbol")]
            internal static extern int BfdGenericDefineCommonSymbol(global::System.IntPtr output_bfd, global::System.IntPtr info, global::System.IntPtr h);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_bfd_generic_link_hide_symbol")]
            internal static extern void BfdGenericLinkHideSymbol(global::System.IntPtr output_bfd, global::System.IntPtr info, global::System.IntPtr h);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_generic_define_start_stop")]
            internal static extern global::System.IntPtr BfdGenericDefineStartStop(global::System.IntPtr info, [MarshalAs(UnmanagedType.LPUTF8Str)] string symbol, global::System.IntPtr sec);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_find_version_for_sym")]
            internal static extern global::System.IntPtr BfdFindVersionForSym(global::System.IntPtr verdefs, [MarshalAs(UnmanagedType.LPUTF8Str)] string sym_name, int* hide);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_hide_sym_by_version")]
            internal static extern int BfdHideSymByVersion(global::System.IntPtr verdefs, [MarshalAs(UnmanagedType.LPUTF8Str)] string sym_name);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_link_check_relocs")]
            internal static extern int BfdLinkCheckRelocs(global::System.IntPtr abfd, global::System.IntPtr info);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_bfd_generic_link_check_relocs")]
            internal static extern int BfdGenericLinkCheckRelocs(global::System.IntPtr abfd, global::System.IntPtr info);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_merge_private_bfd_data")]
            internal static extern int BfdMergePrivateBfdData(global::System.IntPtr ibfd, global::System.IntPtr info);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_simple_get_relocated_section_contents")]
            internal static extern byte* BfdSimpleGetRelocatedSectionContents(global::System.IntPtr abfd, global::System.IntPtr sec, byte* outbuf, global::System.IntPtr symbol_table);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_get_full_section_contents")]
            internal static extern int BfdGetFullSectionContents(global::System.IntPtr abfd, global::System.IntPtr section, byte** ptr);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_cache_section_contents")]
            internal static extern void BfdCacheSectionContents(global::System.IntPtr sec, global::System.IntPtr contents);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_is_section_compressed_with_header")]
            internal static extern int BfdIsSectionCompressedWithHeader(global::System.IntPtr abfd, global::System.IntPtr section, int* compression_header_size_p, ulong* uncompressed_size_p, uint* uncompressed_alignment_power_p);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_is_section_compressed")]
            internal static extern int BfdIsSectionCompressed(global::System.IntPtr abfd, global::System.IntPtr section);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_init_section_decompress_status")]
            internal static extern int BfdInitSectionDecompressStatus(global::System.IntPtr abfd, global::System.IntPtr section);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_init_section_compress_status")]
            internal static extern int BfdInitSectionCompressStatus(global::System.IntPtr abfd, global::System.IntPtr section);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_compress_section")]
            internal static extern int BfdCompressSection(global::System.IntPtr abfd, global::System.IntPtr section, byte* uncompressed_buffer);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_cache_close_all")]
            internal static extern int BfdCacheCloseAll();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_init")]
            internal static extern uint BfdInit();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_arch_list")]
            internal static extern sbyte** BfdArchList();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_get_error")]
            internal static extern global::libopcodes.BfdError BfdGetError();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="bfd_target_list")]
            internal static extern sbyte** BfdTargetList();
        }

        public unsafe partial struct Link
        {
            [StructLayout(LayoutKind.Explicit, Size = 8)]
            public partial struct __Internal
            {
                [FieldOffset(0)]
                internal global::System.IntPtr next;

                [FieldOffset(0)]
                internal global::System.IntPtr hash;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="??0<unnamed-type-link>@bfd@@QEAA@AEBT01@@Z")]
                internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
            }

            private Link.__Internal __instance;
            internal Link.__Internal __Instance { get { return __instance; } }

            internal static global::libopcodes.Bfd.Link __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new global::libopcodes.Bfd.Link(native.ToPointer(), skipVTables);
            }

            internal static global::libopcodes.Bfd.Link __CreateInstance(global::libopcodes.Bfd.Link.__Internal native, bool skipVTables = false)
            {
                return new global::libopcodes.Bfd.Link(native, skipVTables);
            }

            private Link(global::libopcodes.Bfd.Link.__Internal native, bool skipVTables = false)
                : this()
            {
                __instance = native;
            }

            private Link(void* native, bool skipVTables = false) : this()
            {
                __instance = *(global::libopcodes.Bfd.Link.__Internal*) native;
            }

            public Link(global::libopcodes.Bfd.Link _0)
                : this()
            {
                var ____arg0 = _0.__Instance;
                var __arg0 = new global::System.IntPtr(&____arg0);
                fixed (__Internal* __instancePtr = &__instance)
                {
                    __Internal.cctor(new global::System.IntPtr(__instancePtr), __arg0);
                }
            }

            public global::libopcodes.Bfd Next
            {
                get
                {
                    global::libopcodes.Bfd __result0;
                    if (__instance.next == IntPtr.Zero) __result0 = null;
                    else if (global::libopcodes.Bfd.NativeToManagedMap.ContainsKey(__instance.next))
                        __result0 = (global::libopcodes.Bfd) global::libopcodes.Bfd.NativeToManagedMap[__instance.next];
                    else __result0 = global::libopcodes.Bfd.__CreateInstance(__instance.next);
                    return __result0;
                }

                set
                {
                    __instance.next = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                }
            }

            public global::libopcodes.BfdLinkHashTable Hash
            {
                get
                {
                    global::libopcodes.BfdLinkHashTable __result0;
                    if (__instance.hash == IntPtr.Zero) __result0 = null;
                    else if (global::libopcodes.BfdLinkHashTable.NativeToManagedMap.ContainsKey(__instance.hash))
                        __result0 = (global::libopcodes.BfdLinkHashTable) global::libopcodes.BfdLinkHashTable.NativeToManagedMap[__instance.hash];
                    else __result0 = global::libopcodes.BfdLinkHashTable.__CreateInstance(__instance.hash);
                    return __result0;
                }

                set
                {
                    __instance.hash = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                }
            }
        }

        public unsafe partial struct Tdata
        {
            [StructLayout(LayoutKind.Explicit, Size = 8)]
            public partial struct __Internal
            {
                [FieldOffset(0)]
                internal global::System.IntPtr aout_data;

                [FieldOffset(0)]
                internal global::System.IntPtr aout_ar_data;

                [FieldOffset(0)]
                internal global::System.IntPtr coff_obj_data;

                [FieldOffset(0)]
                internal global::System.IntPtr pe_obj_data;

                [FieldOffset(0)]
                internal global::System.IntPtr xcoff_obj_data;

                [FieldOffset(0)]
                internal global::System.IntPtr ecoff_obj_data;

                [FieldOffset(0)]
                internal global::System.IntPtr srec_data;

                [FieldOffset(0)]
                internal global::System.IntPtr verilog_data;

                [FieldOffset(0)]
                internal global::System.IntPtr ihex_data;

                [FieldOffset(0)]
                internal global::System.IntPtr tekhex_data;

                [FieldOffset(0)]
                internal global::System.IntPtr elf_obj_data;

                [FieldOffset(0)]
                internal global::System.IntPtr mmo_data;

                [FieldOffset(0)]
                internal global::System.IntPtr sun_core_data;

                [FieldOffset(0)]
                internal global::System.IntPtr sco5_core_data;

                [FieldOffset(0)]
                internal global::System.IntPtr trad_core_data;

                [FieldOffset(0)]
                internal global::System.IntPtr som_data;

                [FieldOffset(0)]
                internal global::System.IntPtr hpux_core_data;

                [FieldOffset(0)]
                internal global::System.IntPtr hppabsd_core_data;

                [FieldOffset(0)]
                internal global::System.IntPtr sgi_core_data;

                [FieldOffset(0)]
                internal global::System.IntPtr lynx_core_data;

                [FieldOffset(0)]
                internal global::System.IntPtr osf_core_data;

                [FieldOffset(0)]
                internal global::System.IntPtr cisco_core_data;

                [FieldOffset(0)]
                internal global::System.IntPtr versados_data;

                [FieldOffset(0)]
                internal global::System.IntPtr netbsd_core_data;

                [FieldOffset(0)]
                internal global::System.IntPtr mach_o_data;

                [FieldOffset(0)]
                internal global::System.IntPtr mach_o_fat_data;

                [FieldOffset(0)]
                internal global::System.IntPtr plugin_data;

                [FieldOffset(0)]
                internal global::System.IntPtr pef_data;

                [FieldOffset(0)]
                internal global::System.IntPtr pef_xlib_data;

                [FieldOffset(0)]
                internal global::System.IntPtr sym_data;

                [FieldOffset(0)]
                internal global::System.IntPtr any;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="??0<unnamed-type-tdata>@bfd@@QEAA@AEBT01@@Z")]
                internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
            }

            private Tdata.__Internal __instance;
            internal Tdata.__Internal __Instance { get { return __instance; } }

            internal static global::libopcodes.Bfd.Tdata __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new global::libopcodes.Bfd.Tdata(native.ToPointer(), skipVTables);
            }

            internal static global::libopcodes.Bfd.Tdata __CreateInstance(global::libopcodes.Bfd.Tdata.__Internal native, bool skipVTables = false)
            {
                return new global::libopcodes.Bfd.Tdata(native, skipVTables);
            }

            private Tdata(global::libopcodes.Bfd.Tdata.__Internal native, bool skipVTables = false)
                : this()
            {
                __instance = native;
            }

            private Tdata(void* native, bool skipVTables = false) : this()
            {
                __instance = *(global::libopcodes.Bfd.Tdata.__Internal*) native;
            }

            public Tdata(global::libopcodes.Bfd.Tdata _0)
                : this()
            {
                var ____arg0 = _0.__Instance;
                var __arg0 = new global::System.IntPtr(&____arg0);
                fixed (__Internal* __instancePtr = &__instance)
                {
                    __Internal.cctor(new global::System.IntPtr(__instancePtr), __arg0);
                }
            }

            public global::libopcodes.AoutDataStruct AoutData
            {
                get
                {
                    global::libopcodes.AoutDataStruct __result0;
                    if (__instance.aout_data == IntPtr.Zero) __result0 = null;
                    else if (global::libopcodes.AoutDataStruct.NativeToManagedMap.ContainsKey(__instance.aout_data))
                        __result0 = (global::libopcodes.AoutDataStruct) global::libopcodes.AoutDataStruct.NativeToManagedMap[__instance.aout_data];
                    else __result0 = global::libopcodes.AoutDataStruct.__CreateInstance(__instance.aout_data);
                    return __result0;
                }

                set
                {
                    __instance.aout_data = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                }
            }

            public global::libopcodes.Artdata AoutArData
            {
                get
                {
                    global::libopcodes.Artdata __result0;
                    if (__instance.aout_ar_data == IntPtr.Zero) __result0 = null;
                    else if (global::libopcodes.Artdata.NativeToManagedMap.ContainsKey(__instance.aout_ar_data))
                        __result0 = (global::libopcodes.Artdata) global::libopcodes.Artdata.NativeToManagedMap[__instance.aout_ar_data];
                    else __result0 = global::libopcodes.Artdata.__CreateInstance(__instance.aout_ar_data);
                    return __result0;
                }

                set
                {
                    __instance.aout_ar_data = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                }
            }

            public global::libopcodes.CoffTdata CoffObjData
            {
                get
                {
                    global::libopcodes.CoffTdata __result0;
                    if (__instance.coff_obj_data == IntPtr.Zero) __result0 = null;
                    else if (global::libopcodes.CoffTdata.NativeToManagedMap.ContainsKey(__instance.coff_obj_data))
                        __result0 = (global::libopcodes.CoffTdata) global::libopcodes.CoffTdata.NativeToManagedMap[__instance.coff_obj_data];
                    else __result0 = global::libopcodes.CoffTdata.__CreateInstance(__instance.coff_obj_data);
                    return __result0;
                }

                set
                {
                    __instance.coff_obj_data = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                }
            }

            public global::libopcodes.PeTdata PeObjData
            {
                get
                {
                    global::libopcodes.PeTdata __result0;
                    if (__instance.pe_obj_data == IntPtr.Zero) __result0 = null;
                    else if (global::libopcodes.PeTdata.NativeToManagedMap.ContainsKey(__instance.pe_obj_data))
                        __result0 = (global::libopcodes.PeTdata) global::libopcodes.PeTdata.NativeToManagedMap[__instance.pe_obj_data];
                    else __result0 = global::libopcodes.PeTdata.__CreateInstance(__instance.pe_obj_data);
                    return __result0;
                }

                set
                {
                    __instance.pe_obj_data = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                }
            }

            public global::libopcodes.XcoffTdata XcoffObjData
            {
                get
                {
                    global::libopcodes.XcoffTdata __result0;
                    if (__instance.xcoff_obj_data == IntPtr.Zero) __result0 = null;
                    else if (global::libopcodes.XcoffTdata.NativeToManagedMap.ContainsKey(__instance.xcoff_obj_data))
                        __result0 = (global::libopcodes.XcoffTdata) global::libopcodes.XcoffTdata.NativeToManagedMap[__instance.xcoff_obj_data];
                    else __result0 = global::libopcodes.XcoffTdata.__CreateInstance(__instance.xcoff_obj_data);
                    return __result0;
                }

                set
                {
                    __instance.xcoff_obj_data = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                }
            }

            public global::libopcodes.EcoffTdata EcoffObjData
            {
                get
                {
                    global::libopcodes.EcoffTdata __result0;
                    if (__instance.ecoff_obj_data == IntPtr.Zero) __result0 = null;
                    else if (global::libopcodes.EcoffTdata.NativeToManagedMap.ContainsKey(__instance.ecoff_obj_data))
                        __result0 = (global::libopcodes.EcoffTdata) global::libopcodes.EcoffTdata.NativeToManagedMap[__instance.ecoff_obj_data];
                    else __result0 = global::libopcodes.EcoffTdata.__CreateInstance(__instance.ecoff_obj_data);
                    return __result0;
                }

                set
                {
                    __instance.ecoff_obj_data = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                }
            }

            public global::libopcodes.SrecDataStruct SrecData
            {
                get
                {
                    global::libopcodes.SrecDataStruct __result0;
                    if (__instance.srec_data == IntPtr.Zero) __result0 = null;
                    else if (global::libopcodes.SrecDataStruct.NativeToManagedMap.ContainsKey(__instance.srec_data))
                        __result0 = (global::libopcodes.SrecDataStruct) global::libopcodes.SrecDataStruct.NativeToManagedMap[__instance.srec_data];
                    else __result0 = global::libopcodes.SrecDataStruct.__CreateInstance(__instance.srec_data);
                    return __result0;
                }

                set
                {
                    __instance.srec_data = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                }
            }

            public global::libopcodes.VerilogDataStruct VerilogData
            {
                get
                {
                    global::libopcodes.VerilogDataStruct __result0;
                    if (__instance.verilog_data == IntPtr.Zero) __result0 = null;
                    else if (global::libopcodes.VerilogDataStruct.NativeToManagedMap.ContainsKey(__instance.verilog_data))
                        __result0 = (global::libopcodes.VerilogDataStruct) global::libopcodes.VerilogDataStruct.NativeToManagedMap[__instance.verilog_data];
                    else __result0 = global::libopcodes.VerilogDataStruct.__CreateInstance(__instance.verilog_data);
                    return __result0;
                }

                set
                {
                    __instance.verilog_data = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                }
            }

            public global::libopcodes.IhexDataStruct IhexData
            {
                get
                {
                    global::libopcodes.IhexDataStruct __result0;
                    if (__instance.ihex_data == IntPtr.Zero) __result0 = null;
                    else if (global::libopcodes.IhexDataStruct.NativeToManagedMap.ContainsKey(__instance.ihex_data))
                        __result0 = (global::libopcodes.IhexDataStruct) global::libopcodes.IhexDataStruct.NativeToManagedMap[__instance.ihex_data];
                    else __result0 = global::libopcodes.IhexDataStruct.__CreateInstance(__instance.ihex_data);
                    return __result0;
                }

                set
                {
                    __instance.ihex_data = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                }
            }

            public global::libopcodes.TekhexDataStruct TekhexData
            {
                get
                {
                    global::libopcodes.TekhexDataStruct __result0;
                    if (__instance.tekhex_data == IntPtr.Zero) __result0 = null;
                    else if (global::libopcodes.TekhexDataStruct.NativeToManagedMap.ContainsKey(__instance.tekhex_data))
                        __result0 = (global::libopcodes.TekhexDataStruct) global::libopcodes.TekhexDataStruct.NativeToManagedMap[__instance.tekhex_data];
                    else __result0 = global::libopcodes.TekhexDataStruct.__CreateInstance(__instance.tekhex_data);
                    return __result0;
                }

                set
                {
                    __instance.tekhex_data = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                }
            }

            public global::libopcodes.ElfObjTdata ElfObjData
            {
                get
                {
                    global::libopcodes.ElfObjTdata __result0;
                    if (__instance.elf_obj_data == IntPtr.Zero) __result0 = null;
                    else if (global::libopcodes.ElfObjTdata.NativeToManagedMap.ContainsKey(__instance.elf_obj_data))
                        __result0 = (global::libopcodes.ElfObjTdata) global::libopcodes.ElfObjTdata.NativeToManagedMap[__instance.elf_obj_data];
                    else __result0 = global::libopcodes.ElfObjTdata.__CreateInstance(__instance.elf_obj_data);
                    return __result0;
                }

                set
                {
                    __instance.elf_obj_data = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                }
            }

            public global::libopcodes.MmoDataStruct MmoData
            {
                get
                {
                    global::libopcodes.MmoDataStruct __result0;
                    if (__instance.mmo_data == IntPtr.Zero) __result0 = null;
                    else if (global::libopcodes.MmoDataStruct.NativeToManagedMap.ContainsKey(__instance.mmo_data))
                        __result0 = (global::libopcodes.MmoDataStruct) global::libopcodes.MmoDataStruct.NativeToManagedMap[__instance.mmo_data];
                    else __result0 = global::libopcodes.MmoDataStruct.__CreateInstance(__instance.mmo_data);
                    return __result0;
                }

                set
                {
                    __instance.mmo_data = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                }
            }

            public global::libopcodes.SunCoreStruct SunCoreData
            {
                get
                {
                    global::libopcodes.SunCoreStruct __result0;
                    if (__instance.sun_core_data == IntPtr.Zero) __result0 = null;
                    else if (global::libopcodes.SunCoreStruct.NativeToManagedMap.ContainsKey(__instance.sun_core_data))
                        __result0 = (global::libopcodes.SunCoreStruct) global::libopcodes.SunCoreStruct.NativeToManagedMap[__instance.sun_core_data];
                    else __result0 = global::libopcodes.SunCoreStruct.__CreateInstance(__instance.sun_core_data);
                    return __result0;
                }

                set
                {
                    __instance.sun_core_data = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                }
            }

            public global::libopcodes.Sco5CoreStruct Sco5CoreData
            {
                get
                {
                    global::libopcodes.Sco5CoreStruct __result0;
                    if (__instance.sco5_core_data == IntPtr.Zero) __result0 = null;
                    else if (global::libopcodes.Sco5CoreStruct.NativeToManagedMap.ContainsKey(__instance.sco5_core_data))
                        __result0 = (global::libopcodes.Sco5CoreStruct) global::libopcodes.Sco5CoreStruct.NativeToManagedMap[__instance.sco5_core_data];
                    else __result0 = global::libopcodes.Sco5CoreStruct.__CreateInstance(__instance.sco5_core_data);
                    return __result0;
                }

                set
                {
                    __instance.sco5_core_data = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                }
            }

            public global::libopcodes.TradCoreStruct TradCoreData
            {
                get
                {
                    global::libopcodes.TradCoreStruct __result0;
                    if (__instance.trad_core_data == IntPtr.Zero) __result0 = null;
                    else if (global::libopcodes.TradCoreStruct.NativeToManagedMap.ContainsKey(__instance.trad_core_data))
                        __result0 = (global::libopcodes.TradCoreStruct) global::libopcodes.TradCoreStruct.NativeToManagedMap[__instance.trad_core_data];
                    else __result0 = global::libopcodes.TradCoreStruct.__CreateInstance(__instance.trad_core_data);
                    return __result0;
                }

                set
                {
                    __instance.trad_core_data = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                }
            }

            public global::libopcodes.SomDataStruct SomData
            {
                get
                {
                    global::libopcodes.SomDataStruct __result0;
                    if (__instance.som_data == IntPtr.Zero) __result0 = null;
                    else if (global::libopcodes.SomDataStruct.NativeToManagedMap.ContainsKey(__instance.som_data))
                        __result0 = (global::libopcodes.SomDataStruct) global::libopcodes.SomDataStruct.NativeToManagedMap[__instance.som_data];
                    else __result0 = global::libopcodes.SomDataStruct.__CreateInstance(__instance.som_data);
                    return __result0;
                }

                set
                {
                    __instance.som_data = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                }
            }

            public global::libopcodes.HpuxCoreStruct HpuxCoreData
            {
                get
                {
                    global::libopcodes.HpuxCoreStruct __result0;
                    if (__instance.hpux_core_data == IntPtr.Zero) __result0 = null;
                    else if (global::libopcodes.HpuxCoreStruct.NativeToManagedMap.ContainsKey(__instance.hpux_core_data))
                        __result0 = (global::libopcodes.HpuxCoreStruct) global::libopcodes.HpuxCoreStruct.NativeToManagedMap[__instance.hpux_core_data];
                    else __result0 = global::libopcodes.HpuxCoreStruct.__CreateInstance(__instance.hpux_core_data);
                    return __result0;
                }

                set
                {
                    __instance.hpux_core_data = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                }
            }

            public global::libopcodes.HppabsdCoreStruct HppabsdCoreData
            {
                get
                {
                    global::libopcodes.HppabsdCoreStruct __result0;
                    if (__instance.hppabsd_core_data == IntPtr.Zero) __result0 = null;
                    else if (global::libopcodes.HppabsdCoreStruct.NativeToManagedMap.ContainsKey(__instance.hppabsd_core_data))
                        __result0 = (global::libopcodes.HppabsdCoreStruct) global::libopcodes.HppabsdCoreStruct.NativeToManagedMap[__instance.hppabsd_core_data];
                    else __result0 = global::libopcodes.HppabsdCoreStruct.__CreateInstance(__instance.hppabsd_core_data);
                    return __result0;
                }

                set
                {
                    __instance.hppabsd_core_data = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                }
            }

            public global::libopcodes.SgiCoreStruct SgiCoreData
            {
                get
                {
                    global::libopcodes.SgiCoreStruct __result0;
                    if (__instance.sgi_core_data == IntPtr.Zero) __result0 = null;
                    else if (global::libopcodes.SgiCoreStruct.NativeToManagedMap.ContainsKey(__instance.sgi_core_data))
                        __result0 = (global::libopcodes.SgiCoreStruct) global::libopcodes.SgiCoreStruct.NativeToManagedMap[__instance.sgi_core_data];
                    else __result0 = global::libopcodes.SgiCoreStruct.__CreateInstance(__instance.sgi_core_data);
                    return __result0;
                }

                set
                {
                    __instance.sgi_core_data = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                }
            }

            public global::libopcodes.LynxCoreStruct LynxCoreData
            {
                get
                {
                    global::libopcodes.LynxCoreStruct __result0;
                    if (__instance.lynx_core_data == IntPtr.Zero) __result0 = null;
                    else if (global::libopcodes.LynxCoreStruct.NativeToManagedMap.ContainsKey(__instance.lynx_core_data))
                        __result0 = (global::libopcodes.LynxCoreStruct) global::libopcodes.LynxCoreStruct.NativeToManagedMap[__instance.lynx_core_data];
                    else __result0 = global::libopcodes.LynxCoreStruct.__CreateInstance(__instance.lynx_core_data);
                    return __result0;
                }

                set
                {
                    __instance.lynx_core_data = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                }
            }

            public global::libopcodes.OsfCoreStruct OsfCoreData
            {
                get
                {
                    global::libopcodes.OsfCoreStruct __result0;
                    if (__instance.osf_core_data == IntPtr.Zero) __result0 = null;
                    else if (global::libopcodes.OsfCoreStruct.NativeToManagedMap.ContainsKey(__instance.osf_core_data))
                        __result0 = (global::libopcodes.OsfCoreStruct) global::libopcodes.OsfCoreStruct.NativeToManagedMap[__instance.osf_core_data];
                    else __result0 = global::libopcodes.OsfCoreStruct.__CreateInstance(__instance.osf_core_data);
                    return __result0;
                }

                set
                {
                    __instance.osf_core_data = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                }
            }

            public global::libopcodes.CiscoCoreStruct CiscoCoreData
            {
                get
                {
                    global::libopcodes.CiscoCoreStruct __result0;
                    if (__instance.cisco_core_data == IntPtr.Zero) __result0 = null;
                    else if (global::libopcodes.CiscoCoreStruct.NativeToManagedMap.ContainsKey(__instance.cisco_core_data))
                        __result0 = (global::libopcodes.CiscoCoreStruct) global::libopcodes.CiscoCoreStruct.NativeToManagedMap[__instance.cisco_core_data];
                    else __result0 = global::libopcodes.CiscoCoreStruct.__CreateInstance(__instance.cisco_core_data);
                    return __result0;
                }

                set
                {
                    __instance.cisco_core_data = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                }
            }

            public global::libopcodes.VersadosDataStruct VersadosData
            {
                get
                {
                    global::libopcodes.VersadosDataStruct __result0;
                    if (__instance.versados_data == IntPtr.Zero) __result0 = null;
                    else if (global::libopcodes.VersadosDataStruct.NativeToManagedMap.ContainsKey(__instance.versados_data))
                        __result0 = (global::libopcodes.VersadosDataStruct) global::libopcodes.VersadosDataStruct.NativeToManagedMap[__instance.versados_data];
                    else __result0 = global::libopcodes.VersadosDataStruct.__CreateInstance(__instance.versados_data);
                    return __result0;
                }

                set
                {
                    __instance.versados_data = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                }
            }

            public global::libopcodes.NetbsdCoreStruct NetbsdCoreData
            {
                get
                {
                    global::libopcodes.NetbsdCoreStruct __result0;
                    if (__instance.netbsd_core_data == IntPtr.Zero) __result0 = null;
                    else if (global::libopcodes.NetbsdCoreStruct.NativeToManagedMap.ContainsKey(__instance.netbsd_core_data))
                        __result0 = (global::libopcodes.NetbsdCoreStruct) global::libopcodes.NetbsdCoreStruct.NativeToManagedMap[__instance.netbsd_core_data];
                    else __result0 = global::libopcodes.NetbsdCoreStruct.__CreateInstance(__instance.netbsd_core_data);
                    return __result0;
                }

                set
                {
                    __instance.netbsd_core_data = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                }
            }

            public global::libopcodes.MachODataStruct MachOData
            {
                get
                {
                    global::libopcodes.MachODataStruct __result0;
                    if (__instance.mach_o_data == IntPtr.Zero) __result0 = null;
                    else if (global::libopcodes.MachODataStruct.NativeToManagedMap.ContainsKey(__instance.mach_o_data))
                        __result0 = (global::libopcodes.MachODataStruct) global::libopcodes.MachODataStruct.NativeToManagedMap[__instance.mach_o_data];
                    else __result0 = global::libopcodes.MachODataStruct.__CreateInstance(__instance.mach_o_data);
                    return __result0;
                }

                set
                {
                    __instance.mach_o_data = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                }
            }

            public global::libopcodes.MachOFatDataStruct MachOFatData
            {
                get
                {
                    global::libopcodes.MachOFatDataStruct __result0;
                    if (__instance.mach_o_fat_data == IntPtr.Zero) __result0 = null;
                    else if (global::libopcodes.MachOFatDataStruct.NativeToManagedMap.ContainsKey(__instance.mach_o_fat_data))
                        __result0 = (global::libopcodes.MachOFatDataStruct) global::libopcodes.MachOFatDataStruct.NativeToManagedMap[__instance.mach_o_fat_data];
                    else __result0 = global::libopcodes.MachOFatDataStruct.__CreateInstance(__instance.mach_o_fat_data);
                    return __result0;
                }

                set
                {
                    __instance.mach_o_fat_data = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                }
            }

            public global::libopcodes.PluginDataStruct PluginData
            {
                get
                {
                    global::libopcodes.PluginDataStruct __result0;
                    if (__instance.plugin_data == IntPtr.Zero) __result0 = null;
                    else if (global::libopcodes.PluginDataStruct.NativeToManagedMap.ContainsKey(__instance.plugin_data))
                        __result0 = (global::libopcodes.PluginDataStruct) global::libopcodes.PluginDataStruct.NativeToManagedMap[__instance.plugin_data];
                    else __result0 = global::libopcodes.PluginDataStruct.__CreateInstance(__instance.plugin_data);
                    return __result0;
                }

                set
                {
                    __instance.plugin_data = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                }
            }

            public global::libopcodes.BfdPefDataStruct PefData
            {
                get
                {
                    global::libopcodes.BfdPefDataStruct __result0;
                    if (__instance.pef_data == IntPtr.Zero) __result0 = null;
                    else if (global::libopcodes.BfdPefDataStruct.NativeToManagedMap.ContainsKey(__instance.pef_data))
                        __result0 = (global::libopcodes.BfdPefDataStruct) global::libopcodes.BfdPefDataStruct.NativeToManagedMap[__instance.pef_data];
                    else __result0 = global::libopcodes.BfdPefDataStruct.__CreateInstance(__instance.pef_data);
                    return __result0;
                }

                set
                {
                    __instance.pef_data = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                }
            }

            public global::libopcodes.BfdPefXlibDataStruct PefXlibData
            {
                get
                {
                    global::libopcodes.BfdPefXlibDataStruct __result0;
                    if (__instance.pef_xlib_data == IntPtr.Zero) __result0 = null;
                    else if (global::libopcodes.BfdPefXlibDataStruct.NativeToManagedMap.ContainsKey(__instance.pef_xlib_data))
                        __result0 = (global::libopcodes.BfdPefXlibDataStruct) global::libopcodes.BfdPefXlibDataStruct.NativeToManagedMap[__instance.pef_xlib_data];
                    else __result0 = global::libopcodes.BfdPefXlibDataStruct.__CreateInstance(__instance.pef_xlib_data);
                    return __result0;
                }

                set
                {
                    __instance.pef_xlib_data = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                }
            }

            public global::libopcodes.BfdSymDataStruct SymData
            {
                get
                {
                    global::libopcodes.BfdSymDataStruct __result0;
                    if (__instance.sym_data == IntPtr.Zero) __result0 = null;
                    else if (global::libopcodes.BfdSymDataStruct.NativeToManagedMap.ContainsKey(__instance.sym_data))
                        __result0 = (global::libopcodes.BfdSymDataStruct) global::libopcodes.BfdSymDataStruct.NativeToManagedMap[__instance.sym_data];
                    else __result0 = global::libopcodes.BfdSymDataStruct.__CreateInstance(__instance.sym_data);
                    return __result0;
                }

                set
                {
                    __instance.sym_data = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                }
            }

            public global::System.IntPtr Any
            {
                get
                {
                    return __instance.any;
                }

                set
                {
                    __instance.any = (global::System.IntPtr) value;
                }
            }
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.Bfd> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.Bfd>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::libopcodes.Bfd __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::libopcodes.Bfd(native.ToPointer(), skipVTables);
        }

        internal static global::libopcodes.Bfd __CreateInstance(global::libopcodes.Bfd.__Internal native, bool skipVTables = false)
        {
            return new global::libopcodes.Bfd(native, skipVTables);
        }

        private static void* __CopyValue(global::libopcodes.Bfd.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::libopcodes.Bfd.__Internal));
            *(global::libopcodes.Bfd.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private Bfd(global::libopcodes.Bfd.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected Bfd(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public Bfd()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::libopcodes.Bfd.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public Bfd(global::libopcodes.Bfd _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::libopcodes.Bfd.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::libopcodes.Bfd.__Internal*) __Instance) = *((global::libopcodes.Bfd.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::libopcodes.Bfd __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public static void BfdSprintfVma(global::libopcodes.Bfd _0, sbyte* _1, ulong _2)
        {
            var __arg0 = ReferenceEquals(_0, null) ? global::System.IntPtr.Zero : _0.__Instance;
            __Internal.BfdSprintfVma(__arg0, _1, _2);
        }

        public static void BfdFprintfVma(global::libopcodes.Bfd _0, global::System.IntPtr _1, ulong _2)
        {
            var __arg0 = ReferenceEquals(_0, null) ? global::System.IntPtr.Zero : _0.__Instance;
            __Internal.BfdFprintfVma(__arg0, _1, _2);
        }

        public static string BfdGetStabName(int _0)
        {
            var __ret = __Internal.BfdGetStabName(_0);
            if (__ret == global::System.IntPtr.Zero)
                return default(string);
            var __retPtr = (byte*) __ret;
            int __length = 0;
            while (*(__retPtr++) != 0) __length += sizeof(byte);
            return global::System.Text.Encoding.UTF8.GetString((byte*) __ret, __length);
        }

        public static int BfdHashTableInit(global::libopcodes.BfdHashTable _0, global::libopcodes.Delegates.Func_IntPtr_IntPtr_IntPtr_string _1, uint _2)
        {
            var __arg0 = ReferenceEquals(_0, null) ? global::System.IntPtr.Zero : _0.__Instance;
            var __arg1 = _1 == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(_1);
            var __ret = __Internal.BfdHashTableInit(__arg0, __arg1, _2);
            return __ret;
        }

        public static int BfdHashTableInitN(global::libopcodes.BfdHashTable _0, global::libopcodes.Delegates.Func_IntPtr_IntPtr_IntPtr_string _1, uint _2, uint _3)
        {
            var __arg0 = ReferenceEquals(_0, null) ? global::System.IntPtr.Zero : _0.__Instance;
            var __arg1 = _1 == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(_1);
            var __ret = __Internal.BfdHashTableInitN(__arg0, __arg1, _2, _3);
            return __ret;
        }

        public static void BfdHashTableFree(global::libopcodes.BfdHashTable _0)
        {
            var __arg0 = ReferenceEquals(_0, null) ? global::System.IntPtr.Zero : _0.__Instance;
            __Internal.BfdHashTableFree(__arg0);
        }

        public static global::libopcodes.BfdHashEntry BfdHashLookup(global::libopcodes.BfdHashTable _0, string _1, int create, int copy)
        {
            var __arg0 = ReferenceEquals(_0, null) ? global::System.IntPtr.Zero : _0.__Instance;
            var __ret = __Internal.BfdHashLookup(__arg0, _1, create, copy);
            global::libopcodes.BfdHashEntry __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::libopcodes.BfdHashEntry.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::libopcodes.BfdHashEntry) global::libopcodes.BfdHashEntry.NativeToManagedMap[__ret];
            else __result0 = global::libopcodes.BfdHashEntry.__CreateInstance(__ret);
            return __result0;
        }

        public static global::libopcodes.BfdHashEntry BfdHashInsert(global::libopcodes.BfdHashTable _0, string _1, uint _2)
        {
            var __arg0 = ReferenceEquals(_0, null) ? global::System.IntPtr.Zero : _0.__Instance;
            var __ret = __Internal.BfdHashInsert(__arg0, _1, _2);
            global::libopcodes.BfdHashEntry __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::libopcodes.BfdHashEntry.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::libopcodes.BfdHashEntry) global::libopcodes.BfdHashEntry.NativeToManagedMap[__ret];
            else __result0 = global::libopcodes.BfdHashEntry.__CreateInstance(__ret);
            return __result0;
        }

        public static void BfdHashRename(global::libopcodes.BfdHashTable _0, string _1, global::libopcodes.BfdHashEntry _2)
        {
            var __arg0 = ReferenceEquals(_0, null) ? global::System.IntPtr.Zero : _0.__Instance;
            var __arg2 = ReferenceEquals(_2, null) ? global::System.IntPtr.Zero : _2.__Instance;
            __Internal.BfdHashRename(__arg0, _1, __arg2);
        }

        public static void BfdHashReplace(global::libopcodes.BfdHashTable _0, global::libopcodes.BfdHashEntry old, global::libopcodes.BfdHashEntry nw)
        {
            var __arg0 = ReferenceEquals(_0, null) ? global::System.IntPtr.Zero : _0.__Instance;
            var __arg1 = ReferenceEquals(old, null) ? global::System.IntPtr.Zero : old.__Instance;
            var __arg2 = ReferenceEquals(nw, null) ? global::System.IntPtr.Zero : nw.__Instance;
            __Internal.BfdHashReplace(__arg0, __arg1, __arg2);
        }

        public static global::libopcodes.BfdHashEntry BfdHashNewfunc(global::libopcodes.BfdHashEntry _0, global::libopcodes.BfdHashTable _1, string _2)
        {
            var __arg0 = ReferenceEquals(_0, null) ? global::System.IntPtr.Zero : _0.__Instance;
            var __arg1 = ReferenceEquals(_1, null) ? global::System.IntPtr.Zero : _1.__Instance;
            var __ret = __Internal.BfdHashNewfunc(__arg0, __arg1, _2);
            global::libopcodes.BfdHashEntry __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::libopcodes.BfdHashEntry.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::libopcodes.BfdHashEntry) global::libopcodes.BfdHashEntry.NativeToManagedMap[__ret];
            else __result0 = global::libopcodes.BfdHashEntry.__CreateInstance(__ret);
            return __result0;
        }

        public static global::System.IntPtr BfdHashAllocate(global::libopcodes.BfdHashTable _0, uint _1)
        {
            var __arg0 = ReferenceEquals(_0, null) ? global::System.IntPtr.Zero : _0.__Instance;
            var __ret = __Internal.BfdHashAllocate(__arg0, _1);
            return __ret;
        }

        public static void BfdHashTraverse(global::libopcodes.BfdHashTable _0, global::libopcodes.Delegates.Func_int_IntPtr_IntPtr _1, global::System.IntPtr info)
        {
            var __arg0 = ReferenceEquals(_0, null) ? global::System.IntPtr.Zero : _0.__Instance;
            var __arg1 = _1 == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(_1);
            __Internal.BfdHashTraverse(__arg0, __arg1, info);
        }

        public static uint BfdHashSetDefaultSize(uint _0)
        {
            var __ret = __Internal.BfdHashSetDefaultSize(_0);
            return __ret;
        }

        public static ulong BfdBread(global::System.IntPtr _0, ulong _1, global::libopcodes.Bfd _2)
        {
            var __arg2 = ReferenceEquals(_2, null) ? global::System.IntPtr.Zero : _2.__Instance;
            var __ret = __Internal.BfdBread(_0, _1, __arg2);
            return __ret;
        }

        public static ulong BfdBwrite(global::System.IntPtr _0, ulong _1, global::libopcodes.Bfd _2)
        {
            var __arg2 = ReferenceEquals(_2, null) ? global::System.IntPtr.Zero : _2.__Instance;
            var __ret = __Internal.BfdBwrite(_0, _1, __arg2);
            return __ret;
        }

        public static int BfdSeek(global::libopcodes.Bfd _0, long _1, int _2)
        {
            var __arg0 = ReferenceEquals(_0, null) ? global::System.IntPtr.Zero : _0.__Instance;
            var __ret = __Internal.BfdSeek(__arg0, _1, _2);
            return __ret;
        }

        public static long BfdTell(global::libopcodes.Bfd _0)
        {
            var __arg0 = ReferenceEquals(_0, null) ? global::System.IntPtr.Zero : _0.__Instance;
            var __ret = __Internal.BfdTell(__arg0);
            return __ret;
        }

        public static int BfdFlush(global::libopcodes.Bfd _0)
        {
            var __arg0 = ReferenceEquals(_0, null) ? global::System.IntPtr.Zero : _0.__Instance;
            var __ret = __Internal.BfdFlush(__arg0);
            return __ret;
        }

        public static void BfdWarnDeprecated(string _0, string _1, int _2, string _3)
        {
            __Internal.BfdWarnDeprecated(_0, _1, _2, _3);
        }

        public static int BfdCacheClose(global::libopcodes.Bfd abfd)
        {
            var __arg0 = ReferenceEquals(abfd, null) ? global::System.IntPtr.Zero : abfd.__Instance;
            var __ret = __Internal.BfdCacheClose(__arg0);
            return __ret;
        }

        public static int BfdRecordPhdr(global::libopcodes.Bfd _0, uint _1, int _2, uint _3, int _4, ulong _5, int _6, int _7, uint _8, global::libopcodes.BfdSection _9)
        {
            var __arg0 = ReferenceEquals(_0, null) ? global::System.IntPtr.Zero : _0.__Instance;
            var ____arg9 = ReferenceEquals(_9, null) ? global::System.IntPtr.Zero : _9.__Instance;
            var __arg9 = new global::System.IntPtr(&____arg9);
            var __ret = __Internal.BfdRecordPhdr(__arg0, _1, _2, _3, _4, _5, _6, _7, _8, __arg9);
            return __ret;
        }

        public static ulong BfdGetb64(global::System.IntPtr _0)
        {
            var __ret = __Internal.BfdGetb64(_0);
            return __ret;
        }

        public static ulong BfdGetl64(global::System.IntPtr _0)
        {
            var __ret = __Internal.BfdGetl64(_0);
            return __ret;
        }

        public static long BfdGetbSigned64(global::System.IntPtr _0)
        {
            var __ret = __Internal.BfdGetbSigned64(_0);
            return __ret;
        }

        public static long BfdGetlSigned64(global::System.IntPtr _0)
        {
            var __ret = __Internal.BfdGetlSigned64(_0);
            return __ret;
        }

        public static ulong BfdGetb32(global::System.IntPtr _0)
        {
            var __ret = __Internal.BfdGetb32(_0);
            return __ret;
        }

        public static ulong BfdGetl32(global::System.IntPtr _0)
        {
            var __ret = __Internal.BfdGetl32(_0);
            return __ret;
        }

        public static long BfdGetbSigned32(global::System.IntPtr _0)
        {
            var __ret = __Internal.BfdGetbSigned32(_0);
            return __ret;
        }

        public static long BfdGetlSigned32(global::System.IntPtr _0)
        {
            var __ret = __Internal.BfdGetlSigned32(_0);
            return __ret;
        }

        public static ulong BfdGetb16(global::System.IntPtr _0)
        {
            var __ret = __Internal.BfdGetb16(_0);
            return __ret;
        }

        public static ulong BfdGetl16(global::System.IntPtr _0)
        {
            var __ret = __Internal.BfdGetl16(_0);
            return __ret;
        }

        public static long BfdGetbSigned16(global::System.IntPtr _0)
        {
            var __ret = __Internal.BfdGetbSigned16(_0);
            return __ret;
        }

        public static long BfdGetlSigned16(global::System.IntPtr _0)
        {
            var __ret = __Internal.BfdGetlSigned16(_0);
            return __ret;
        }

        public static void BfdPutb64(ulong _0, global::System.IntPtr _1)
        {
            __Internal.BfdPutb64(_0, _1);
        }

        public static void BfdPutl64(ulong _0, global::System.IntPtr _1)
        {
            __Internal.BfdPutl64(_0, _1);
        }

        public static void BfdPutb32(ulong _0, global::System.IntPtr _1)
        {
            __Internal.BfdPutb32(_0, _1);
        }

        public static void BfdPutl32(ulong _0, global::System.IntPtr _1)
        {
            __Internal.BfdPutl32(_0, _1);
        }

        public static void BfdPutb24(ulong _0, global::System.IntPtr _1)
        {
            __Internal.BfdPutb24(_0, _1);
        }

        public static void BfdPutl24(ulong _0, global::System.IntPtr _1)
        {
            __Internal.BfdPutl24(_0, _1);
        }

        public static void BfdPutb16(ulong _0, global::System.IntPtr _1)
        {
            __Internal.BfdPutb16(_0, _1);
        }

        public static void BfdPutl16(ulong _0, global::System.IntPtr _1)
        {
            __Internal.BfdPutl16(_0, _1);
        }

        public static ulong BfdGetBits(global::System.IntPtr _0, int _1, int _2)
        {
            var __ret = __Internal.BfdGetBits(_0, _1, _2);
            return __ret;
        }

        public static void BfdPutBits(ulong _0, global::System.IntPtr _1, int _2, int _3)
        {
            __Internal.BfdPutBits(_0, _1, _2, _3);
        }

        public static void BfdInitWindow(global::libopcodes.BfdWindow _0)
        {
            var __arg0 = ReferenceEquals(_0, null) ? global::System.IntPtr.Zero : _0.__Instance;
            __Internal.BfdInitWindow(__arg0);
        }

        public static void BfdFreeWindow(global::libopcodes.BfdWindow _0)
        {
            var __arg0 = ReferenceEquals(_0, null) ? global::System.IntPtr.Zero : _0.__Instance;
            __Internal.BfdFreeWindow(__arg0);
        }

        public static int BfdGetFileWindow(global::libopcodes.Bfd _0, long _1, ulong _2, global::libopcodes.BfdWindow _3, int _4)
        {
            var __arg0 = ReferenceEquals(_0, null) ? global::System.IntPtr.Zero : _0.__Instance;
            var __arg3 = ReferenceEquals(_3, null) ? global::System.IntPtr.Zero : _3.__Instance;
            var __ret = __Internal.BfdGetFileWindow(__arg0, _1, _2, __arg3, _4);
            return __ret;
        }

        public static global::libopcodes.Bfd BfdElfBfdFromRemoteMemory(global::libopcodes.Bfd templ, ulong ehdr_vma, ulong size, ref ulong loadbasep, global::libopcodes.Delegates.Func_int_ulong_bytePtr_ulong target_read_memory)
        {
            var __arg0 = ReferenceEquals(templ, null) ? global::System.IntPtr.Zero : templ.__Instance;
            fixed (ulong* __loadbasep3 = &loadbasep)
            {
                var __arg3 = __loadbasep3;
                var __arg4 = target_read_memory == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(target_read_memory);
                var __ret = __Internal.BfdElfBfdFromRemoteMemory(__arg0, ehdr_vma, size, __arg3, __arg4);
                global::libopcodes.Bfd __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::libopcodes.Bfd.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::libopcodes.Bfd) global::libopcodes.Bfd.NativeToManagedMap[__ret];
                else __result0 = global::libopcodes.Bfd.__CreateInstance(__ret);
                return __result0;
            }
        }

        public static global::libopcodes.Bfd BfdFopen(string filename, string target, string mode, int fd)
        {
            var __ret = __Internal.BfdFopen(filename, target, mode, fd);
            global::libopcodes.Bfd __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::libopcodes.Bfd.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::libopcodes.Bfd) global::libopcodes.Bfd.NativeToManagedMap[__ret];
            else __result0 = global::libopcodes.Bfd.__CreateInstance(__ret);
            return __result0;
        }

        public static global::libopcodes.Bfd BfdOpenr(string filename, string target)
        {
            var __ret = __Internal.BfdOpenr(filename, target);
            global::libopcodes.Bfd __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::libopcodes.Bfd.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::libopcodes.Bfd) global::libopcodes.Bfd.NativeToManagedMap[__ret];
            else __result0 = global::libopcodes.Bfd.__CreateInstance(__ret);
            return __result0;
        }

        public static global::libopcodes.Bfd BfdFdopenr(string filename, string target, int fd)
        {
            var __ret = __Internal.BfdFdopenr(filename, target, fd);
            global::libopcodes.Bfd __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::libopcodes.Bfd.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::libopcodes.Bfd) global::libopcodes.Bfd.NativeToManagedMap[__ret];
            else __result0 = global::libopcodes.Bfd.__CreateInstance(__ret);
            return __result0;
        }

        public static global::libopcodes.Bfd BfdOpenstreamr(string filename, string target, global::System.IntPtr stream)
        {
            var __ret = __Internal.BfdOpenstreamr(filename, target, stream);
            global::libopcodes.Bfd __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::libopcodes.Bfd.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::libopcodes.Bfd) global::libopcodes.Bfd.NativeToManagedMap[__ret];
            else __result0 = global::libopcodes.Bfd.__CreateInstance(__ret);
            return __result0;
        }

        public static global::libopcodes.Bfd BfdOpenw(string filename, string target)
        {
            var __ret = __Internal.BfdOpenw(filename, target);
            global::libopcodes.Bfd __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::libopcodes.Bfd.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::libopcodes.Bfd) global::libopcodes.Bfd.NativeToManagedMap[__ret];
            else __result0 = global::libopcodes.Bfd.__CreateInstance(__ret);
            return __result0;
        }

        public static int BfdClose(global::libopcodes.Bfd abfd)
        {
            var __arg0 = ReferenceEquals(abfd, null) ? global::System.IntPtr.Zero : abfd.__Instance;
            var __ret = __Internal.BfdClose(__arg0);
            return __ret;
        }

        public static int BfdCloseAllDone(global::libopcodes.Bfd _0)
        {
            var __arg0 = ReferenceEquals(_0, null) ? global::System.IntPtr.Zero : _0.__Instance;
            var __ret = __Internal.BfdCloseAllDone(__arg0);
            return __ret;
        }

        public static global::libopcodes.Bfd BfdCreate(string filename, global::libopcodes.Bfd templ)
        {
            var __arg1 = ReferenceEquals(templ, null) ? global::System.IntPtr.Zero : templ.__Instance;
            var __ret = __Internal.BfdCreate(filename, __arg1);
            global::libopcodes.Bfd __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::libopcodes.Bfd.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::libopcodes.Bfd) global::libopcodes.Bfd.NativeToManagedMap[__ret];
            else __result0 = global::libopcodes.Bfd.__CreateInstance(__ret);
            return __result0;
        }

        public static int BfdMakeWritable(global::libopcodes.Bfd abfd)
        {
            var __arg0 = ReferenceEquals(abfd, null) ? global::System.IntPtr.Zero : abfd.__Instance;
            var __ret = __Internal.BfdMakeWritable(__arg0);
            return __ret;
        }

        public static int BfdMakeReadable(global::libopcodes.Bfd abfd)
        {
            var __arg0 = ReferenceEquals(abfd, null) ? global::System.IntPtr.Zero : abfd.__Instance;
            var __ret = __Internal.BfdMakeReadable(__arg0);
            return __ret;
        }

        public static global::System.IntPtr BfdAlloc(global::libopcodes.Bfd abfd, ulong wanted)
        {
            var __arg0 = ReferenceEquals(abfd, null) ? global::System.IntPtr.Zero : abfd.__Instance;
            var __ret = __Internal.BfdAlloc(__arg0, wanted);
            return __ret;
        }

        public static global::System.IntPtr BfdZalloc(global::libopcodes.Bfd abfd, ulong wanted)
        {
            var __arg0 = ReferenceEquals(abfd, null) ? global::System.IntPtr.Zero : abfd.__Instance;
            var __ret = __Internal.BfdZalloc(__arg0, wanted);
            return __ret;
        }

        public static uint BfdCalcGnuDebuglinkCrc32(uint crc, byte* buf, ulong len)
        {
            var __ret = __Internal.BfdCalcGnuDebuglinkCrc32(crc, buf, len);
            return __ret;
        }

        public static sbyte* BfdGetDebugLinkInfo(global::libopcodes.Bfd abfd, ref uint crc32_out)
        {
            var __arg0 = ReferenceEquals(abfd, null) ? global::System.IntPtr.Zero : abfd.__Instance;
            fixed (uint* __crc32_out1 = &crc32_out)
            {
                var __arg1 = __crc32_out1;
                var __ret = __Internal.BfdGetDebugLinkInfo(__arg0, __arg1);
                return __ret;
            }
        }

        public static sbyte* BfdGetAltDebugLinkInfo(global::libopcodes.Bfd abfd, ref ulong buildid_len, byte** buildid_out)
        {
            var __arg0 = ReferenceEquals(abfd, null) ? global::System.IntPtr.Zero : abfd.__Instance;
            fixed (ulong* __buildid_len1 = &buildid_len)
            {
                var __arg1 = __buildid_len1;
                var __ret = __Internal.BfdGetAltDebugLinkInfo(__arg0, __arg1, buildid_out);
                return __ret;
            }
        }

        public static sbyte* BfdFollowGnuDebuglink(global::libopcodes.Bfd abfd, string dir)
        {
            var __arg0 = ReferenceEquals(abfd, null) ? global::System.IntPtr.Zero : abfd.__Instance;
            var __ret = __Internal.BfdFollowGnuDebuglink(__arg0, dir);
            return __ret;
        }

        public static sbyte* BfdFollowGnuDebugaltlink(global::libopcodes.Bfd abfd, string dir)
        {
            var __arg0 = ReferenceEquals(abfd, null) ? global::System.IntPtr.Zero : abfd.__Instance;
            var __ret = __Internal.BfdFollowGnuDebugaltlink(__arg0, dir);
            return __ret;
        }

        public static global::libopcodes.BfdSection BfdCreateGnuDebuglinkSection(global::libopcodes.Bfd abfd, string filename)
        {
            var __arg0 = ReferenceEquals(abfd, null) ? global::System.IntPtr.Zero : abfd.__Instance;
            var __ret = __Internal.BfdCreateGnuDebuglinkSection(__arg0, filename);
            global::libopcodes.BfdSection __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::libopcodes.BfdSection.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::libopcodes.BfdSection) global::libopcodes.BfdSection.NativeToManagedMap[__ret];
            else __result0 = global::libopcodes.BfdSection.__CreateInstance(__ret);
            return __result0;
        }

        public static int BfdFillInGnuDebuglinkSection(global::libopcodes.Bfd abfd, global::libopcodes.BfdSection sect, string filename)
        {
            var __arg0 = ReferenceEquals(abfd, null) ? global::System.IntPtr.Zero : abfd.__Instance;
            var __arg1 = ReferenceEquals(sect, null) ? global::System.IntPtr.Zero : sect.__Instance;
            var __ret = __Internal.BfdFillInGnuDebuglinkSection(__arg0, __arg1, filename);
            return __ret;
        }

        public static sbyte* BfdFollowBuildIdDebuglink(global::libopcodes.Bfd abfd, string dir)
        {
            var __arg0 = ReferenceEquals(abfd, null) ? global::System.IntPtr.Zero : abfd.__Instance;
            var __ret = __Internal.BfdFollowBuildIdDebuglink(__arg0, dir);
            return __ret;
        }

        public static void BfdSetFilename(global::libopcodes.Bfd abfd, sbyte* filename)
        {
            var __arg0 = ReferenceEquals(abfd, null) ? global::System.IntPtr.Zero : abfd.__Instance;
            __Internal.BfdSetFilename(__arg0, filename);
        }

        public static ulong BfdGetb24(global::System.IntPtr p)
        {
            var __ret = __Internal.BfdGetb24(p);
            return __ret;
        }

        public static ulong BfdGetl24(global::System.IntPtr p)
        {
            var __ret = __Internal.BfdGetl24(p);
            return __ret;
        }

        public static int BfdGetMtime(global::libopcodes.Bfd abfd)
        {
            var __arg0 = ReferenceEquals(abfd, null) ? global::System.IntPtr.Zero : abfd.__Instance;
            var __ret = __Internal.BfdGetMtime(__arg0);
            return __ret;
        }

        public static ulong BfdGetSize(global::libopcodes.Bfd abfd)
        {
            var __arg0 = ReferenceEquals(abfd, null) ? global::System.IntPtr.Zero : abfd.__Instance;
            var __ret = __Internal.BfdGetSize(__arg0);
            return __ret;
        }

        public static ulong BfdGetFileSize(global::libopcodes.Bfd abfd)
        {
            var __arg0 = ReferenceEquals(abfd, null) ? global::System.IntPtr.Zero : abfd.__Instance;
            var __ret = __Internal.BfdGetFileSize(__arg0);
            return __ret;
        }

        public static global::System.IntPtr BfdMmap(global::libopcodes.Bfd abfd, global::System.IntPtr addr, ulong len, int prot, int flags, long offset, void** map_addr, ref ulong map_len)
        {
            var __arg0 = ReferenceEquals(abfd, null) ? global::System.IntPtr.Zero : abfd.__Instance;
            fixed (ulong* __map_len7 = &map_len)
            {
                var __arg7 = __map_len7;
                var __ret = __Internal.BfdMmap(__arg0, addr, len, prot, flags, offset, map_addr, __arg7);
                return __ret;
            }
        }

        public static string BfdSectionName(global::libopcodes.BfdSection sec)
        {
            var __arg0 = ReferenceEquals(sec, null) ? global::System.IntPtr.Zero : sec.__Instance;
            var __ret = __Internal.BfdSectionName(__arg0);
            if (__ret == global::System.IntPtr.Zero)
                return default(string);
            var __retPtr = (byte*) __ret;
            int __length = 0;
            while (*(__retPtr++) != 0) __length += sizeof(byte);
            return global::System.Text.Encoding.UTF8.GetString((byte*) __ret, __length);
        }

        public static ulong BfdSectionSize(global::libopcodes.BfdSection sec)
        {
            var __arg0 = ReferenceEquals(sec, null) ? global::System.IntPtr.Zero : sec.__Instance;
            var __ret = __Internal.BfdSectionSize(__arg0);
            return __ret;
        }

        public static ulong BfdSectionVma(global::libopcodes.BfdSection sec)
        {
            var __arg0 = ReferenceEquals(sec, null) ? global::System.IntPtr.Zero : sec.__Instance;
            var __ret = __Internal.BfdSectionVma(__arg0);
            return __ret;
        }

        public static ulong BfdSectionLma(global::libopcodes.BfdSection sec)
        {
            var __arg0 = ReferenceEquals(sec, null) ? global::System.IntPtr.Zero : sec.__Instance;
            var __ret = __Internal.BfdSectionLma(__arg0);
            return __ret;
        }

        public static uint BfdSectionAlignment(global::libopcodes.BfdSection sec)
        {
            var __arg0 = ReferenceEquals(sec, null) ? global::System.IntPtr.Zero : sec.__Instance;
            var __ret = __Internal.BfdSectionAlignment(__arg0);
            return __ret;
        }

        public static uint BfdSectionFlags(global::libopcodes.BfdSection sec)
        {
            var __arg0 = ReferenceEquals(sec, null) ? global::System.IntPtr.Zero : sec.__Instance;
            var __ret = __Internal.BfdSectionFlags(__arg0);
            return __ret;
        }

        public static global::System.IntPtr BfdSectionUserdata(global::libopcodes.BfdSection sec)
        {
            var __arg0 = ReferenceEquals(sec, null) ? global::System.IntPtr.Zero : sec.__Instance;
            var __ret = __Internal.BfdSectionUserdata(__arg0);
            return __ret;
        }

        public static int BfdIsComSection(global::libopcodes.BfdSection sec)
        {
            var __arg0 = ReferenceEquals(sec, null) ? global::System.IntPtr.Zero : sec.__Instance;
            var __ret = __Internal.BfdIsComSection(__arg0);
            return __ret;
        }

        public static int BfdSetSectionUserdata(global::libopcodes.BfdSection sec, global::System.IntPtr val)
        {
            var __arg0 = ReferenceEquals(sec, null) ? global::System.IntPtr.Zero : sec.__Instance;
            var __ret = __Internal.BfdSetSectionUserdata(__arg0, val);
            return __ret;
        }

        public static int BfdSetSectionVma(global::libopcodes.BfdSection sec, ulong val)
        {
            var __arg0 = ReferenceEquals(sec, null) ? global::System.IntPtr.Zero : sec.__Instance;
            var __ret = __Internal.BfdSetSectionVma(__arg0, val);
            return __ret;
        }

        public static int BfdSetSectionLma(global::libopcodes.BfdSection sec, ulong val)
        {
            var __arg0 = ReferenceEquals(sec, null) ? global::System.IntPtr.Zero : sec.__Instance;
            var __ret = __Internal.BfdSetSectionLma(__arg0, val);
            return __ret;
        }

        public static int BfdSetSectionAlignment(global::libopcodes.BfdSection sec, uint val)
        {
            var __arg0 = ReferenceEquals(sec, null) ? global::System.IntPtr.Zero : sec.__Instance;
            var __ret = __Internal.BfdSetSectionAlignment(__arg0, val);
            return __ret;
        }

        public static int BfdIsUndSection(global::libopcodes.BfdSection sec)
        {
            var __arg0 = ReferenceEquals(sec, null) ? global::System.IntPtr.Zero : sec.__Instance;
            var __ret = __Internal.BfdIsUndSection(__arg0);
            return __ret;
        }

        public static int BfdIsAbsSection(global::libopcodes.BfdSection sec)
        {
            var __arg0 = ReferenceEquals(sec, null) ? global::System.IntPtr.Zero : sec.__Instance;
            var __ret = __Internal.BfdIsAbsSection(__arg0);
            return __ret;
        }

        public static int BfdIsIndSection(global::libopcodes.BfdSection sec)
        {
            var __arg0 = ReferenceEquals(sec, null) ? global::System.IntPtr.Zero : sec.__Instance;
            var __ret = __Internal.BfdIsIndSection(__arg0);
            return __ret;
        }

        public static int BfdIsConstSection(global::libopcodes.BfdSection sec)
        {
            var __arg0 = ReferenceEquals(sec, null) ? global::System.IntPtr.Zero : sec.__Instance;
            var __ret = __Internal.BfdIsConstSection(__arg0);
            return __ret;
        }

        public static int DiscardedSection(global::libopcodes.BfdSection sec)
        {
            var __arg0 = ReferenceEquals(sec, null) ? global::System.IntPtr.Zero : sec.__Instance;
            var __ret = __Internal.DiscardedSection(__arg0);
            return __ret;
        }

        public static void BfdSectionListClear(global::libopcodes.Bfd _0)
        {
            var __arg0 = ReferenceEquals(_0, null) ? global::System.IntPtr.Zero : _0.__Instance;
            __Internal.BfdSectionListClear(__arg0);
        }

        public static global::libopcodes.BfdSection BfdGetSectionByName(global::libopcodes.Bfd abfd, string name)
        {
            var __arg0 = ReferenceEquals(abfd, null) ? global::System.IntPtr.Zero : abfd.__Instance;
            var __ret = __Internal.BfdGetSectionByName(__arg0, name);
            global::libopcodes.BfdSection __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::libopcodes.BfdSection.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::libopcodes.BfdSection) global::libopcodes.BfdSection.NativeToManagedMap[__ret];
            else __result0 = global::libopcodes.BfdSection.__CreateInstance(__ret);
            return __result0;
        }

        public static global::libopcodes.BfdSection BfdGetNextSectionByName(global::libopcodes.Bfd ibfd, global::libopcodes.BfdSection sec)
        {
            var __arg0 = ReferenceEquals(ibfd, null) ? global::System.IntPtr.Zero : ibfd.__Instance;
            var __arg1 = ReferenceEquals(sec, null) ? global::System.IntPtr.Zero : sec.__Instance;
            var __ret = __Internal.BfdGetNextSectionByName(__arg0, __arg1);
            global::libopcodes.BfdSection __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::libopcodes.BfdSection.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::libopcodes.BfdSection) global::libopcodes.BfdSection.NativeToManagedMap[__ret];
            else __result0 = global::libopcodes.BfdSection.__CreateInstance(__ret);
            return __result0;
        }

        public static global::libopcodes.BfdSection BfdGetLinkerSection(global::libopcodes.Bfd abfd, string name)
        {
            var __arg0 = ReferenceEquals(abfd, null) ? global::System.IntPtr.Zero : abfd.__Instance;
            var __ret = __Internal.BfdGetLinkerSection(__arg0, name);
            global::libopcodes.BfdSection __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::libopcodes.BfdSection.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::libopcodes.BfdSection) global::libopcodes.BfdSection.NativeToManagedMap[__ret];
            else __result0 = global::libopcodes.BfdSection.__CreateInstance(__ret);
            return __result0;
        }

        public static global::libopcodes.BfdSection BfdGetSectionByNameIf(global::libopcodes.Bfd abfd, string name, global::libopcodes.Delegates.Func_int_IntPtr_IntPtr_IntPtr func, global::System.IntPtr obj)
        {
            var __arg0 = ReferenceEquals(abfd, null) ? global::System.IntPtr.Zero : abfd.__Instance;
            var __arg2 = func == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(func);
            var __ret = __Internal.BfdGetSectionByNameIf(__arg0, name, __arg2, obj);
            global::libopcodes.BfdSection __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::libopcodes.BfdSection.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::libopcodes.BfdSection) global::libopcodes.BfdSection.NativeToManagedMap[__ret];
            else __result0 = global::libopcodes.BfdSection.__CreateInstance(__ret);
            return __result0;
        }

        public static sbyte* BfdGetUniqueSectionName(global::libopcodes.Bfd abfd, string templat, ref int count)
        {
            var __arg0 = ReferenceEquals(abfd, null) ? global::System.IntPtr.Zero : abfd.__Instance;
            fixed (int* __count2 = &count)
            {
                var __arg2 = __count2;
                var __ret = __Internal.BfdGetUniqueSectionName(__arg0, templat, __arg2);
                return __ret;
            }
        }

        public static global::libopcodes.BfdSection BfdMakeSectionOldWay(global::libopcodes.Bfd abfd, string name)
        {
            var __arg0 = ReferenceEquals(abfd, null) ? global::System.IntPtr.Zero : abfd.__Instance;
            var __ret = __Internal.BfdMakeSectionOldWay(__arg0, name);
            global::libopcodes.BfdSection __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::libopcodes.BfdSection.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::libopcodes.BfdSection) global::libopcodes.BfdSection.NativeToManagedMap[__ret];
            else __result0 = global::libopcodes.BfdSection.__CreateInstance(__ret);
            return __result0;
        }

        public static global::libopcodes.BfdSection BfdMakeSectionAnywayWithFlags(global::libopcodes.Bfd abfd, string name, uint flags)
        {
            var __arg0 = ReferenceEquals(abfd, null) ? global::System.IntPtr.Zero : abfd.__Instance;
            var __ret = __Internal.BfdMakeSectionAnywayWithFlags(__arg0, name, flags);
            global::libopcodes.BfdSection __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::libopcodes.BfdSection.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::libopcodes.BfdSection) global::libopcodes.BfdSection.NativeToManagedMap[__ret];
            else __result0 = global::libopcodes.BfdSection.__CreateInstance(__ret);
            return __result0;
        }

        public static global::libopcodes.BfdSection BfdMakeSectionAnyway(global::libopcodes.Bfd abfd, string name)
        {
            var __arg0 = ReferenceEquals(abfd, null) ? global::System.IntPtr.Zero : abfd.__Instance;
            var __ret = __Internal.BfdMakeSectionAnyway(__arg0, name);
            global::libopcodes.BfdSection __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::libopcodes.BfdSection.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::libopcodes.BfdSection) global::libopcodes.BfdSection.NativeToManagedMap[__ret];
            else __result0 = global::libopcodes.BfdSection.__CreateInstance(__ret);
            return __result0;
        }

        public static global::libopcodes.BfdSection BfdMakeSectionWithFlags(global::libopcodes.Bfd _0, string name, uint flags)
        {
            var __arg0 = ReferenceEquals(_0, null) ? global::System.IntPtr.Zero : _0.__Instance;
            var __ret = __Internal.BfdMakeSectionWithFlags(__arg0, name, flags);
            global::libopcodes.BfdSection __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::libopcodes.BfdSection.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::libopcodes.BfdSection) global::libopcodes.BfdSection.NativeToManagedMap[__ret];
            else __result0 = global::libopcodes.BfdSection.__CreateInstance(__ret);
            return __result0;
        }

        public static global::libopcodes.BfdSection BfdMakeSection(global::libopcodes.Bfd _0, string name)
        {
            var __arg0 = ReferenceEquals(_0, null) ? global::System.IntPtr.Zero : _0.__Instance;
            var __ret = __Internal.BfdMakeSection(__arg0, name);
            global::libopcodes.BfdSection __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::libopcodes.BfdSection.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::libopcodes.BfdSection) global::libopcodes.BfdSection.NativeToManagedMap[__ret];
            else __result0 = global::libopcodes.BfdSection.__CreateInstance(__ret);
            return __result0;
        }

        public static int BfdSetSectionFlags(global::libopcodes.BfdSection sec, uint flags)
        {
            var __arg0 = ReferenceEquals(sec, null) ? global::System.IntPtr.Zero : sec.__Instance;
            var __ret = __Internal.BfdSetSectionFlags(__arg0, flags);
            return __ret;
        }

        public static void BfdRenameSection(global::libopcodes.BfdSection sec, string newname)
        {
            var __arg0 = ReferenceEquals(sec, null) ? global::System.IntPtr.Zero : sec.__Instance;
            __Internal.BfdRenameSection(__arg0, newname);
        }

        public static void BfdMapOverSections(global::libopcodes.Bfd abfd, global::libopcodes.Delegates.Action_IntPtr_IntPtr_IntPtr func, global::System.IntPtr obj)
        {
            var __arg0 = ReferenceEquals(abfd, null) ? global::System.IntPtr.Zero : abfd.__Instance;
            var __arg1 = func == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(func);
            __Internal.BfdMapOverSections(__arg0, __arg1, obj);
        }

        public static global::libopcodes.BfdSection BfdSectionsFindIf(global::libopcodes.Bfd abfd, global::libopcodes.Delegates.Func_int_IntPtr_IntPtr_IntPtr operation, global::System.IntPtr obj)
        {
            var __arg0 = ReferenceEquals(abfd, null) ? global::System.IntPtr.Zero : abfd.__Instance;
            var __arg1 = operation == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(operation);
            var __ret = __Internal.BfdSectionsFindIf(__arg0, __arg1, obj);
            global::libopcodes.BfdSection __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::libopcodes.BfdSection.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::libopcodes.BfdSection) global::libopcodes.BfdSection.NativeToManagedMap[__ret];
            else __result0 = global::libopcodes.BfdSection.__CreateInstance(__ret);
            return __result0;
        }

        public static int BfdSetSectionSize(global::libopcodes.BfdSection sec, ulong val)
        {
            var __arg0 = ReferenceEquals(sec, null) ? global::System.IntPtr.Zero : sec.__Instance;
            var __ret = __Internal.BfdSetSectionSize(__arg0, val);
            return __ret;
        }

        public static int BfdSetSectionContents(global::libopcodes.Bfd abfd, global::libopcodes.BfdSection section, global::System.IntPtr data, long offset, ulong count)
        {
            var __arg0 = ReferenceEquals(abfd, null) ? global::System.IntPtr.Zero : abfd.__Instance;
            var __arg1 = ReferenceEquals(section, null) ? global::System.IntPtr.Zero : section.__Instance;
            var __ret = __Internal.BfdSetSectionContents(__arg0, __arg1, data, offset, count);
            return __ret;
        }

        public static int BfdGetSectionContents(global::libopcodes.Bfd abfd, global::libopcodes.BfdSection section, global::System.IntPtr location, long offset, ulong count)
        {
            var __arg0 = ReferenceEquals(abfd, null) ? global::System.IntPtr.Zero : abfd.__Instance;
            var __arg1 = ReferenceEquals(section, null) ? global::System.IntPtr.Zero : section.__Instance;
            var __ret = __Internal.BfdGetSectionContents(__arg0, __arg1, location, offset, count);
            return __ret;
        }

        public static int BfdMallocAndGetSection(global::libopcodes.Bfd abfd, global::libopcodes.BfdSection section, byte** buf)
        {
            var __arg0 = ReferenceEquals(abfd, null) ? global::System.IntPtr.Zero : abfd.__Instance;
            var __arg1 = ReferenceEquals(section, null) ? global::System.IntPtr.Zero : section.__Instance;
            var __ret = __Internal.BfdMallocAndGetSection(__arg0, __arg1, buf);
            return __ret;
        }

        public static int BfdCopyPrivateSectionData(global::libopcodes.Bfd ibfd, global::libopcodes.BfdSection isec, global::libopcodes.Bfd obfd, global::libopcodes.BfdSection osec)
        {
            var __arg0 = ReferenceEquals(ibfd, null) ? global::System.IntPtr.Zero : ibfd.__Instance;
            var __arg1 = ReferenceEquals(isec, null) ? global::System.IntPtr.Zero : isec.__Instance;
            var __arg2 = ReferenceEquals(obfd, null) ? global::System.IntPtr.Zero : obfd.__Instance;
            var __arg3 = ReferenceEquals(osec, null) ? global::System.IntPtr.Zero : osec.__Instance;
            var __ret = __Internal.BfdCopyPrivateSectionData(__arg0, __arg1, __arg2, __arg3);
            return __ret;
        }

        public static int BfdGenericIsGroupSection(global::libopcodes.Bfd _0, global::libopcodes.BfdSection sec)
        {
            var __arg0 = ReferenceEquals(_0, null) ? global::System.IntPtr.Zero : _0.__Instance;
            var __arg1 = ReferenceEquals(sec, null) ? global::System.IntPtr.Zero : sec.__Instance;
            var __ret = __Internal.BfdGenericIsGroupSection(__arg0, __arg1);
            return __ret;
        }

        public static string BfdGenericGroupName(global::libopcodes.Bfd _0, global::libopcodes.BfdSection sec)
        {
            var __arg0 = ReferenceEquals(_0, null) ? global::System.IntPtr.Zero : _0.__Instance;
            var __arg1 = ReferenceEquals(sec, null) ? global::System.IntPtr.Zero : sec.__Instance;
            var __ret = __Internal.BfdGenericGroupName(__arg0, __arg1);
            if (__ret == global::System.IntPtr.Zero)
                return default(string);
            var __retPtr = (byte*) __ret;
            int __length = 0;
            while (*(__retPtr++) != 0) __length += sizeof(byte);
            return global::System.Text.Encoding.UTF8.GetString((byte*) __ret, __length);
        }

        public static int BfdGenericDiscardGroup(global::libopcodes.Bfd abfd, global::libopcodes.BfdSection group)
        {
            var __arg0 = ReferenceEquals(abfd, null) ? global::System.IntPtr.Zero : abfd.__Instance;
            var __arg1 = ReferenceEquals(group, null) ? global::System.IntPtr.Zero : group.__Instance;
            var __ret = __Internal.BfdGenericDiscardGroup(__arg0, __arg1);
            return __ret;
        }

        public static string BfdPrintableName(global::libopcodes.Bfd abfd)
        {
            var __arg0 = ReferenceEquals(abfd, null) ? global::System.IntPtr.Zero : abfd.__Instance;
            var __ret = __Internal.BfdPrintableName(__arg0);
            if (__ret == global::System.IntPtr.Zero)
                return default(string);
            var __retPtr = (byte*) __ret;
            int __length = 0;
            while (*(__retPtr++) != 0) __length += sizeof(byte);
            return global::System.Text.Encoding.UTF8.GetString((byte*) __ret, __length);
        }

        public static global::libopcodes.BfdArchInfo BfdScanArch(string @string)
        {
            var __ret = __Internal.BfdScanArch(@string);
            global::libopcodes.BfdArchInfo __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::libopcodes.BfdArchInfo.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::libopcodes.BfdArchInfo) global::libopcodes.BfdArchInfo.NativeToManagedMap[__ret];
            else __result0 = global::libopcodes.BfdArchInfo.__CreateInstance(__ret);
            return __result0;
        }

        public static global::libopcodes.BfdArchInfo BfdArchGetCompatible(global::libopcodes.Bfd abfd, global::libopcodes.Bfd bbfd, int accept_unknowns)
        {
            var __arg0 = ReferenceEquals(abfd, null) ? global::System.IntPtr.Zero : abfd.__Instance;
            var __arg1 = ReferenceEquals(bbfd, null) ? global::System.IntPtr.Zero : bbfd.__Instance;
            var __ret = __Internal.BfdArchGetCompatible(__arg0, __arg1, accept_unknowns);
            global::libopcodes.BfdArchInfo __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::libopcodes.BfdArchInfo.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::libopcodes.BfdArchInfo) global::libopcodes.BfdArchInfo.NativeToManagedMap[__ret];
            else __result0 = global::libopcodes.BfdArchInfo.__CreateInstance(__ret);
            return __result0;
        }

        public static void BfdSetArchInfo(global::libopcodes.Bfd abfd, global::libopcodes.BfdArchInfo arg)
        {
            var __arg0 = ReferenceEquals(abfd, null) ? global::System.IntPtr.Zero : abfd.__Instance;
            var __arg1 = ReferenceEquals(arg, null) ? global::System.IntPtr.Zero : arg.__Instance;
            __Internal.BfdSetArchInfo(__arg0, __arg1);
        }

        public static int BfdDefaultSetArchMach(global::libopcodes.Bfd abfd, global::libopcodes.BfdArchitecture arch, uint mach)
        {
            var __arg0 = ReferenceEquals(abfd, null) ? global::System.IntPtr.Zero : abfd.__Instance;
            var __ret = __Internal.BfdDefaultSetArchMach(__arg0, arch, mach);
            return __ret;
        }

        public static global::libopcodes.BfdArchitecture BfdGetArch(global::libopcodes.Bfd abfd)
        {
            var __arg0 = ReferenceEquals(abfd, null) ? global::System.IntPtr.Zero : abfd.__Instance;
            var __ret = __Internal.BfdGetArch(__arg0);
            return __ret;
        }

        public static uint BfdGetMach(global::libopcodes.Bfd abfd)
        {
            var __arg0 = ReferenceEquals(abfd, null) ? global::System.IntPtr.Zero : abfd.__Instance;
            var __ret = __Internal.BfdGetMach(__arg0);
            return __ret;
        }

        public static uint BfdArchBitsPerByte(global::libopcodes.Bfd abfd)
        {
            var __arg0 = ReferenceEquals(abfd, null) ? global::System.IntPtr.Zero : abfd.__Instance;
            var __ret = __Internal.BfdArchBitsPerByte(__arg0);
            return __ret;
        }

        public static uint BfdArchBitsPerAddress(global::libopcodes.Bfd abfd)
        {
            var __arg0 = ReferenceEquals(abfd, null) ? global::System.IntPtr.Zero : abfd.__Instance;
            var __ret = __Internal.BfdArchBitsPerAddress(__arg0);
            return __ret;
        }

        public static global::libopcodes.BfdArchInfo BfdGetArchInfo(global::libopcodes.Bfd abfd)
        {
            var __arg0 = ReferenceEquals(abfd, null) ? global::System.IntPtr.Zero : abfd.__Instance;
            var __ret = __Internal.BfdGetArchInfo(__arg0);
            global::libopcodes.BfdArchInfo __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::libopcodes.BfdArchInfo.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::libopcodes.BfdArchInfo) global::libopcodes.BfdArchInfo.NativeToManagedMap[__ret];
            else __result0 = global::libopcodes.BfdArchInfo.__CreateInstance(__ret);
            return __result0;
        }

        public static global::libopcodes.BfdArchInfo BfdLookupArch(global::libopcodes.BfdArchitecture arch, uint machine)
        {
            var __ret = __Internal.BfdLookupArch(arch, machine);
            global::libopcodes.BfdArchInfo __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::libopcodes.BfdArchInfo.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::libopcodes.BfdArchInfo) global::libopcodes.BfdArchInfo.NativeToManagedMap[__ret];
            else __result0 = global::libopcodes.BfdArchInfo.__CreateInstance(__ret);
            return __result0;
        }

        public static string BfdPrintableArchMach(global::libopcodes.BfdArchitecture arch, uint machine)
        {
            var __ret = __Internal.BfdPrintableArchMach(arch, machine);
            if (__ret == global::System.IntPtr.Zero)
                return default(string);
            var __retPtr = (byte*) __ret;
            int __length = 0;
            while (*(__retPtr++) != 0) __length += sizeof(byte);
            return global::System.Text.Encoding.UTF8.GetString((byte*) __ret, __length);
        }

        public static uint BfdOctetsPerByte(global::libopcodes.Bfd abfd, global::libopcodes.BfdSection sec)
        {
            var __arg0 = ReferenceEquals(abfd, null) ? global::System.IntPtr.Zero : abfd.__Instance;
            var __arg1 = ReferenceEquals(sec, null) ? global::System.IntPtr.Zero : sec.__Instance;
            var __ret = __Internal.BfdOctetsPerByte(__arg0, __arg1);
            return __ret;
        }

        public static uint BfdArchMachOctetsPerByte(global::libopcodes.BfdArchitecture arch, uint machine)
        {
            var __ret = __Internal.BfdArchMachOctetsPerByte(arch, machine);
            return __ret;
        }

        public static uint BfdGetRelocSize(global::libopcodes.RelocHowtoStruct _0)
        {
            var __arg0 = ReferenceEquals(_0, null) ? global::System.IntPtr.Zero : _0.__Instance;
            var __ret = __Internal.BfdGetRelocSize(__arg0);
            return __ret;
        }

        public static global::libopcodes.BfdRelocStatus BfdCheckOverflow(global::libopcodes.ComplainOverflow how, uint bitsize, uint rightshift, uint addrsize, ulong relocation)
        {
            var __ret = __Internal.BfdCheckOverflow(how, bitsize, rightshift, addrsize, relocation);
            return __ret;
        }

        public static int BfdRelocOffsetInRange(global::libopcodes.RelocHowtoStruct howto, global::libopcodes.Bfd abfd, global::libopcodes.BfdSection section, ulong offset)
        {
            var __arg0 = ReferenceEquals(howto, null) ? global::System.IntPtr.Zero : howto.__Instance;
            var __arg1 = ReferenceEquals(abfd, null) ? global::System.IntPtr.Zero : abfd.__Instance;
            var __arg2 = ReferenceEquals(section, null) ? global::System.IntPtr.Zero : section.__Instance;
            var __ret = __Internal.BfdRelocOffsetInRange(__arg0, __arg1, __arg2, offset);
            return __ret;
        }

        public static global::libopcodes.BfdRelocStatus BfdPerformRelocation(global::libopcodes.Bfd abfd, global::libopcodes.RelocCacheEntry reloc_entry, global::System.IntPtr data, global::libopcodes.BfdSection input_section, global::libopcodes.Bfd output_bfd, sbyte** error_message)
        {
            var __arg0 = ReferenceEquals(abfd, null) ? global::System.IntPtr.Zero : abfd.__Instance;
            var __arg1 = ReferenceEquals(reloc_entry, null) ? global::System.IntPtr.Zero : reloc_entry.__Instance;
            var __arg3 = ReferenceEquals(input_section, null) ? global::System.IntPtr.Zero : input_section.__Instance;
            var __arg4 = ReferenceEquals(output_bfd, null) ? global::System.IntPtr.Zero : output_bfd.__Instance;
            var __ret = __Internal.BfdPerformRelocation(__arg0, __arg1, data, __arg3, __arg4, error_message);
            return __ret;
        }

        public static global::libopcodes.BfdRelocStatus BfdInstallRelocation(global::libopcodes.Bfd abfd, global::libopcodes.RelocCacheEntry reloc_entry, global::System.IntPtr data, ulong data_start, global::libopcodes.BfdSection input_section, sbyte** error_message)
        {
            var __arg0 = ReferenceEquals(abfd, null) ? global::System.IntPtr.Zero : abfd.__Instance;
            var __arg1 = ReferenceEquals(reloc_entry, null) ? global::System.IntPtr.Zero : reloc_entry.__Instance;
            var __arg4 = ReferenceEquals(input_section, null) ? global::System.IntPtr.Zero : input_section.__Instance;
            var __ret = __Internal.BfdInstallRelocation(__arg0, __arg1, data, data_start, __arg4, error_message);
            return __ret;
        }

        public static global::libopcodes.RelocHowtoStruct BfdRelocTypeLookup(global::libopcodes.Bfd abfd, global::libopcodes.BfdRelocCodeReal code)
        {
            var __arg0 = ReferenceEquals(abfd, null) ? global::System.IntPtr.Zero : abfd.__Instance;
            var __ret = __Internal.BfdRelocTypeLookup(__arg0, code);
            global::libopcodes.RelocHowtoStruct __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::libopcodes.RelocHowtoStruct.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::libopcodes.RelocHowtoStruct) global::libopcodes.RelocHowtoStruct.NativeToManagedMap[__ret];
            else __result0 = global::libopcodes.RelocHowtoStruct.__CreateInstance(__ret);
            return __result0;
        }

        public static global::libopcodes.RelocHowtoStruct BfdRelocNameLookup(global::libopcodes.Bfd abfd, string reloc_name)
        {
            var __arg0 = ReferenceEquals(abfd, null) ? global::System.IntPtr.Zero : abfd.__Instance;
            var __ret = __Internal.BfdRelocNameLookup(__arg0, reloc_name);
            global::libopcodes.RelocHowtoStruct __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::libopcodes.RelocHowtoStruct.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::libopcodes.RelocHowtoStruct) global::libopcodes.RelocHowtoStruct.NativeToManagedMap[__ret];
            else __result0 = global::libopcodes.RelocHowtoStruct.__CreateInstance(__ret);
            return __result0;
        }

        public static string BfdGetRelocCodeName(global::libopcodes.BfdRelocCodeReal code)
        {
            var __ret = __Internal.BfdGetRelocCodeName(code);
            if (__ret == global::System.IntPtr.Zero)
                return default(string);
            var __retPtr = (byte*) __ret;
            int __length = 0;
            while (*(__retPtr++) != 0) __length += sizeof(byte);
            return global::System.Text.Encoding.UTF8.GetString((byte*) __ret, __length);
        }

        public static int BfdIsLocalLabel(global::libopcodes.Bfd abfd, global::libopcodes.BfdSymbol sym)
        {
            var __arg0 = ReferenceEquals(abfd, null) ? global::System.IntPtr.Zero : abfd.__Instance;
            var __arg1 = ReferenceEquals(sym, null) ? global::System.IntPtr.Zero : sym.__Instance;
            var __ret = __Internal.BfdIsLocalLabel(__arg0, __arg1);
            return __ret;
        }

        public static int BfdIsLocalLabelName(global::libopcodes.Bfd abfd, string name)
        {
            var __arg0 = ReferenceEquals(abfd, null) ? global::System.IntPtr.Zero : abfd.__Instance;
            var __ret = __Internal.BfdIsLocalLabelName(__arg0, name);
            return __ret;
        }

        public static int BfdIsTargetSpecialSymbol(global::libopcodes.Bfd abfd, global::libopcodes.BfdSymbol sym)
        {
            var __arg0 = ReferenceEquals(abfd, null) ? global::System.IntPtr.Zero : abfd.__Instance;
            var __arg1 = ReferenceEquals(sym, null) ? global::System.IntPtr.Zero : sym.__Instance;
            var __ret = __Internal.BfdIsTargetSpecialSymbol(__arg0, __arg1);
            return __ret;
        }

        public static int BfdSetSymtab(global::libopcodes.Bfd abfd, global::libopcodes.BfdSymbol location, uint count)
        {
            var __arg0 = ReferenceEquals(abfd, null) ? global::System.IntPtr.Zero : abfd.__Instance;
            var ____arg1 = ReferenceEquals(location, null) ? global::System.IntPtr.Zero : location.__Instance;
            var __arg1 = new global::System.IntPtr(&____arg1);
            var __ret = __Internal.BfdSetSymtab(__arg0, __arg1, count);
            return __ret;
        }

        public static void BfdPrintSymbolVandf(global::libopcodes.Bfd abfd, global::System.IntPtr file, global::libopcodes.BfdSymbol symbol)
        {
            var __arg0 = ReferenceEquals(abfd, null) ? global::System.IntPtr.Zero : abfd.__Instance;
            var __arg2 = ReferenceEquals(symbol, null) ? global::System.IntPtr.Zero : symbol.__Instance;
            __Internal.BfdPrintSymbolVandf(__arg0, file, __arg2);
        }

        public static global::libopcodes.BfdSymbol BfdGenericMakeEmptySymbol(global::libopcodes.Bfd _0)
        {
            var __arg0 = ReferenceEquals(_0, null) ? global::System.IntPtr.Zero : _0.__Instance;
            var __ret = __Internal.BfdGenericMakeEmptySymbol(__arg0);
            global::libopcodes.BfdSymbol __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::libopcodes.BfdSymbol.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::libopcodes.BfdSymbol) global::libopcodes.BfdSymbol.NativeToManagedMap[__ret];
            else __result0 = global::libopcodes.BfdSymbol.__CreateInstance(__ret);
            return __result0;
        }

        public static int BfdDecodeSymclass(global::libopcodes.BfdSymbol symbol)
        {
            var __arg0 = ReferenceEquals(symbol, null) ? global::System.IntPtr.Zero : symbol.__Instance;
            var __ret = __Internal.BfdDecodeSymclass(__arg0);
            return __ret;
        }

        public static int BfdIsUndefinedSymclass(int symclass)
        {
            var __ret = __Internal.BfdIsUndefinedSymclass(symclass);
            return __ret;
        }

        public static void BfdSymbolInfo(global::libopcodes.BfdSymbol symbol, global::libopcodes.SymbolInfo ret)
        {
            var __arg0 = ReferenceEquals(symbol, null) ? global::System.IntPtr.Zero : symbol.__Instance;
            var __arg1 = ReferenceEquals(ret, null) ? global::System.IntPtr.Zero : ret.__Instance;
            __Internal.BfdSymbolInfo(__arg0, __arg1);
        }

        public static int BfdCopyPrivateSymbolData(global::libopcodes.Bfd ibfd, global::libopcodes.BfdSymbol isym, global::libopcodes.Bfd obfd, global::libopcodes.BfdSymbol osym)
        {
            var __arg0 = ReferenceEquals(ibfd, null) ? global::System.IntPtr.Zero : ibfd.__Instance;
            var __arg1 = ReferenceEquals(isym, null) ? global::System.IntPtr.Zero : isym.__Instance;
            var __arg2 = ReferenceEquals(obfd, null) ? global::System.IntPtr.Zero : obfd.__Instance;
            var __arg3 = ReferenceEquals(osym, null) ? global::System.IntPtr.Zero : osym.__Instance;
            var __ret = __Internal.BfdCopyPrivateSymbolData(__arg0, __arg1, __arg2, __arg3);
            return __ret;
        }

        public static string BfdGetFilename(global::libopcodes.Bfd abfd)
        {
            var __arg0 = ReferenceEquals(abfd, null) ? global::System.IntPtr.Zero : abfd.__Instance;
            var __ret = __Internal.BfdGetFilename(__arg0);
            if (__ret == global::System.IntPtr.Zero)
                return default(string);
            var __retPtr = (byte*) __ret;
            int __length = 0;
            while (*(__retPtr++) != 0) __length += sizeof(byte);
            return global::System.Text.Encoding.UTF8.GetString((byte*) __ret, __length);
        }

        public static int BfdGetCacheable(global::libopcodes.Bfd abfd)
        {
            var __arg0 = ReferenceEquals(abfd, null) ? global::System.IntPtr.Zero : abfd.__Instance;
            var __ret = __Internal.BfdGetCacheable(__arg0);
            return __ret;
        }

        public static global::libopcodes.BfdFormat BfdGetFormat(global::libopcodes.Bfd abfd)
        {
            var __arg0 = ReferenceEquals(abfd, null) ? global::System.IntPtr.Zero : abfd.__Instance;
            var __ret = __Internal.BfdGetFormat(__arg0);
            return __ret;
        }

        public static uint BfdGetFileFlags(global::libopcodes.Bfd abfd)
        {
            var __arg0 = ReferenceEquals(abfd, null) ? global::System.IntPtr.Zero : abfd.__Instance;
            var __ret = __Internal.BfdGetFileFlags(__arg0);
            return __ret;
        }

        public static ulong BfdGetStartAddress(global::libopcodes.Bfd abfd)
        {
            var __arg0 = ReferenceEquals(abfd, null) ? global::System.IntPtr.Zero : abfd.__Instance;
            var __ret = __Internal.BfdGetStartAddress(__arg0);
            return __ret;
        }

        public static uint BfdGetSymcount(global::libopcodes.Bfd abfd)
        {
            var __arg0 = ReferenceEquals(abfd, null) ? global::System.IntPtr.Zero : abfd.__Instance;
            var __ret = __Internal.BfdGetSymcount(__arg0);
            return __ret;
        }

        public static uint BfdGetDynamicSymcount(global::libopcodes.Bfd abfd)
        {
            var __arg0 = ReferenceEquals(abfd, null) ? global::System.IntPtr.Zero : abfd.__Instance;
            var __ret = __Internal.BfdGetDynamicSymcount(__arg0);
            return __ret;
        }

        public static global::libopcodes.BfdSymbol BfdGetOutsymbols(global::libopcodes.Bfd abfd)
        {
            var __arg0 = ReferenceEquals(abfd, null) ? global::System.IntPtr.Zero : abfd.__Instance;
            var __ret = __Internal.BfdGetOutsymbols(__arg0);
            global::System.IntPtr ____ret = __ret == global::System.IntPtr.Zero ? global::System.IntPtr.Zero : new global::System.IntPtr(*(void**) __ret);
            global::libopcodes.BfdSymbol __result0;
            if (____ret == IntPtr.Zero) __result0 = null;
            else if (global::libopcodes.BfdSymbol.NativeToManagedMap.ContainsKey(____ret))
                __result0 = (global::libopcodes.BfdSymbol) global::libopcodes.BfdSymbol.NativeToManagedMap[____ret];
            else __result0 = global::libopcodes.BfdSymbol.__CreateInstance(____ret);
            return __result0;
        }

        public static uint BfdCountSections(global::libopcodes.Bfd abfd)
        {
            var __arg0 = ReferenceEquals(abfd, null) ? global::System.IntPtr.Zero : abfd.__Instance;
            var __ret = __Internal.BfdCountSections(__arg0);
            return __ret;
        }

        public static int BfdHasMap(global::libopcodes.Bfd abfd)
        {
            var __arg0 = ReferenceEquals(abfd, null) ? global::System.IntPtr.Zero : abfd.__Instance;
            var __ret = __Internal.BfdHasMap(__arg0);
            return __ret;
        }

        public static int BfdIsThinArchive(global::libopcodes.Bfd abfd)
        {
            var __arg0 = ReferenceEquals(abfd, null) ? global::System.IntPtr.Zero : abfd.__Instance;
            var __ret = __Internal.BfdIsThinArchive(__arg0);
            return __ret;
        }

        public static global::System.IntPtr BfdUsrdata(global::libopcodes.Bfd abfd)
        {
            var __arg0 = ReferenceEquals(abfd, null) ? global::System.IntPtr.Zero : abfd.__Instance;
            var __ret = __Internal.BfdUsrdata(__arg0);
            return __ret;
        }

        public static int BfdSetCacheable(global::libopcodes.Bfd abfd, int val)
        {
            var __arg0 = ReferenceEquals(abfd, null) ? global::System.IntPtr.Zero : abfd.__Instance;
            var __ret = __Internal.BfdSetCacheable(__arg0, val);
            return __ret;
        }

        public static void BfdSetThinArchive(global::libopcodes.Bfd abfd, int val)
        {
            var __arg0 = ReferenceEquals(abfd, null) ? global::System.IntPtr.Zero : abfd.__Instance;
            __Internal.BfdSetThinArchive(__arg0, val);
        }

        public static void BfdSetUsrdata(global::libopcodes.Bfd abfd, global::System.IntPtr val)
        {
            var __arg0 = ReferenceEquals(abfd, null) ? global::System.IntPtr.Zero : abfd.__Instance;
            __Internal.BfdSetUsrdata(__arg0, val);
        }

        public static global::libopcodes.BfdSection BfdAsymbolSection(global::libopcodes.BfdSymbol sy)
        {
            var __arg0 = ReferenceEquals(sy, null) ? global::System.IntPtr.Zero : sy.__Instance;
            var __ret = __Internal.BfdAsymbolSection(__arg0);
            global::libopcodes.BfdSection __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::libopcodes.BfdSection.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::libopcodes.BfdSection) global::libopcodes.BfdSection.NativeToManagedMap[__ret];
            else __result0 = global::libopcodes.BfdSection.__CreateInstance(__ret);
            return __result0;
        }

        public static ulong BfdAsymbolValue(global::libopcodes.BfdSymbol sy)
        {
            var __arg0 = ReferenceEquals(sy, null) ? global::System.IntPtr.Zero : sy.__Instance;
            var __ret = __Internal.BfdAsymbolValue(__arg0);
            return __ret;
        }

        public static string BfdAsymbolName(global::libopcodes.BfdSymbol sy)
        {
            var __arg0 = ReferenceEquals(sy, null) ? global::System.IntPtr.Zero : sy.__Instance;
            var __ret = __Internal.BfdAsymbolName(__arg0);
            if (__ret == global::System.IntPtr.Zero)
                return default(string);
            var __retPtr = (byte*) __ret;
            int __length = 0;
            while (*(__retPtr++) != 0) __length += sizeof(byte);
            return global::System.Text.Encoding.UTF8.GetString((byte*) __ret, __length);
        }

        public static global::libopcodes.Bfd BfdAsymbolBfd(global::libopcodes.BfdSymbol sy)
        {
            var __arg0 = ReferenceEquals(sy, null) ? global::System.IntPtr.Zero : sy.__Instance;
            var __ret = __Internal.BfdAsymbolBfd(__arg0);
            global::libopcodes.Bfd __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::libopcodes.Bfd.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::libopcodes.Bfd) global::libopcodes.Bfd.NativeToManagedMap[__ret];
            else __result0 = global::libopcodes.Bfd.__CreateInstance(__ret);
            return __result0;
        }

        public static void BfdSetAsymbolName(global::libopcodes.BfdSymbol sy, string name)
        {
            var __arg0 = ReferenceEquals(sy, null) ? global::System.IntPtr.Zero : sy.__Instance;
            __Internal.BfdSetAsymbolName(__arg0, name);
        }

        public static ulong BfdGetSectionLimitOctets(global::libopcodes.Bfd abfd, global::libopcodes.BfdSection sec)
        {
            var __arg0 = ReferenceEquals(abfd, null) ? global::System.IntPtr.Zero : abfd.__Instance;
            var __arg1 = ReferenceEquals(sec, null) ? global::System.IntPtr.Zero : sec.__Instance;
            var __ret = __Internal.BfdGetSectionLimitOctets(__arg0, __arg1);
            return __ret;
        }

        public static ulong BfdGetSectionLimit(global::libopcodes.Bfd abfd, global::libopcodes.BfdSection sec)
        {
            var __arg0 = ReferenceEquals(abfd, null) ? global::System.IntPtr.Zero : abfd.__Instance;
            var __arg1 = ReferenceEquals(sec, null) ? global::System.IntPtr.Zero : sec.__Instance;
            var __ret = __Internal.BfdGetSectionLimit(__arg0, __arg1);
            return __ret;
        }

        public static void BfdSectionListRemove(global::libopcodes.Bfd abfd, global::libopcodes.BfdSection s)
        {
            var __arg0 = ReferenceEquals(abfd, null) ? global::System.IntPtr.Zero : abfd.__Instance;
            var __arg1 = ReferenceEquals(s, null) ? global::System.IntPtr.Zero : s.__Instance;
            __Internal.BfdSectionListRemove(__arg0, __arg1);
        }

        public static void BfdSectionListAppend(global::libopcodes.Bfd abfd, global::libopcodes.BfdSection s)
        {
            var __arg0 = ReferenceEquals(abfd, null) ? global::System.IntPtr.Zero : abfd.__Instance;
            var __arg1 = ReferenceEquals(s, null) ? global::System.IntPtr.Zero : s.__Instance;
            __Internal.BfdSectionListAppend(__arg0, __arg1);
        }

        public static void BfdSectionListPrepend(global::libopcodes.Bfd abfd, global::libopcodes.BfdSection s)
        {
            var __arg0 = ReferenceEquals(abfd, null) ? global::System.IntPtr.Zero : abfd.__Instance;
            var __arg1 = ReferenceEquals(s, null) ? global::System.IntPtr.Zero : s.__Instance;
            __Internal.BfdSectionListPrepend(__arg0, __arg1);
        }

        public static void BfdSectionListInsertAfter(global::libopcodes.Bfd abfd, global::libopcodes.BfdSection a, global::libopcodes.BfdSection s)
        {
            var __arg0 = ReferenceEquals(abfd, null) ? global::System.IntPtr.Zero : abfd.__Instance;
            var __arg1 = ReferenceEquals(a, null) ? global::System.IntPtr.Zero : a.__Instance;
            var __arg2 = ReferenceEquals(s, null) ? global::System.IntPtr.Zero : s.__Instance;
            __Internal.BfdSectionListInsertAfter(__arg0, __arg1, __arg2);
        }

        public static void BfdSectionListInsertBefore(global::libopcodes.Bfd abfd, global::libopcodes.BfdSection b, global::libopcodes.BfdSection s)
        {
            var __arg0 = ReferenceEquals(abfd, null) ? global::System.IntPtr.Zero : abfd.__Instance;
            var __arg1 = ReferenceEquals(b, null) ? global::System.IntPtr.Zero : b.__Instance;
            var __arg2 = ReferenceEquals(s, null) ? global::System.IntPtr.Zero : s.__Instance;
            __Internal.BfdSectionListInsertBefore(__arg0, __arg1, __arg2);
        }

        public static int BfdSectionRemovedFromList(global::libopcodes.Bfd abfd, global::libopcodes.BfdSection s)
        {
            var __arg0 = ReferenceEquals(abfd, null) ? global::System.IntPtr.Zero : abfd.__Instance;
            var __arg1 = ReferenceEquals(s, null) ? global::System.IntPtr.Zero : s.__Instance;
            var __ret = __Internal.BfdSectionRemovedFromList(__arg0, __arg1);
            return __ret;
        }

        public static void BfdSetError(global::libopcodes.BfdError error_tag)
        {
            __Internal.BfdSetError(error_tag);
        }

        public static void BfdSetInputError(global::libopcodes.Bfd input, global::libopcodes.BfdError error_tag)
        {
            var __arg0 = ReferenceEquals(input, null) ? global::System.IntPtr.Zero : input.__Instance;
            __Internal.BfdSetInputError(__arg0, error_tag);
        }

        public static string BfdErrmsg(global::libopcodes.BfdError error_tag)
        {
            var __ret = __Internal.BfdErrmsg(error_tag);
            if (__ret == global::System.IntPtr.Zero)
                return default(string);
            var __retPtr = (byte*) __ret;
            int __length = 0;
            while (*(__retPtr++) != 0) __length += sizeof(byte);
            return global::System.Text.Encoding.UTF8.GetString((byte*) __ret, __length);
        }

        public static void BfdPerror(string message)
        {
            __Internal.BfdPerror(message);
        }

        public static void BfdErrorHandler(string fmt)
        {
            __Internal.BfdErrorHandler(fmt);
        }

        public static void BfdSetErrorProgramName(string _0)
        {
            __Internal.BfdSetErrorProgramName(_0);
        }

        public static global::libopcodes.BfdAssertHandlerType BfdSetAssertHandler(global::libopcodes.BfdAssertHandlerType _0)
        {
            var __arg0 = _0 == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(_0);
            var __ret = __Internal.BfdSetAssertHandler(__arg0);
            var __ptr0 = __ret;
            return __ptr0 == IntPtr.Zero? null : (global::libopcodes.BfdAssertHandlerType) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::libopcodes.BfdAssertHandlerType));
        }

        public static int BfdGetRelocUpperBound(global::libopcodes.Bfd abfd, global::libopcodes.BfdSection sect)
        {
            var __arg0 = ReferenceEquals(abfd, null) ? global::System.IntPtr.Zero : abfd.__Instance;
            var __arg1 = ReferenceEquals(sect, null) ? global::System.IntPtr.Zero : sect.__Instance;
            var __ret = __Internal.BfdGetRelocUpperBound(__arg0, __arg1);
            return __ret;
        }

        public static int BfdCanonicalizeReloc(global::libopcodes.Bfd abfd, global::libopcodes.BfdSection sec, global::libopcodes.RelocCacheEntry loc, global::libopcodes.BfdSymbol syms)
        {
            var __arg0 = ReferenceEquals(abfd, null) ? global::System.IntPtr.Zero : abfd.__Instance;
            var __arg1 = ReferenceEquals(sec, null) ? global::System.IntPtr.Zero : sec.__Instance;
            var ____arg2 = ReferenceEquals(loc, null) ? global::System.IntPtr.Zero : loc.__Instance;
            var __arg2 = new global::System.IntPtr(&____arg2);
            var ____arg3 = ReferenceEquals(syms, null) ? global::System.IntPtr.Zero : syms.__Instance;
            var __arg3 = new global::System.IntPtr(&____arg3);
            var __ret = __Internal.BfdCanonicalizeReloc(__arg0, __arg1, __arg2, __arg3);
            return __ret;
        }

        public static void BfdSetReloc(global::libopcodes.Bfd abfd, global::libopcodes.BfdSection sec, global::libopcodes.RelocCacheEntry rel, uint count)
        {
            var __arg0 = ReferenceEquals(abfd, null) ? global::System.IntPtr.Zero : abfd.__Instance;
            var __arg1 = ReferenceEquals(sec, null) ? global::System.IntPtr.Zero : sec.__Instance;
            var ____arg2 = ReferenceEquals(rel, null) ? global::System.IntPtr.Zero : rel.__Instance;
            var __arg2 = new global::System.IntPtr(&____arg2);
            __Internal.BfdSetReloc(__arg0, __arg1, __arg2, count);
        }

        public static int BfdSetFileFlags(global::libopcodes.Bfd abfd, uint flags)
        {
            var __arg0 = ReferenceEquals(abfd, null) ? global::System.IntPtr.Zero : abfd.__Instance;
            var __ret = __Internal.BfdSetFileFlags(__arg0, flags);
            return __ret;
        }

        public static int BfdGetArchSize(global::libopcodes.Bfd abfd)
        {
            var __arg0 = ReferenceEquals(abfd, null) ? global::System.IntPtr.Zero : abfd.__Instance;
            var __ret = __Internal.BfdGetArchSize(__arg0);
            return __ret;
        }

        public static int BfdGetSignExtendVma(global::libopcodes.Bfd abfd)
        {
            var __arg0 = ReferenceEquals(abfd, null) ? global::System.IntPtr.Zero : abfd.__Instance;
            var __ret = __Internal.BfdGetSignExtendVma(__arg0);
            return __ret;
        }

        public static int BfdSetStartAddress(global::libopcodes.Bfd abfd, ulong vma)
        {
            var __arg0 = ReferenceEquals(abfd, null) ? global::System.IntPtr.Zero : abfd.__Instance;
            var __ret = __Internal.BfdSetStartAddress(__arg0, vma);
            return __ret;
        }

        public static uint BfdGetGpSize(global::libopcodes.Bfd abfd)
        {
            var __arg0 = ReferenceEquals(abfd, null) ? global::System.IntPtr.Zero : abfd.__Instance;
            var __ret = __Internal.BfdGetGpSize(__arg0);
            return __ret;
        }

        public static void BfdSetGpSize(global::libopcodes.Bfd abfd, uint i)
        {
            var __arg0 = ReferenceEquals(abfd, null) ? global::System.IntPtr.Zero : abfd.__Instance;
            __Internal.BfdSetGpSize(__arg0, i);
        }

        public static ulong BfdScanVma(string @string, sbyte** end, int @base)
        {
            var __ret = __Internal.BfdScanVma(@string, end, @base);
            return __ret;
        }

        public static int BfdCopyPrivateHeaderData(global::libopcodes.Bfd ibfd, global::libopcodes.Bfd obfd)
        {
            var __arg0 = ReferenceEquals(ibfd, null) ? global::System.IntPtr.Zero : ibfd.__Instance;
            var __arg1 = ReferenceEquals(obfd, null) ? global::System.IntPtr.Zero : obfd.__Instance;
            var __ret = __Internal.BfdCopyPrivateHeaderData(__arg0, __arg1);
            return __ret;
        }

        public static int BfdCopyPrivateBfdData(global::libopcodes.Bfd ibfd, global::libopcodes.Bfd obfd)
        {
            var __arg0 = ReferenceEquals(ibfd, null) ? global::System.IntPtr.Zero : ibfd.__Instance;
            var __arg1 = ReferenceEquals(obfd, null) ? global::System.IntPtr.Zero : obfd.__Instance;
            var __ret = __Internal.BfdCopyPrivateBfdData(__arg0, __arg1);
            return __ret;
        }

        public static int BfdSetPrivateFlags(global::libopcodes.Bfd abfd, uint flags)
        {
            var __arg0 = ReferenceEquals(abfd, null) ? global::System.IntPtr.Zero : abfd.__Instance;
            var __ret = __Internal.BfdSetPrivateFlags(__arg0, flags);
            return __ret;
        }

        public static byte* BfdGetRelocatedSectionContents(global::libopcodes.Bfd _0, global::libopcodes.BfdLinkInfo _1, global::libopcodes.BfdLinkOrder _2, byte* _3, int _4, global::libopcodes.BfdSymbol _5)
        {
            var __arg0 = ReferenceEquals(_0, null) ? global::System.IntPtr.Zero : _0.__Instance;
            var __arg1 = ReferenceEquals(_1, null) ? global::System.IntPtr.Zero : _1.__Instance;
            var __arg2 = ReferenceEquals(_2, null) ? global::System.IntPtr.Zero : _2.__Instance;
            var ____arg5 = ReferenceEquals(_5, null) ? global::System.IntPtr.Zero : _5.__Instance;
            var __arg5 = new global::System.IntPtr(&____arg5);
            var __ret = __Internal.BfdGetRelocatedSectionContents(__arg0, __arg1, __arg2, _3, _4, __arg5);
            return __ret;
        }

        public static int BfdAltMachCode(global::libopcodes.Bfd abfd, int alternative)
        {
            var __arg0 = ReferenceEquals(abfd, null) ? global::System.IntPtr.Zero : abfd.__Instance;
            var __ret = __Internal.BfdAltMachCode(__arg0, alternative);
            return __ret;
        }

        public static ulong BfdEmulGetMaxpagesize(string _0)
        {
            var __ret = __Internal.BfdEmulGetMaxpagesize(_0);
            return __ret;
        }

        public static void BfdEmulSetMaxpagesize(string _0, ulong _1)
        {
            __Internal.BfdEmulSetMaxpagesize(_0, _1);
        }

        public static ulong BfdEmulGetCommonpagesize(string _0, int _1)
        {
            var __ret = __Internal.BfdEmulGetCommonpagesize(_0, _1);
            return __ret;
        }

        public static void BfdEmulSetCommonpagesize(string _0, ulong _1)
        {
            __Internal.BfdEmulSetCommonpagesize(_0, _1);
        }

        public static sbyte* BfdDemangle(global::libopcodes.Bfd _0, string _1, int _2)
        {
            var __arg0 = ReferenceEquals(_0, null) ? global::System.IntPtr.Zero : _0.__Instance;
            var __ret = __Internal.BfdDemangle(__arg0, _1, _2);
            return __ret;
        }

        public static void BfdUpdateCompressionHeader(global::libopcodes.Bfd abfd, byte* contents, global::libopcodes.BfdSection sec)
        {
            var __arg0 = ReferenceEquals(abfd, null) ? global::System.IntPtr.Zero : abfd.__Instance;
            var __arg2 = ReferenceEquals(sec, null) ? global::System.IntPtr.Zero : sec.__Instance;
            __Internal.BfdUpdateCompressionHeader(__arg0, contents, __arg2);
        }

        public static int BfdCheckCompressionHeader(global::libopcodes.Bfd abfd, byte* contents, global::libopcodes.BfdSection sec, ref ulong uncompressed_size, ref uint uncompressed_alignment_power)
        {
            var __arg0 = ReferenceEquals(abfd, null) ? global::System.IntPtr.Zero : abfd.__Instance;
            var __arg2 = ReferenceEquals(sec, null) ? global::System.IntPtr.Zero : sec.__Instance;
            fixed (ulong* __uncompressed_size3 = &uncompressed_size)
            {
                var __arg3 = __uncompressed_size3;
                fixed (uint* __uncompressed_alignment_power4 = &uncompressed_alignment_power)
                {
                    var __arg4 = __uncompressed_alignment_power4;
                    var __ret = __Internal.BfdCheckCompressionHeader(__arg0, contents, __arg2, __arg3, __arg4);
                    return __ret;
                }
            }
        }

        public static int BfdGetCompressionHeaderSize(global::libopcodes.Bfd abfd, global::libopcodes.BfdSection sec)
        {
            var __arg0 = ReferenceEquals(abfd, null) ? global::System.IntPtr.Zero : abfd.__Instance;
            var __arg1 = ReferenceEquals(sec, null) ? global::System.IntPtr.Zero : sec.__Instance;
            var __ret = __Internal.BfdGetCompressionHeaderSize(__arg0, __arg1);
            return __ret;
        }

        public static ulong BfdConvertSectionSize(global::libopcodes.Bfd ibfd, global::libopcodes.BfdSection isec, global::libopcodes.Bfd obfd, ulong size)
        {
            var __arg0 = ReferenceEquals(ibfd, null) ? global::System.IntPtr.Zero : ibfd.__Instance;
            var __arg1 = ReferenceEquals(isec, null) ? global::System.IntPtr.Zero : isec.__Instance;
            var __arg2 = ReferenceEquals(obfd, null) ? global::System.IntPtr.Zero : obfd.__Instance;
            var __ret = __Internal.BfdConvertSectionSize(__arg0, __arg1, __arg2, size);
            return __ret;
        }

        public static int BfdConvertSectionContents(global::libopcodes.Bfd ibfd, global::libopcodes.BfdSection isec, global::libopcodes.Bfd obfd, byte** ptr, ref ulong ptr_size)
        {
            var __arg0 = ReferenceEquals(ibfd, null) ? global::System.IntPtr.Zero : ibfd.__Instance;
            var __arg1 = ReferenceEquals(isec, null) ? global::System.IntPtr.Zero : isec.__Instance;
            var __arg2 = ReferenceEquals(obfd, null) ? global::System.IntPtr.Zero : obfd.__Instance;
            fixed (ulong* __ptr_size4 = &ptr_size)
            {
                var __arg4 = __ptr_size4;
                var __ret = __Internal.BfdConvertSectionContents(__arg0, __arg1, __arg2, ptr, __arg4);
                return __ret;
            }
        }

        public static uint BfdGetNextMapent(global::libopcodes.Bfd abfd, uint previous, global::libopcodes.Carsym sym)
        {
            var __arg0 = ReferenceEquals(abfd, null) ? global::System.IntPtr.Zero : abfd.__Instance;
            var ____arg2 = ReferenceEquals(sym, null) ? global::System.IntPtr.Zero : sym.__Instance;
            var __arg2 = new global::System.IntPtr(&____arg2);
            var __ret = __Internal.BfdGetNextMapent(__arg0, previous, __arg2);
            return __ret;
        }

        public static int BfdSetArchiveHead(global::libopcodes.Bfd output, global::libopcodes.Bfd new_head)
        {
            var __arg0 = ReferenceEquals(output, null) ? global::System.IntPtr.Zero : output.__Instance;
            var __arg1 = ReferenceEquals(new_head, null) ? global::System.IntPtr.Zero : new_head.__Instance;
            var __ret = __Internal.BfdSetArchiveHead(__arg0, __arg1);
            return __ret;
        }

        public static global::libopcodes.Bfd BfdOpenrNextArchivedFile(global::libopcodes.Bfd archive, global::libopcodes.Bfd previous)
        {
            var __arg0 = ReferenceEquals(archive, null) ? global::System.IntPtr.Zero : archive.__Instance;
            var __arg1 = ReferenceEquals(previous, null) ? global::System.IntPtr.Zero : previous.__Instance;
            var __ret = __Internal.BfdOpenrNextArchivedFile(__arg0, __arg1);
            global::libopcodes.Bfd __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::libopcodes.Bfd.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::libopcodes.Bfd) global::libopcodes.Bfd.NativeToManagedMap[__ret];
            else __result0 = global::libopcodes.Bfd.__CreateInstance(__ret);
            return __result0;
        }

        public static string BfdCoreFileFailingCommand(global::libopcodes.Bfd abfd)
        {
            var __arg0 = ReferenceEquals(abfd, null) ? global::System.IntPtr.Zero : abfd.__Instance;
            var __ret = __Internal.BfdCoreFileFailingCommand(__arg0);
            if (__ret == global::System.IntPtr.Zero)
                return default(string);
            var __retPtr = (byte*) __ret;
            int __length = 0;
            while (*(__retPtr++) != 0) __length += sizeof(byte);
            return global::System.Text.Encoding.UTF8.GetString((byte*) __ret, __length);
        }

        public static int BfdCoreFileFailingSignal(global::libopcodes.Bfd abfd)
        {
            var __arg0 = ReferenceEquals(abfd, null) ? global::System.IntPtr.Zero : abfd.__Instance;
            var __ret = __Internal.BfdCoreFileFailingSignal(__arg0);
            return __ret;
        }

        public static int BfdCoreFilePid(global::libopcodes.Bfd abfd)
        {
            var __arg0 = ReferenceEquals(abfd, null) ? global::System.IntPtr.Zero : abfd.__Instance;
            var __ret = __Internal.BfdCoreFilePid(__arg0);
            return __ret;
        }

        public static int CoreFileMatchesExecutableP(global::libopcodes.Bfd core_bfd, global::libopcodes.Bfd exec_bfd)
        {
            var __arg0 = ReferenceEquals(core_bfd, null) ? global::System.IntPtr.Zero : core_bfd.__Instance;
            var __arg1 = ReferenceEquals(exec_bfd, null) ? global::System.IntPtr.Zero : exec_bfd.__Instance;
            var __ret = __Internal.CoreFileMatchesExecutableP(__arg0, __arg1);
            return __ret;
        }

        public static int GenericCoreFileMatchesExecutableP(global::libopcodes.Bfd core_bfd, global::libopcodes.Bfd exec_bfd)
        {
            var __arg0 = ReferenceEquals(core_bfd, null) ? global::System.IntPtr.Zero : core_bfd.__Instance;
            var __arg1 = ReferenceEquals(exec_bfd, null) ? global::System.IntPtr.Zero : exec_bfd.__Instance;
            var __ret = __Internal.GenericCoreFileMatchesExecutableP(__arg0, __arg1);
            return __ret;
        }

        public static string BfdGetTarget(global::libopcodes.Bfd abfd)
        {
            var __arg0 = ReferenceEquals(abfd, null) ? global::System.IntPtr.Zero : abfd.__Instance;
            var __ret = __Internal.BfdGetTarget(__arg0);
            if (__ret == global::System.IntPtr.Zero)
                return default(string);
            var __retPtr = (byte*) __ret;
            int __length = 0;
            while (*(__retPtr++) != 0) __length += sizeof(byte);
            return global::System.Text.Encoding.UTF8.GetString((byte*) __ret, __length);
        }

        public static global::libopcodes.BfdFlavour BfdGetFlavour(global::libopcodes.Bfd abfd)
        {
            var __arg0 = ReferenceEquals(abfd, null) ? global::System.IntPtr.Zero : abfd.__Instance;
            var __ret = __Internal.BfdGetFlavour(__arg0);
            return __ret;
        }

        public static uint BfdApplicableFileFlags(global::libopcodes.Bfd abfd)
        {
            var __arg0 = ReferenceEquals(abfd, null) ? global::System.IntPtr.Zero : abfd.__Instance;
            var __ret = __Internal.BfdApplicableFileFlags(__arg0);
            return __ret;
        }

        public static int BfdFamilyCoff(global::libopcodes.Bfd abfd)
        {
            var __arg0 = ReferenceEquals(abfd, null) ? global::System.IntPtr.Zero : abfd.__Instance;
            var __ret = __Internal.BfdFamilyCoff(__arg0);
            return __ret;
        }

        public static int BfdBigEndian(global::libopcodes.Bfd abfd)
        {
            var __arg0 = ReferenceEquals(abfd, null) ? global::System.IntPtr.Zero : abfd.__Instance;
            var __ret = __Internal.BfdBigEndian(__arg0);
            return __ret;
        }

        public static int BfdLittleEndian(global::libopcodes.Bfd abfd)
        {
            var __arg0 = ReferenceEquals(abfd, null) ? global::System.IntPtr.Zero : abfd.__Instance;
            var __ret = __Internal.BfdLittleEndian(__arg0);
            return __ret;
        }

        public static int BfdHeaderBigEndian(global::libopcodes.Bfd abfd)
        {
            var __arg0 = ReferenceEquals(abfd, null) ? global::System.IntPtr.Zero : abfd.__Instance;
            var __ret = __Internal.BfdHeaderBigEndian(__arg0);
            return __ret;
        }

        public static int BfdHeaderLittleEndian(global::libopcodes.Bfd abfd)
        {
            var __arg0 = ReferenceEquals(abfd, null) ? global::System.IntPtr.Zero : abfd.__Instance;
            var __ret = __Internal.BfdHeaderLittleEndian(__arg0);
            return __ret;
        }

        public static uint BfdApplicableSectionFlags(global::libopcodes.Bfd abfd)
        {
            var __arg0 = ReferenceEquals(abfd, null) ? global::System.IntPtr.Zero : abfd.__Instance;
            var __ret = __Internal.BfdApplicableSectionFlags(__arg0);
            return __ret;
        }

        public static sbyte BfdGetSymbolLeadingChar(global::libopcodes.Bfd abfd)
        {
            var __arg0 = ReferenceEquals(abfd, null) ? global::System.IntPtr.Zero : abfd.__Instance;
            var __ret = __Internal.BfdGetSymbolLeadingChar(__arg0);
            return __ret;
        }

        public static global::libopcodes.BfdFlavour BfdAsymbolFlavour(global::libopcodes.BfdSymbol sy)
        {
            var __arg0 = ReferenceEquals(sy, null) ? global::System.IntPtr.Zero : sy.__Instance;
            var __ret = __Internal.BfdAsymbolFlavour(__arg0);
            return __ret;
        }

        public static int BfdSetDefaultTarget(string name)
        {
            var __ret = __Internal.BfdSetDefaultTarget(name);
            return __ret;
        }

        public static global::libopcodes.BfdTarget BfdFindTarget(string target_name, global::libopcodes.Bfd abfd)
        {
            var __arg1 = ReferenceEquals(abfd, null) ? global::System.IntPtr.Zero : abfd.__Instance;
            var __ret = __Internal.BfdFindTarget(target_name, __arg1);
            global::libopcodes.BfdTarget __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::libopcodes.BfdTarget.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::libopcodes.BfdTarget) global::libopcodes.BfdTarget.NativeToManagedMap[__ret];
            else __result0 = global::libopcodes.BfdTarget.__CreateInstance(__ret);
            return __result0;
        }

        public static global::libopcodes.BfdTarget BfdGetTargetInfo(string target_name, global::libopcodes.Bfd abfd, ref int is_bigendian, ref int underscoring, sbyte** def_target_arch)
        {
            var __arg1 = ReferenceEquals(abfd, null) ? global::System.IntPtr.Zero : abfd.__Instance;
            fixed (int* __is_bigendian2 = &is_bigendian)
            {
                var __arg2 = __is_bigendian2;
                fixed (int* __underscoring3 = &underscoring)
                {
                    var __arg3 = __underscoring3;
                    var __ret = __Internal.BfdGetTargetInfo(target_name, __arg1, __arg2, __arg3, def_target_arch);
                    global::libopcodes.BfdTarget __result0;
                    if (__ret == IntPtr.Zero) __result0 = null;
                    else if (global::libopcodes.BfdTarget.NativeToManagedMap.ContainsKey(__ret))
                        __result0 = (global::libopcodes.BfdTarget) global::libopcodes.BfdTarget.NativeToManagedMap[__ret];
                    else __result0 = global::libopcodes.BfdTarget.__CreateInstance(__ret);
                    return __result0;
                }
            }
        }

        public static global::libopcodes.BfdTarget BfdIterateOverTargets(global::libopcodes.Delegates.Func_int_IntPtr_IntPtr func, global::System.IntPtr data)
        {
            var __arg0 = func == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(func);
            var __ret = __Internal.BfdIterateOverTargets(__arg0, data);
            global::libopcodes.BfdTarget __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::libopcodes.BfdTarget.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::libopcodes.BfdTarget) global::libopcodes.BfdTarget.NativeToManagedMap[__ret];
            else __result0 = global::libopcodes.BfdTarget.__CreateInstance(__ret);
            return __result0;
        }

        public static string BfdFlavourName(global::libopcodes.BfdFlavour flavour)
        {
            var __ret = __Internal.BfdFlavourName(flavour);
            if (__ret == global::System.IntPtr.Zero)
                return default(string);
            var __retPtr = (byte*) __ret;
            int __length = 0;
            while (*(__retPtr++) != 0) __length += sizeof(byte);
            return global::System.Text.Encoding.UTF8.GetString((byte*) __ret, __length);
        }

        public static int BfdCheckFormat(global::libopcodes.Bfd abfd, global::libopcodes.BfdFormat format)
        {
            var __arg0 = ReferenceEquals(abfd, null) ? global::System.IntPtr.Zero : abfd.__Instance;
            var __ret = __Internal.BfdCheckFormat(__arg0, format);
            return __ret;
        }

        public static int BfdCheckFormatMatches(global::libopcodes.Bfd abfd, global::libopcodes.BfdFormat format, sbyte*** matching)
        {
            var __arg0 = ReferenceEquals(abfd, null) ? global::System.IntPtr.Zero : abfd.__Instance;
            var __ret = __Internal.BfdCheckFormatMatches(__arg0, format, matching);
            return __ret;
        }

        public static int BfdSetFormat(global::libopcodes.Bfd abfd, global::libopcodes.BfdFormat format)
        {
            var __arg0 = ReferenceEquals(abfd, null) ? global::System.IntPtr.Zero : abfd.__Instance;
            var __ret = __Internal.BfdSetFormat(__arg0, format);
            return __ret;
        }

        public static string BfdFormatString(global::libopcodes.BfdFormat format)
        {
            var __ret = __Internal.BfdFormatString(format);
            if (__ret == global::System.IntPtr.Zero)
                return default(string);
            var __retPtr = (byte*) __ret;
            int __length = 0;
            while (*(__retPtr++) != 0) __length += sizeof(byte);
            return global::System.Text.Encoding.UTF8.GetString((byte*) __ret, __length);
        }

        public static int BfdLinkSplitSection(global::libopcodes.Bfd abfd, global::libopcodes.BfdSection sec)
        {
            var __arg0 = ReferenceEquals(abfd, null) ? global::System.IntPtr.Zero : abfd.__Instance;
            var __arg1 = ReferenceEquals(sec, null) ? global::System.IntPtr.Zero : sec.__Instance;
            var __ret = __Internal.BfdLinkSplitSection(__arg0, __arg1);
            return __ret;
        }

        public static int BfdSectionAlreadyLinked(global::libopcodes.Bfd abfd, global::libopcodes.BfdSection sec, global::libopcodes.BfdLinkInfo info)
        {
            var __arg0 = ReferenceEquals(abfd, null) ? global::System.IntPtr.Zero : abfd.__Instance;
            var __arg1 = ReferenceEquals(sec, null) ? global::System.IntPtr.Zero : sec.__Instance;
            var __arg2 = ReferenceEquals(info, null) ? global::System.IntPtr.Zero : info.__Instance;
            var __ret = __Internal.BfdSectionAlreadyLinked(__arg0, __arg1, __arg2);
            return __ret;
        }

        public static int BfdGenericDefineCommonSymbol(global::libopcodes.Bfd output_bfd, global::libopcodes.BfdLinkInfo info, global::libopcodes.BfdLinkHashEntry h)
        {
            var __arg0 = ReferenceEquals(output_bfd, null) ? global::System.IntPtr.Zero : output_bfd.__Instance;
            var __arg1 = ReferenceEquals(info, null) ? global::System.IntPtr.Zero : info.__Instance;
            var __arg2 = ReferenceEquals(h, null) ? global::System.IntPtr.Zero : h.__Instance;
            var __ret = __Internal.BfdGenericDefineCommonSymbol(__arg0, __arg1, __arg2);
            return __ret;
        }

        public static void BfdGenericLinkHideSymbol(global::libopcodes.Bfd output_bfd, global::libopcodes.BfdLinkInfo info, global::libopcodes.BfdLinkHashEntry h)
        {
            var __arg0 = ReferenceEquals(output_bfd, null) ? global::System.IntPtr.Zero : output_bfd.__Instance;
            var __arg1 = ReferenceEquals(info, null) ? global::System.IntPtr.Zero : info.__Instance;
            var __arg2 = ReferenceEquals(h, null) ? global::System.IntPtr.Zero : h.__Instance;
            __Internal.BfdGenericLinkHideSymbol(__arg0, __arg1, __arg2);
        }

        public static global::libopcodes.BfdLinkHashEntry BfdGenericDefineStartStop(global::libopcodes.BfdLinkInfo info, string symbol, global::libopcodes.BfdSection sec)
        {
            var __arg0 = ReferenceEquals(info, null) ? global::System.IntPtr.Zero : info.__Instance;
            var __arg2 = ReferenceEquals(sec, null) ? global::System.IntPtr.Zero : sec.__Instance;
            var __ret = __Internal.BfdGenericDefineStartStop(__arg0, symbol, __arg2);
            global::libopcodes.BfdLinkHashEntry __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::libopcodes.BfdLinkHashEntry.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::libopcodes.BfdLinkHashEntry) global::libopcodes.BfdLinkHashEntry.NativeToManagedMap[__ret];
            else __result0 = global::libopcodes.BfdLinkHashEntry.__CreateInstance(__ret);
            return __result0;
        }

        public static global::libopcodes.BfdElfVersionTree BfdFindVersionForSym(global::libopcodes.BfdElfVersionTree verdefs, string sym_name, ref int hide)
        {
            var __arg0 = ReferenceEquals(verdefs, null) ? global::System.IntPtr.Zero : verdefs.__Instance;
            fixed (int* __hide2 = &hide)
            {
                var __arg2 = __hide2;
                var __ret = __Internal.BfdFindVersionForSym(__arg0, sym_name, __arg2);
                global::libopcodes.BfdElfVersionTree __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::libopcodes.BfdElfVersionTree.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::libopcodes.BfdElfVersionTree) global::libopcodes.BfdElfVersionTree.NativeToManagedMap[__ret];
                else __result0 = global::libopcodes.BfdElfVersionTree.__CreateInstance(__ret);
                return __result0;
            }
        }

        public static int BfdHideSymByVersion(global::libopcodes.BfdElfVersionTree verdefs, string sym_name)
        {
            var __arg0 = ReferenceEquals(verdefs, null) ? global::System.IntPtr.Zero : verdefs.__Instance;
            var __ret = __Internal.BfdHideSymByVersion(__arg0, sym_name);
            return __ret;
        }

        public static int BfdLinkCheckRelocs(global::libopcodes.Bfd abfd, global::libopcodes.BfdLinkInfo info)
        {
            var __arg0 = ReferenceEquals(abfd, null) ? global::System.IntPtr.Zero : abfd.__Instance;
            var __arg1 = ReferenceEquals(info, null) ? global::System.IntPtr.Zero : info.__Instance;
            var __ret = __Internal.BfdLinkCheckRelocs(__arg0, __arg1);
            return __ret;
        }

        public static int BfdGenericLinkCheckRelocs(global::libopcodes.Bfd abfd, global::libopcodes.BfdLinkInfo info)
        {
            var __arg0 = ReferenceEquals(abfd, null) ? global::System.IntPtr.Zero : abfd.__Instance;
            var __arg1 = ReferenceEquals(info, null) ? global::System.IntPtr.Zero : info.__Instance;
            var __ret = __Internal.BfdGenericLinkCheckRelocs(__arg0, __arg1);
            return __ret;
        }

        public static int BfdMergePrivateBfdData(global::libopcodes.Bfd ibfd, global::libopcodes.BfdLinkInfo info)
        {
            var __arg0 = ReferenceEquals(ibfd, null) ? global::System.IntPtr.Zero : ibfd.__Instance;
            var __arg1 = ReferenceEquals(info, null) ? global::System.IntPtr.Zero : info.__Instance;
            var __ret = __Internal.BfdMergePrivateBfdData(__arg0, __arg1);
            return __ret;
        }

        public static byte* BfdSimpleGetRelocatedSectionContents(global::libopcodes.Bfd abfd, global::libopcodes.BfdSection sec, byte* outbuf, global::libopcodes.BfdSymbol symbol_table)
        {
            var __arg0 = ReferenceEquals(abfd, null) ? global::System.IntPtr.Zero : abfd.__Instance;
            var __arg1 = ReferenceEquals(sec, null) ? global::System.IntPtr.Zero : sec.__Instance;
            var ____arg3 = ReferenceEquals(symbol_table, null) ? global::System.IntPtr.Zero : symbol_table.__Instance;
            var __arg3 = new global::System.IntPtr(&____arg3);
            var __ret = __Internal.BfdSimpleGetRelocatedSectionContents(__arg0, __arg1, outbuf, __arg3);
            return __ret;
        }

        public static int BfdGetFullSectionContents(global::libopcodes.Bfd abfd, global::libopcodes.BfdSection section, byte** ptr)
        {
            var __arg0 = ReferenceEquals(abfd, null) ? global::System.IntPtr.Zero : abfd.__Instance;
            var __arg1 = ReferenceEquals(section, null) ? global::System.IntPtr.Zero : section.__Instance;
            var __ret = __Internal.BfdGetFullSectionContents(__arg0, __arg1, ptr);
            return __ret;
        }

        public static void BfdCacheSectionContents(global::libopcodes.BfdSection sec, global::System.IntPtr contents)
        {
            var __arg0 = ReferenceEquals(sec, null) ? global::System.IntPtr.Zero : sec.__Instance;
            __Internal.BfdCacheSectionContents(__arg0, contents);
        }

        public static int BfdIsSectionCompressedWithHeader(global::libopcodes.Bfd abfd, global::libopcodes.BfdSection section, ref int compression_header_size_p, ref ulong uncompressed_size_p, ref uint uncompressed_alignment_power_p)
        {
            var __arg0 = ReferenceEquals(abfd, null) ? global::System.IntPtr.Zero : abfd.__Instance;
            var __arg1 = ReferenceEquals(section, null) ? global::System.IntPtr.Zero : section.__Instance;
            fixed (int* __compression_header_size_p2 = &compression_header_size_p)
            {
                var __arg2 = __compression_header_size_p2;
                fixed (ulong* __uncompressed_size_p3 = &uncompressed_size_p)
                {
                    var __arg3 = __uncompressed_size_p3;
                    fixed (uint* __uncompressed_alignment_power_p4 = &uncompressed_alignment_power_p)
                    {
                        var __arg4 = __uncompressed_alignment_power_p4;
                        var __ret = __Internal.BfdIsSectionCompressedWithHeader(__arg0, __arg1, __arg2, __arg3, __arg4);
                        return __ret;
                    }
                }
            }
        }

        public static int BfdIsSectionCompressed(global::libopcodes.Bfd abfd, global::libopcodes.BfdSection section)
        {
            var __arg0 = ReferenceEquals(abfd, null) ? global::System.IntPtr.Zero : abfd.__Instance;
            var __arg1 = ReferenceEquals(section, null) ? global::System.IntPtr.Zero : section.__Instance;
            var __ret = __Internal.BfdIsSectionCompressed(__arg0, __arg1);
            return __ret;
        }

        public static int BfdInitSectionDecompressStatus(global::libopcodes.Bfd abfd, global::libopcodes.BfdSection section)
        {
            var __arg0 = ReferenceEquals(abfd, null) ? global::System.IntPtr.Zero : abfd.__Instance;
            var __arg1 = ReferenceEquals(section, null) ? global::System.IntPtr.Zero : section.__Instance;
            var __ret = __Internal.BfdInitSectionDecompressStatus(__arg0, __arg1);
            return __ret;
        }

        public static int BfdInitSectionCompressStatus(global::libopcodes.Bfd abfd, global::libopcodes.BfdSection section)
        {
            var __arg0 = ReferenceEquals(abfd, null) ? global::System.IntPtr.Zero : abfd.__Instance;
            var __arg1 = ReferenceEquals(section, null) ? global::System.IntPtr.Zero : section.__Instance;
            var __ret = __Internal.BfdInitSectionCompressStatus(__arg0, __arg1);
            return __ret;
        }

        public static int BfdCompressSection(global::libopcodes.Bfd abfd, global::libopcodes.BfdSection section, byte* uncompressed_buffer)
        {
            var __arg0 = ReferenceEquals(abfd, null) ? global::System.IntPtr.Zero : abfd.__Instance;
            var __arg1 = ReferenceEquals(section, null) ? global::System.IntPtr.Zero : section.__Instance;
            var __ret = __Internal.BfdCompressSection(__arg0, __arg1, uncompressed_buffer);
            return __ret;
        }

        public string Filename
        {
            get
            {
                if (((global::libopcodes.Bfd.__Internal*) __Instance)->filename == global::System.IntPtr.Zero)
                    return default(string);
                var __retPtr = (byte*) ((global::libopcodes.Bfd.__Internal*) __Instance)->filename;
                int __length = 0;
                while (*(__retPtr++) != 0) __length += sizeof(byte);
                return global::System.Text.Encoding.UTF8.GetString((byte*) ((global::libopcodes.Bfd.__Internal*) __Instance)->filename, __length);
            }

            set
            {
                byte[] __bytes0 = global::System.Text.Encoding.UTF8.GetBytes(value);
                fixed (byte* __bytePtr0 = __bytes0)
                {
                    ((global::libopcodes.Bfd.__Internal*)__Instance)->filename = (global::System.IntPtr) new global::System.IntPtr(__bytePtr0);
                }
            }
        }

        public global::libopcodes.BfdTarget Xvec
        {
            get
            {
                global::libopcodes.BfdTarget __result0;
                if (((global::libopcodes.Bfd.__Internal*) __Instance)->xvec == IntPtr.Zero) __result0 = null;
                else if (global::libopcodes.BfdTarget.NativeToManagedMap.ContainsKey(((global::libopcodes.Bfd.__Internal*) __Instance)->xvec))
                    __result0 = (global::libopcodes.BfdTarget) global::libopcodes.BfdTarget.NativeToManagedMap[((global::libopcodes.Bfd.__Internal*) __Instance)->xvec];
                else __result0 = global::libopcodes.BfdTarget.__CreateInstance(((global::libopcodes.Bfd.__Internal*) __Instance)->xvec);
                return __result0;
            }

            set
            {
                ((global::libopcodes.Bfd.__Internal*)__Instance)->xvec = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public global::System.IntPtr Iostream
        {
            get
            {
                return ((global::libopcodes.Bfd.__Internal*) __Instance)->iostream;
            }

            set
            {
                ((global::libopcodes.Bfd.__Internal*)__Instance)->iostream = (global::System.IntPtr) value;
            }
        }

        public global::libopcodes.BfdIovec Iovec
        {
            get
            {
                global::libopcodes.BfdIovec __result0;
                if (((global::libopcodes.Bfd.__Internal*) __Instance)->iovec == IntPtr.Zero) __result0 = null;
                else if (global::libopcodes.BfdIovec.NativeToManagedMap.ContainsKey(((global::libopcodes.Bfd.__Internal*) __Instance)->iovec))
                    __result0 = (global::libopcodes.BfdIovec) global::libopcodes.BfdIovec.NativeToManagedMap[((global::libopcodes.Bfd.__Internal*) __Instance)->iovec];
                else __result0 = global::libopcodes.BfdIovec.__CreateInstance(((global::libopcodes.Bfd.__Internal*) __Instance)->iovec);
                return __result0;
            }

            set
            {
                ((global::libopcodes.Bfd.__Internal*)__Instance)->iovec = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public global::libopcodes.Bfd LruPrev
        {
            get
            {
                global::libopcodes.Bfd __result0;
                if (((global::libopcodes.Bfd.__Internal*) __Instance)->lru_prev == IntPtr.Zero) __result0 = null;
                else if (global::libopcodes.Bfd.NativeToManagedMap.ContainsKey(((global::libopcodes.Bfd.__Internal*) __Instance)->lru_prev))
                    __result0 = (global::libopcodes.Bfd) global::libopcodes.Bfd.NativeToManagedMap[((global::libopcodes.Bfd.__Internal*) __Instance)->lru_prev];
                else __result0 = global::libopcodes.Bfd.__CreateInstance(((global::libopcodes.Bfd.__Internal*) __Instance)->lru_prev);
                return __result0;
            }

            set
            {
                ((global::libopcodes.Bfd.__Internal*)__Instance)->lru_prev = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public global::libopcodes.Bfd LruNext
        {
            get
            {
                global::libopcodes.Bfd __result0;
                if (((global::libopcodes.Bfd.__Internal*) __Instance)->lru_next == IntPtr.Zero) __result0 = null;
                else if (global::libopcodes.Bfd.NativeToManagedMap.ContainsKey(((global::libopcodes.Bfd.__Internal*) __Instance)->lru_next))
                    __result0 = (global::libopcodes.Bfd) global::libopcodes.Bfd.NativeToManagedMap[((global::libopcodes.Bfd.__Internal*) __Instance)->lru_next];
                else __result0 = global::libopcodes.Bfd.__CreateInstance(((global::libopcodes.Bfd.__Internal*) __Instance)->lru_next);
                return __result0;
            }

            set
            {
                ((global::libopcodes.Bfd.__Internal*)__Instance)->lru_next = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public ulong Where
        {
            get
            {
                return ((global::libopcodes.Bfd.__Internal*) __Instance)->@where;
            }

            set
            {
                ((global::libopcodes.Bfd.__Internal*)__Instance)->@where = value;
            }
        }

        public int Mtime
        {
            get
            {
                return ((global::libopcodes.Bfd.__Internal*) __Instance)->mtime;
            }

            set
            {
                ((global::libopcodes.Bfd.__Internal*)__Instance)->mtime = value;
            }
        }

        public uint Id
        {
            get
            {
                return ((global::libopcodes.Bfd.__Internal*) __Instance)->id;
            }

            set
            {
                ((global::libopcodes.Bfd.__Internal*)__Instance)->id = value;
            }
        }

        public global::libopcodes.BfdFormat Format
        {
            get
            {
                return ((global::libopcodes.Bfd.__Internal*) __Instance)->format;
            }

            set
            {
                ((global::libopcodes.Bfd.__Internal*)__Instance)->format = value;
            }
        }

        public global::libopcodes.BfdDirection Direction
        {
            get
            {
                return ((global::libopcodes.Bfd.__Internal*) __Instance)->direction;
            }

            set
            {
                ((global::libopcodes.Bfd.__Internal*)__Instance)->direction = value;
            }
        }

        public uint Flags
        {
            get
            {
                return ((global::libopcodes.Bfd.__Internal*) __Instance)->flags;
            }

            set
            {
                ((global::libopcodes.Bfd.__Internal*)__Instance)->flags = value;
            }
        }

        public uint Cacheable
        {
            get
            {
                return ((global::libopcodes.Bfd.__Internal*) __Instance)->cacheable;
            }

            set
            {
                ((global::libopcodes.Bfd.__Internal*)__Instance)->cacheable = value;
            }
        }

        public uint TargetDefaulted
        {
            get
            {
                return ((global::libopcodes.Bfd.__Internal*) __Instance)->target_defaulted;
            }

            set
            {
                ((global::libopcodes.Bfd.__Internal*)__Instance)->target_defaulted = value;
            }
        }

        public uint OpenedOnce
        {
            get
            {
                return ((global::libopcodes.Bfd.__Internal*) __Instance)->opened_once;
            }

            set
            {
                ((global::libopcodes.Bfd.__Internal*)__Instance)->opened_once = value;
            }
        }

        public uint MtimeSet
        {
            get
            {
                return ((global::libopcodes.Bfd.__Internal*) __Instance)->mtime_set;
            }

            set
            {
                ((global::libopcodes.Bfd.__Internal*)__Instance)->mtime_set = value;
            }
        }

        public uint NoExport
        {
            get
            {
                return ((global::libopcodes.Bfd.__Internal*) __Instance)->no_export;
            }

            set
            {
                ((global::libopcodes.Bfd.__Internal*)__Instance)->no_export = value;
            }
        }

        public uint OutputHasBegun
        {
            get
            {
                return ((global::libopcodes.Bfd.__Internal*) __Instance)->output_has_begun;
            }

            set
            {
                ((global::libopcodes.Bfd.__Internal*)__Instance)->output_has_begun = value;
            }
        }

        public uint HasArmap
        {
            get
            {
                return ((global::libopcodes.Bfd.__Internal*) __Instance)->has_armap;
            }

            set
            {
                ((global::libopcodes.Bfd.__Internal*)__Instance)->has_armap = value;
            }
        }

        public uint IsThinArchive
        {
            get
            {
                return ((global::libopcodes.Bfd.__Internal*) __Instance)->is_thin_archive;
            }

            set
            {
                ((global::libopcodes.Bfd.__Internal*)__Instance)->is_thin_archive = value;
            }
        }

        public uint NoElementCache
        {
            get
            {
                return ((global::libopcodes.Bfd.__Internal*) __Instance)->no_element_cache;
            }

            set
            {
                ((global::libopcodes.Bfd.__Internal*)__Instance)->no_element_cache = value;
            }
        }

        public uint SelectiveSearch
        {
            get
            {
                return ((global::libopcodes.Bfd.__Internal*) __Instance)->selective_search;
            }

            set
            {
                ((global::libopcodes.Bfd.__Internal*)__Instance)->selective_search = value;
            }
        }

        public uint IsLinkerOutput
        {
            get
            {
                return ((global::libopcodes.Bfd.__Internal*) __Instance)->is_linker_output;
            }

            set
            {
                ((global::libopcodes.Bfd.__Internal*)__Instance)->is_linker_output = value;
            }
        }

        public uint IsLinkerInput
        {
            get
            {
                return ((global::libopcodes.Bfd.__Internal*) __Instance)->is_linker_input;
            }

            set
            {
                ((global::libopcodes.Bfd.__Internal*)__Instance)->is_linker_input = value;
            }
        }

        public global::libopcodes.BfdPluginFormat PluginFormat
        {
            get
            {
                return ((global::libopcodes.Bfd.__Internal*) __Instance)->plugin_format;
            }

            set
            {
                ((global::libopcodes.Bfd.__Internal*)__Instance)->plugin_format = value;
            }
        }

        public uint LtoOutput
        {
            get
            {
                return ((global::libopcodes.Bfd.__Internal*) __Instance)->lto_output;
            }

            set
            {
                ((global::libopcodes.Bfd.__Internal*)__Instance)->lto_output = value;
            }
        }

        public uint LtoSlimObject
        {
            get
            {
                return ((global::libopcodes.Bfd.__Internal*) __Instance)->lto_slim_object;
            }

            set
            {
                ((global::libopcodes.Bfd.__Internal*)__Instance)->lto_slim_object = value;
            }
        }

        public global::libopcodes.Bfd PluginDummyBfd
        {
            get
            {
                global::libopcodes.Bfd __result0;
                if (((global::libopcodes.Bfd.__Internal*) __Instance)->plugin_dummy_bfd == IntPtr.Zero) __result0 = null;
                else if (global::libopcodes.Bfd.NativeToManagedMap.ContainsKey(((global::libopcodes.Bfd.__Internal*) __Instance)->plugin_dummy_bfd))
                    __result0 = (global::libopcodes.Bfd) global::libopcodes.Bfd.NativeToManagedMap[((global::libopcodes.Bfd.__Internal*) __Instance)->plugin_dummy_bfd];
                else __result0 = global::libopcodes.Bfd.__CreateInstance(((global::libopcodes.Bfd.__Internal*) __Instance)->plugin_dummy_bfd);
                return __result0;
            }

            set
            {
                ((global::libopcodes.Bfd.__Internal*)__Instance)->plugin_dummy_bfd = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public ulong Origin
        {
            get
            {
                return ((global::libopcodes.Bfd.__Internal*) __Instance)->origin;
            }

            set
            {
                ((global::libopcodes.Bfd.__Internal*)__Instance)->origin = value;
            }
        }

        public ulong ProxyOrigin
        {
            get
            {
                return ((global::libopcodes.Bfd.__Internal*) __Instance)->proxy_origin;
            }

            set
            {
                ((global::libopcodes.Bfd.__Internal*)__Instance)->proxy_origin = value;
            }
        }

        public global::libopcodes.BfdHashTable SectionHtab
        {
            get
            {
                return global::libopcodes.BfdHashTable.__CreateInstance(new global::System.IntPtr(&((global::libopcodes.Bfd.__Internal*) __Instance)->section_htab));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::libopcodes.Bfd.__Internal*)__Instance)->section_htab = *(global::libopcodes.BfdHashTable.__Internal*) value.__Instance;
            }
        }

        public global::libopcodes.BfdSection Sections
        {
            get
            {
                global::libopcodes.BfdSection __result0;
                if (((global::libopcodes.Bfd.__Internal*) __Instance)->sections == IntPtr.Zero) __result0 = null;
                else if (global::libopcodes.BfdSection.NativeToManagedMap.ContainsKey(((global::libopcodes.Bfd.__Internal*) __Instance)->sections))
                    __result0 = (global::libopcodes.BfdSection) global::libopcodes.BfdSection.NativeToManagedMap[((global::libopcodes.Bfd.__Internal*) __Instance)->sections];
                else __result0 = global::libopcodes.BfdSection.__CreateInstance(((global::libopcodes.Bfd.__Internal*) __Instance)->sections);
                return __result0;
            }

            set
            {
                ((global::libopcodes.Bfd.__Internal*)__Instance)->sections = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public global::libopcodes.BfdSection SectionLast
        {
            get
            {
                global::libopcodes.BfdSection __result0;
                if (((global::libopcodes.Bfd.__Internal*) __Instance)->section_last == IntPtr.Zero) __result0 = null;
                else if (global::libopcodes.BfdSection.NativeToManagedMap.ContainsKey(((global::libopcodes.Bfd.__Internal*) __Instance)->section_last))
                    __result0 = (global::libopcodes.BfdSection) global::libopcodes.BfdSection.NativeToManagedMap[((global::libopcodes.Bfd.__Internal*) __Instance)->section_last];
                else __result0 = global::libopcodes.BfdSection.__CreateInstance(((global::libopcodes.Bfd.__Internal*) __Instance)->section_last);
                return __result0;
            }

            set
            {
                ((global::libopcodes.Bfd.__Internal*)__Instance)->section_last = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public uint SectionCount
        {
            get
            {
                return ((global::libopcodes.Bfd.__Internal*) __Instance)->section_count;
            }

            set
            {
                ((global::libopcodes.Bfd.__Internal*)__Instance)->section_count = value;
            }
        }

        public int ArchivePass
        {
            get
            {
                return ((global::libopcodes.Bfd.__Internal*) __Instance)->archive_pass;
            }

            set
            {
                ((global::libopcodes.Bfd.__Internal*)__Instance)->archive_pass = value;
            }
        }

        public ulong StartAddress
        {
            get
            {
                return ((global::libopcodes.Bfd.__Internal*) __Instance)->start_address;
            }

            set
            {
                ((global::libopcodes.Bfd.__Internal*)__Instance)->start_address = value;
            }
        }

        public global::libopcodes.BfdSymbol Outsymbols
        {
            get
            {
                global::libopcodes.BfdSymbol __result0;
                if (((global::libopcodes.Bfd.__Internal*) __Instance)->outsymbols == IntPtr.Zero) __result0 = null;
                else if (global::libopcodes.BfdSymbol.NativeToManagedMap.ContainsKey(((global::libopcodes.Bfd.__Internal*) __Instance)->outsymbols))
                    __result0 = (global::libopcodes.BfdSymbol) global::libopcodes.BfdSymbol.NativeToManagedMap[((global::libopcodes.Bfd.__Internal*) __Instance)->outsymbols];
                else __result0 = global::libopcodes.BfdSymbol.__CreateInstance(((global::libopcodes.Bfd.__Internal*) __Instance)->outsymbols);
                return __result0;
            }

            set
            {
                var __value = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                ((global::libopcodes.Bfd.__Internal*)__Instance)->outsymbols = new global::System.IntPtr(&__value);
            }
        }

        public uint Symcount
        {
            get
            {
                return ((global::libopcodes.Bfd.__Internal*) __Instance)->symcount;
            }

            set
            {
                ((global::libopcodes.Bfd.__Internal*)__Instance)->symcount = value;
            }
        }

        public uint Dynsymcount
        {
            get
            {
                return ((global::libopcodes.Bfd.__Internal*) __Instance)->dynsymcount;
            }

            set
            {
                ((global::libopcodes.Bfd.__Internal*)__Instance)->dynsymcount = value;
            }
        }

        public global::libopcodes.BfdArchInfo ArchInfo
        {
            get
            {
                global::libopcodes.BfdArchInfo __result0;
                if (((global::libopcodes.Bfd.__Internal*) __Instance)->arch_info == IntPtr.Zero) __result0 = null;
                else if (global::libopcodes.BfdArchInfo.NativeToManagedMap.ContainsKey(((global::libopcodes.Bfd.__Internal*) __Instance)->arch_info))
                    __result0 = (global::libopcodes.BfdArchInfo) global::libopcodes.BfdArchInfo.NativeToManagedMap[((global::libopcodes.Bfd.__Internal*) __Instance)->arch_info];
                else __result0 = global::libopcodes.BfdArchInfo.__CreateInstance(((global::libopcodes.Bfd.__Internal*) __Instance)->arch_info);
                return __result0;
            }

            set
            {
                ((global::libopcodes.Bfd.__Internal*)__Instance)->arch_info = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public global::System.IntPtr AreltData
        {
            get
            {
                return ((global::libopcodes.Bfd.__Internal*) __Instance)->arelt_data;
            }

            set
            {
                ((global::libopcodes.Bfd.__Internal*)__Instance)->arelt_data = (global::System.IntPtr) value;
            }
        }

        public global::libopcodes.Bfd MyArchive
        {
            get
            {
                global::libopcodes.Bfd __result0;
                if (((global::libopcodes.Bfd.__Internal*) __Instance)->my_archive == IntPtr.Zero) __result0 = null;
                else if (global::libopcodes.Bfd.NativeToManagedMap.ContainsKey(((global::libopcodes.Bfd.__Internal*) __Instance)->my_archive))
                    __result0 = (global::libopcodes.Bfd) global::libopcodes.Bfd.NativeToManagedMap[((global::libopcodes.Bfd.__Internal*) __Instance)->my_archive];
                else __result0 = global::libopcodes.Bfd.__CreateInstance(((global::libopcodes.Bfd.__Internal*) __Instance)->my_archive);
                return __result0;
            }

            set
            {
                ((global::libopcodes.Bfd.__Internal*)__Instance)->my_archive = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public global::libopcodes.Bfd ArchiveNext
        {
            get
            {
                global::libopcodes.Bfd __result0;
                if (((global::libopcodes.Bfd.__Internal*) __Instance)->archive_next == IntPtr.Zero) __result0 = null;
                else if (global::libopcodes.Bfd.NativeToManagedMap.ContainsKey(((global::libopcodes.Bfd.__Internal*) __Instance)->archive_next))
                    __result0 = (global::libopcodes.Bfd) global::libopcodes.Bfd.NativeToManagedMap[((global::libopcodes.Bfd.__Internal*) __Instance)->archive_next];
                else __result0 = global::libopcodes.Bfd.__CreateInstance(((global::libopcodes.Bfd.__Internal*) __Instance)->archive_next);
                return __result0;
            }

            set
            {
                ((global::libopcodes.Bfd.__Internal*)__Instance)->archive_next = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public global::libopcodes.Bfd ArchiveHead
        {
            get
            {
                global::libopcodes.Bfd __result0;
                if (((global::libopcodes.Bfd.__Internal*) __Instance)->archive_head == IntPtr.Zero) __result0 = null;
                else if (global::libopcodes.Bfd.NativeToManagedMap.ContainsKey(((global::libopcodes.Bfd.__Internal*) __Instance)->archive_head))
                    __result0 = (global::libopcodes.Bfd) global::libopcodes.Bfd.NativeToManagedMap[((global::libopcodes.Bfd.__Internal*) __Instance)->archive_head];
                else __result0 = global::libopcodes.Bfd.__CreateInstance(((global::libopcodes.Bfd.__Internal*) __Instance)->archive_head);
                return __result0;
            }

            set
            {
                ((global::libopcodes.Bfd.__Internal*)__Instance)->archive_head = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public global::libopcodes.Bfd NestedArchives
        {
            get
            {
                global::libopcodes.Bfd __result0;
                if (((global::libopcodes.Bfd.__Internal*) __Instance)->nested_archives == IntPtr.Zero) __result0 = null;
                else if (global::libopcodes.Bfd.NativeToManagedMap.ContainsKey(((global::libopcodes.Bfd.__Internal*) __Instance)->nested_archives))
                    __result0 = (global::libopcodes.Bfd) global::libopcodes.Bfd.NativeToManagedMap[((global::libopcodes.Bfd.__Internal*) __Instance)->nested_archives];
                else __result0 = global::libopcodes.Bfd.__CreateInstance(((global::libopcodes.Bfd.__Internal*) __Instance)->nested_archives);
                return __result0;
            }

            set
            {
                ((global::libopcodes.Bfd.__Internal*)__Instance)->nested_archives = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public global::libopcodes.Bfd.Link link
        {
            get
            {
                return global::libopcodes.Bfd.Link.__CreateInstance(((global::libopcodes.Bfd.__Internal*) __Instance)->link);
            }

            set
            {
                ((global::libopcodes.Bfd.__Internal*)__Instance)->link = value.__Instance;
            }
        }

        public global::libopcodes.Bfd.Tdata tdata
        {
            get
            {
                return global::libopcodes.Bfd.Tdata.__CreateInstance(((global::libopcodes.Bfd.__Internal*) __Instance)->tdata);
            }

            set
            {
                ((global::libopcodes.Bfd.__Internal*)__Instance)->tdata = value.__Instance;
            }
        }

        public global::System.IntPtr Usrdata
        {
            get
            {
                return ((global::libopcodes.Bfd.__Internal*) __Instance)->usrdata;
            }

            set
            {
                ((global::libopcodes.Bfd.__Internal*)__Instance)->usrdata = (global::System.IntPtr) value;
            }
        }

        public global::System.IntPtr Memory
        {
            get
            {
                return ((global::libopcodes.Bfd.__Internal*) __Instance)->memory;
            }

            set
            {
                ((global::libopcodes.Bfd.__Internal*)__Instance)->memory = (global::System.IntPtr) value;
            }
        }

        public global::libopcodes.BfdBuildId BuildId
        {
            get
            {
                global::libopcodes.BfdBuildId __result0;
                if (((global::libopcodes.Bfd.__Internal*) __Instance)->build_id == IntPtr.Zero) __result0 = null;
                else if (global::libopcodes.BfdBuildId.NativeToManagedMap.ContainsKey(((global::libopcodes.Bfd.__Internal*) __Instance)->build_id))
                    __result0 = (global::libopcodes.BfdBuildId) global::libopcodes.BfdBuildId.NativeToManagedMap[((global::libopcodes.Bfd.__Internal*) __Instance)->build_id];
                else __result0 = global::libopcodes.BfdBuildId.__CreateInstance(((global::libopcodes.Bfd.__Internal*) __Instance)->build_id);
                return __result0;
            }

            set
            {
                ((global::libopcodes.Bfd.__Internal*)__Instance)->build_id = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public static int BfdCacheCloseAll
        {
            get
            {
                var __ret = __Internal.BfdCacheCloseAll();
                return __ret;
            }
        }

        public static uint BfdInit
        {
            get
            {
                var __ret = __Internal.BfdInit();
                return __ret;
            }
        }

        public static sbyte** BfdArchList
        {
            get
            {
                var __ret = __Internal.BfdArchList();
                return __ret;
            }
        }

        public static global::libopcodes.BfdError BfdGetError
        {
            get
            {
                var __ret = __Internal.BfdGetError();
                return __ret;
            }
        }

        public static sbyte** BfdTargetList
        {
            get
            {
                var __ret = __Internal.BfdTargetList();
                return __ret;
            }
        }
    }

    public unsafe partial class BfdTarget : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 888)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr name;

            [FieldOffset(8)]
            internal global::libopcodes.BfdFlavour flavour;

            [FieldOffset(12)]
            internal global::libopcodes.BfdEndian byteorder;

            [FieldOffset(16)]
            internal global::libopcodes.BfdEndian header_byteorder;

            [FieldOffset(20)]
            internal uint object_flags;

            [FieldOffset(24)]
            internal uint section_flags;

            [FieldOffset(28)]
            internal sbyte symbol_leading_char;

            [FieldOffset(29)]
            internal sbyte ar_pad_char;

            [FieldOffset(30)]
            internal byte ar_max_namelen;

            [FieldOffset(31)]
            internal byte match_priority;

            [FieldOffset(32)]
            internal global::System.IntPtr bfd_getx64;

            [FieldOffset(40)]
            internal global::System.IntPtr bfd_getx_signed_64;

            [FieldOffset(48)]
            internal global::System.IntPtr bfd_putx64;

            [FieldOffset(56)]
            internal global::System.IntPtr bfd_getx32;

            [FieldOffset(64)]
            internal global::System.IntPtr bfd_getx_signed_32;

            [FieldOffset(72)]
            internal global::System.IntPtr bfd_putx32;

            [FieldOffset(80)]
            internal global::System.IntPtr bfd_getx16;

            [FieldOffset(88)]
            internal global::System.IntPtr bfd_getx_signed_16;

            [FieldOffset(96)]
            internal global::System.IntPtr bfd_putx16;

            [FieldOffset(104)]
            internal global::System.IntPtr bfd_h_getx64;

            [FieldOffset(112)]
            internal global::System.IntPtr bfd_h_getx_signed_64;

            [FieldOffset(120)]
            internal global::System.IntPtr bfd_h_putx64;

            [FieldOffset(128)]
            internal global::System.IntPtr bfd_h_getx32;

            [FieldOffset(136)]
            internal global::System.IntPtr bfd_h_getx_signed_32;

            [FieldOffset(144)]
            internal global::System.IntPtr bfd_h_putx32;

            [FieldOffset(152)]
            internal global::System.IntPtr bfd_h_getx16;

            [FieldOffset(160)]
            internal global::System.IntPtr bfd_h_getx_signed_16;

            [FieldOffset(168)]
            internal global::System.IntPtr bfd_h_putx16;

            [FieldOffset(176)]
            internal fixed long _bfd_check_format[4];

            [FieldOffset(208)]
            internal fixed long _bfd_set_format[4];

            [FieldOffset(240)]
            internal fixed long _bfd_write_contents[4];

            [FieldOffset(272)]
            internal global::System.IntPtr _close_and_cleanup;

            [FieldOffset(280)]
            internal global::System.IntPtr _bfd_free_cached_info;

            [FieldOffset(288)]
            internal global::System.IntPtr _new_section_hook;

            [FieldOffset(296)]
            internal global::System.IntPtr _bfd_get_section_contents;

            [FieldOffset(304)]
            internal global::System.IntPtr _bfd_get_section_contents_in_window;

            [FieldOffset(312)]
            internal global::System.IntPtr _bfd_copy_private_bfd_data;

            [FieldOffset(320)]
            internal global::System.IntPtr _bfd_merge_private_bfd_data;

            [FieldOffset(328)]
            internal global::System.IntPtr _bfd_init_private_section_data;

            [FieldOffset(336)]
            internal global::System.IntPtr _bfd_copy_private_section_data;

            [FieldOffset(344)]
            internal global::System.IntPtr _bfd_copy_private_symbol_data;

            [FieldOffset(352)]
            internal global::System.IntPtr _bfd_copy_private_header_data;

            [FieldOffset(360)]
            internal global::System.IntPtr _bfd_set_private_flags;

            [FieldOffset(368)]
            internal global::System.IntPtr _bfd_print_private_bfd_data;

            [FieldOffset(376)]
            internal global::System.IntPtr _core_file_failing_command;

            [FieldOffset(384)]
            internal global::System.IntPtr _core_file_failing_signal;

            [FieldOffset(392)]
            internal global::System.IntPtr _core_file_matches_executable_p;

            [FieldOffset(400)]
            internal global::System.IntPtr _core_file_pid;

            [FieldOffset(408)]
            internal global::System.IntPtr _bfd_slurp_armap;

            [FieldOffset(416)]
            internal global::System.IntPtr _bfd_slurp_extended_name_table;

            [FieldOffset(424)]
            internal global::System.IntPtr _bfd_construct_extended_name_table;

            [FieldOffset(432)]
            internal global::System.IntPtr _bfd_truncate_arname;

            [FieldOffset(440)]
            internal global::System.IntPtr write_armap;

            [FieldOffset(448)]
            internal global::System.IntPtr _bfd_read_ar_hdr_fn;

            [FieldOffset(456)]
            internal global::System.IntPtr _bfd_write_ar_hdr_fn;

            [FieldOffset(464)]
            internal global::System.IntPtr openr_next_archived_file;

            [FieldOffset(472)]
            internal global::System.IntPtr _bfd_get_elt_at_index;

            [FieldOffset(480)]
            internal global::System.IntPtr _bfd_stat_arch_elt;

            [FieldOffset(488)]
            internal global::System.IntPtr _bfd_update_armap_timestamp;

            [FieldOffset(496)]
            internal global::System.IntPtr _bfd_get_symtab_upper_bound;

            [FieldOffset(504)]
            internal global::System.IntPtr _bfd_canonicalize_symtab;

            [FieldOffset(512)]
            internal global::System.IntPtr _bfd_make_empty_symbol;

            [FieldOffset(520)]
            internal global::System.IntPtr _bfd_print_symbol;

            [FieldOffset(528)]
            internal global::System.IntPtr _bfd_get_symbol_info;

            [FieldOffset(536)]
            internal global::System.IntPtr _bfd_get_symbol_version_string;

            [FieldOffset(544)]
            internal global::System.IntPtr _bfd_is_local_label_name;

            [FieldOffset(552)]
            internal global::System.IntPtr _bfd_is_target_special_symbol;

            [FieldOffset(560)]
            internal global::System.IntPtr _get_lineno;

            [FieldOffset(568)]
            internal global::System.IntPtr _bfd_find_nearest_line;

            [FieldOffset(576)]
            internal global::System.IntPtr _bfd_find_line;

            [FieldOffset(584)]
            internal global::System.IntPtr _bfd_find_inliner_info;

            [FieldOffset(592)]
            internal global::System.IntPtr _bfd_make_debug_symbol;

            [FieldOffset(600)]
            internal global::System.IntPtr _read_minisymbols;

            [FieldOffset(608)]
            internal global::System.IntPtr _minisymbol_to_symbol;

            [FieldOffset(616)]
            internal global::System.IntPtr _get_reloc_upper_bound;

            [FieldOffset(624)]
            internal global::System.IntPtr _bfd_canonicalize_reloc;

            [FieldOffset(632)]
            internal global::System.IntPtr _bfd_set_reloc;

            [FieldOffset(640)]
            internal global::System.IntPtr reloc_type_lookup;

            [FieldOffset(648)]
            internal global::System.IntPtr reloc_name_lookup;

            [FieldOffset(656)]
            internal global::System.IntPtr _bfd_set_arch_mach;

            [FieldOffset(664)]
            internal global::System.IntPtr _bfd_set_section_contents;

            [FieldOffset(672)]
            internal global::System.IntPtr _bfd_sizeof_headers;

            [FieldOffset(680)]
            internal global::System.IntPtr _bfd_get_relocated_section_contents;

            [FieldOffset(688)]
            internal global::System.IntPtr _bfd_relax_section;

            [FieldOffset(696)]
            internal global::System.IntPtr _bfd_link_hash_table_create;

            [FieldOffset(704)]
            internal global::System.IntPtr _bfd_link_add_symbols;

            [FieldOffset(712)]
            internal global::System.IntPtr _bfd_link_just_syms;

            [FieldOffset(720)]
            internal global::System.IntPtr _bfd_copy_link_hash_symbol_type;

            [FieldOffset(728)]
            internal global::System.IntPtr _bfd_final_link;

            [FieldOffset(736)]
            internal global::System.IntPtr _bfd_link_split_section;

            [FieldOffset(744)]
            internal global::System.IntPtr _bfd_link_check_relocs;

            [FieldOffset(752)]
            internal global::System.IntPtr _bfd_gc_sections;

            [FieldOffset(760)]
            internal global::System.IntPtr _bfd_lookup_section_flags;

            [FieldOffset(768)]
            internal global::System.IntPtr _bfd_merge_sections;

            [FieldOffset(776)]
            internal global::System.IntPtr _bfd_is_group_section;

            [FieldOffset(784)]
            internal global::System.IntPtr _bfd_group_name;

            [FieldOffset(792)]
            internal global::System.IntPtr _bfd_discard_group;

            [FieldOffset(800)]
            internal global::System.IntPtr _section_already_linked;

            [FieldOffset(808)]
            internal global::System.IntPtr _bfd_define_common_symbol;

            [FieldOffset(816)]
            internal global::System.IntPtr _bfd_link_hide_symbol;

            [FieldOffset(824)]
            internal global::System.IntPtr _bfd_define_start_stop;

            [FieldOffset(832)]
            internal global::System.IntPtr _bfd_get_dynamic_symtab_upper_bound;

            [FieldOffset(840)]
            internal global::System.IntPtr _bfd_canonicalize_dynamic_symtab;

            [FieldOffset(848)]
            internal global::System.IntPtr _bfd_get_synthetic_symtab;

            [FieldOffset(856)]
            internal global::System.IntPtr _bfd_get_dynamic_reloc_upper_bound;

            [FieldOffset(864)]
            internal global::System.IntPtr _bfd_canonicalize_dynamic_reloc;

            [FieldOffset(872)]
            internal global::System.IntPtr alternative_target;

            [FieldOffset(880)]
            internal global::System.IntPtr backend_data;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("opcodes", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0bfd_target@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.BfdTarget> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::libopcodes.BfdTarget>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::libopcodes.BfdTarget __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::libopcodes.BfdTarget(native.ToPointer(), skipVTables);
        }

        internal static global::libopcodes.BfdTarget __CreateInstance(global::libopcodes.BfdTarget.__Internal native, bool skipVTables = false)
        {
            return new global::libopcodes.BfdTarget(native, skipVTables);
        }

        private static void* __CopyValue(global::libopcodes.BfdTarget.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::libopcodes.BfdTarget.__Internal));
            *(global::libopcodes.BfdTarget.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private BfdTarget(global::libopcodes.BfdTarget.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected BfdTarget(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public BfdTarget()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::libopcodes.BfdTarget.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public BfdTarget(global::libopcodes.BfdTarget _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::libopcodes.BfdTarget.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::libopcodes.BfdTarget.__Internal*) __Instance) = *((global::libopcodes.BfdTarget.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::libopcodes.BfdTarget __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public string Name
        {
            get
            {
                if (((global::libopcodes.BfdTarget.__Internal*) __Instance)->name == global::System.IntPtr.Zero)
                    return default(string);
                var __retPtr = (byte*) ((global::libopcodes.BfdTarget.__Internal*) __Instance)->name;
                int __length = 0;
                while (*(__retPtr++) != 0) __length += sizeof(byte);
                return global::System.Text.Encoding.UTF8.GetString((byte*) ((global::libopcodes.BfdTarget.__Internal*) __Instance)->name, __length);
            }

            set
            {
                byte[] __bytes0 = global::System.Text.Encoding.UTF8.GetBytes(value);
                fixed (byte* __bytePtr0 = __bytes0)
                {
                    ((global::libopcodes.BfdTarget.__Internal*)__Instance)->name = (global::System.IntPtr) new global::System.IntPtr(__bytePtr0);
                }
            }
        }

        public global::libopcodes.BfdFlavour Flavour
        {
            get
            {
                return ((global::libopcodes.BfdTarget.__Internal*) __Instance)->flavour;
            }

            set
            {
                ((global::libopcodes.BfdTarget.__Internal*)__Instance)->flavour = value;
            }
        }

        public global::libopcodes.BfdEndian Byteorder
        {
            get
            {
                return ((global::libopcodes.BfdTarget.__Internal*) __Instance)->byteorder;
            }

            set
            {
                ((global::libopcodes.BfdTarget.__Internal*)__Instance)->byteorder = value;
            }
        }

        public global::libopcodes.BfdEndian HeaderByteorder
        {
            get
            {
                return ((global::libopcodes.BfdTarget.__Internal*) __Instance)->header_byteorder;
            }

            set
            {
                ((global::libopcodes.BfdTarget.__Internal*)__Instance)->header_byteorder = value;
            }
        }

        public uint ObjectFlags
        {
            get
            {
                return ((global::libopcodes.BfdTarget.__Internal*) __Instance)->object_flags;
            }

            set
            {
                ((global::libopcodes.BfdTarget.__Internal*)__Instance)->object_flags = value;
            }
        }

        public uint SectionFlags
        {
            get
            {
                return ((global::libopcodes.BfdTarget.__Internal*) __Instance)->section_flags;
            }

            set
            {
                ((global::libopcodes.BfdTarget.__Internal*)__Instance)->section_flags = value;
            }
        }

        public sbyte SymbolLeadingChar
        {
            get
            {
                return ((global::libopcodes.BfdTarget.__Internal*) __Instance)->symbol_leading_char;
            }

            set
            {
                ((global::libopcodes.BfdTarget.__Internal*)__Instance)->symbol_leading_char = value;
            }
        }

        public sbyte ArPadChar
        {
            get
            {
                return ((global::libopcodes.BfdTarget.__Internal*) __Instance)->ar_pad_char;
            }

            set
            {
                ((global::libopcodes.BfdTarget.__Internal*)__Instance)->ar_pad_char = value;
            }
        }

        public byte ArMaxNamelen
        {
            get
            {
                return ((global::libopcodes.BfdTarget.__Internal*) __Instance)->ar_max_namelen;
            }

            set
            {
                ((global::libopcodes.BfdTarget.__Internal*)__Instance)->ar_max_namelen = value;
            }
        }

        public byte MatchPriority
        {
            get
            {
                return ((global::libopcodes.BfdTarget.__Internal*) __Instance)->match_priority;
            }

            set
            {
                ((global::libopcodes.BfdTarget.__Internal*)__Instance)->match_priority = value;
            }
        }

        public global::libopcodes.Delegates.Func_ulong_IntPtr BfdGetx64
        {
            get
            {
                var __ptr0 = ((global::libopcodes.BfdTarget.__Internal*) __Instance)->bfd_getx64;
                return __ptr0 == IntPtr.Zero? null : (global::libopcodes.Delegates.Func_ulong_IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::libopcodes.Delegates.Func_ulong_IntPtr));
            }

            set
            {
                ((global::libopcodes.BfdTarget.__Internal*)__Instance)->bfd_getx64 = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::libopcodes.Delegates.Func_long_IntPtr BfdGetxSigned64
        {
            get
            {
                var __ptr0 = ((global::libopcodes.BfdTarget.__Internal*) __Instance)->bfd_getx_signed_64;
                return __ptr0 == IntPtr.Zero? null : (global::libopcodes.Delegates.Func_long_IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::libopcodes.Delegates.Func_long_IntPtr));
            }

            set
            {
                ((global::libopcodes.BfdTarget.__Internal*)__Instance)->bfd_getx_signed_64 = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::libopcodes.Delegates.Action_ulong_IntPtr BfdPutx64
        {
            get
            {
                var __ptr0 = ((global::libopcodes.BfdTarget.__Internal*) __Instance)->bfd_putx64;
                return __ptr0 == IntPtr.Zero? null : (global::libopcodes.Delegates.Action_ulong_IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::libopcodes.Delegates.Action_ulong_IntPtr));
            }

            set
            {
                ((global::libopcodes.BfdTarget.__Internal*)__Instance)->bfd_putx64 = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::libopcodes.Delegates.Func_ulong_IntPtr BfdGetx32
        {
            get
            {
                var __ptr0 = ((global::libopcodes.BfdTarget.__Internal*) __Instance)->bfd_getx32;
                return __ptr0 == IntPtr.Zero? null : (global::libopcodes.Delegates.Func_ulong_IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::libopcodes.Delegates.Func_ulong_IntPtr));
            }

            set
            {
                ((global::libopcodes.BfdTarget.__Internal*)__Instance)->bfd_getx32 = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::libopcodes.Delegates.Func_long_IntPtr BfdGetxSigned32
        {
            get
            {
                var __ptr0 = ((global::libopcodes.BfdTarget.__Internal*) __Instance)->bfd_getx_signed_32;
                return __ptr0 == IntPtr.Zero? null : (global::libopcodes.Delegates.Func_long_IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::libopcodes.Delegates.Func_long_IntPtr));
            }

            set
            {
                ((global::libopcodes.BfdTarget.__Internal*)__Instance)->bfd_getx_signed_32 = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::libopcodes.Delegates.Action_ulong_IntPtr BfdPutx32
        {
            get
            {
                var __ptr0 = ((global::libopcodes.BfdTarget.__Internal*) __Instance)->bfd_putx32;
                return __ptr0 == IntPtr.Zero? null : (global::libopcodes.Delegates.Action_ulong_IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::libopcodes.Delegates.Action_ulong_IntPtr));
            }

            set
            {
                ((global::libopcodes.BfdTarget.__Internal*)__Instance)->bfd_putx32 = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::libopcodes.Delegates.Func_ulong_IntPtr BfdGetx16
        {
            get
            {
                var __ptr0 = ((global::libopcodes.BfdTarget.__Internal*) __Instance)->bfd_getx16;
                return __ptr0 == IntPtr.Zero? null : (global::libopcodes.Delegates.Func_ulong_IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::libopcodes.Delegates.Func_ulong_IntPtr));
            }

            set
            {
                ((global::libopcodes.BfdTarget.__Internal*)__Instance)->bfd_getx16 = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::libopcodes.Delegates.Func_long_IntPtr BfdGetxSigned16
        {
            get
            {
                var __ptr0 = ((global::libopcodes.BfdTarget.__Internal*) __Instance)->bfd_getx_signed_16;
                return __ptr0 == IntPtr.Zero? null : (global::libopcodes.Delegates.Func_long_IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::libopcodes.Delegates.Func_long_IntPtr));
            }

            set
            {
                ((global::libopcodes.BfdTarget.__Internal*)__Instance)->bfd_getx_signed_16 = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::libopcodes.Delegates.Action_ulong_IntPtr BfdPutx16
        {
            get
            {
                var __ptr0 = ((global::libopcodes.BfdTarget.__Internal*) __Instance)->bfd_putx16;
                return __ptr0 == IntPtr.Zero? null : (global::libopcodes.Delegates.Action_ulong_IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::libopcodes.Delegates.Action_ulong_IntPtr));
            }

            set
            {
                ((global::libopcodes.BfdTarget.__Internal*)__Instance)->bfd_putx16 = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::libopcodes.Delegates.Func_ulong_IntPtr BfdHGetx64
        {
            get
            {
                var __ptr0 = ((global::libopcodes.BfdTarget.__Internal*) __Instance)->bfd_h_getx64;
                return __ptr0 == IntPtr.Zero? null : (global::libopcodes.Delegates.Func_ulong_IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::libopcodes.Delegates.Func_ulong_IntPtr));
            }

            set
            {
                ((global::libopcodes.BfdTarget.__Internal*)__Instance)->bfd_h_getx64 = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::libopcodes.Delegates.Func_long_IntPtr BfdHGetxSigned64
        {
            get
            {
                var __ptr0 = ((global::libopcodes.BfdTarget.__Internal*) __Instance)->bfd_h_getx_signed_64;
                return __ptr0 == IntPtr.Zero? null : (global::libopcodes.Delegates.Func_long_IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::libopcodes.Delegates.Func_long_IntPtr));
            }

            set
            {
                ((global::libopcodes.BfdTarget.__Internal*)__Instance)->bfd_h_getx_signed_64 = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::libopcodes.Delegates.Action_ulong_IntPtr BfdHPutx64
        {
            get
            {
                var __ptr0 = ((global::libopcodes.BfdTarget.__Internal*) __Instance)->bfd_h_putx64;
                return __ptr0 == IntPtr.Zero? null : (global::libopcodes.Delegates.Action_ulong_IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::libopcodes.Delegates.Action_ulong_IntPtr));
            }

            set
            {
                ((global::libopcodes.BfdTarget.__Internal*)__Instance)->bfd_h_putx64 = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::libopcodes.Delegates.Func_ulong_IntPtr BfdHGetx32
        {
            get
            {
                var __ptr0 = ((global::libopcodes.BfdTarget.__Internal*) __Instance)->bfd_h_getx32;
                return __ptr0 == IntPtr.Zero? null : (global::libopcodes.Delegates.Func_ulong_IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::libopcodes.Delegates.Func_ulong_IntPtr));
            }

            set
            {
                ((global::libopcodes.BfdTarget.__Internal*)__Instance)->bfd_h_getx32 = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::libopcodes.Delegates.Func_long_IntPtr BfdHGetxSigned32
        {
            get
            {
                var __ptr0 = ((global::libopcodes.BfdTarget.__Internal*) __Instance)->bfd_h_getx_signed_32;
                return __ptr0 == IntPtr.Zero? null : (global::libopcodes.Delegates.Func_long_IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::libopcodes.Delegates.Func_long_IntPtr));
            }

            set
            {
                ((global::libopcodes.BfdTarget.__Internal*)__Instance)->bfd_h_getx_signed_32 = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::libopcodes.Delegates.Action_ulong_IntPtr BfdHPutx32
        {
            get
            {
                var __ptr0 = ((global::libopcodes.BfdTarget.__Internal*) __Instance)->bfd_h_putx32;
                return __ptr0 == IntPtr.Zero? null : (global::libopcodes.Delegates.Action_ulong_IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::libopcodes.Delegates.Action_ulong_IntPtr));
            }

            set
            {
                ((global::libopcodes.BfdTarget.__Internal*)__Instance)->bfd_h_putx32 = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::libopcodes.Delegates.Func_ulong_IntPtr BfdHGetx16
        {
            get
            {
                var __ptr0 = ((global::libopcodes.BfdTarget.__Internal*) __Instance)->bfd_h_getx16;
                return __ptr0 == IntPtr.Zero? null : (global::libopcodes.Delegates.Func_ulong_IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::libopcodes.Delegates.Func_ulong_IntPtr));
            }

            set
            {
                ((global::libopcodes.BfdTarget.__Internal*)__Instance)->bfd_h_getx16 = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::libopcodes.Delegates.Func_long_IntPtr BfdHGetxSigned16
        {
            get
            {
                var __ptr0 = ((global::libopcodes.BfdTarget.__Internal*) __Instance)->bfd_h_getx_signed_16;
                return __ptr0 == IntPtr.Zero? null : (global::libopcodes.Delegates.Func_long_IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::libopcodes.Delegates.Func_long_IntPtr));
            }

            set
            {
                ((global::libopcodes.BfdTarget.__Internal*)__Instance)->bfd_h_getx_signed_16 = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::libopcodes.Delegates.Action_ulong_IntPtr BfdHPutx16
        {
            get
            {
                var __ptr0 = ((global::libopcodes.BfdTarget.__Internal*) __Instance)->bfd_h_putx16;
                return __ptr0 == IntPtr.Zero? null : (global::libopcodes.Delegates.Action_ulong_IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::libopcodes.Delegates.Action_ulong_IntPtr));
            }

            set
            {
                ((global::libopcodes.BfdTarget.__Internal*)__Instance)->bfd_h_putx16 = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::libopcodes.Delegates.Func_int_IntPtr CloseAndCleanup
        {
            get
            {
                var __ptr0 = ((global::libopcodes.BfdTarget.__Internal*) __Instance)->_close_and_cleanup;
                return __ptr0 == IntPtr.Zero? null : (global::libopcodes.Delegates.Func_int_IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::libopcodes.Delegates.Func_int_IntPtr));
            }

            set
            {
                ((global::libopcodes.BfdTarget.__Internal*)__Instance)->_close_and_cleanup = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::libopcodes.Delegates.Func_int_IntPtr BfdFreeCachedInfo
        {
            get
            {
                var __ptr0 = ((global::libopcodes.BfdTarget.__Internal*) __Instance)->_bfd_free_cached_info;
                return __ptr0 == IntPtr.Zero? null : (global::libopcodes.Delegates.Func_int_IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::libopcodes.Delegates.Func_int_IntPtr));
            }

            set
            {
                ((global::libopcodes.BfdTarget.__Internal*)__Instance)->_bfd_free_cached_info = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::libopcodes.Delegates.Func_int_IntPtr_IntPtr NewSectionHook
        {
            get
            {
                var __ptr0 = ((global::libopcodes.BfdTarget.__Internal*) __Instance)->_new_section_hook;
                return __ptr0 == IntPtr.Zero? null : (global::libopcodes.Delegates.Func_int_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::libopcodes.Delegates.Func_int_IntPtr_IntPtr));
            }

            set
            {
                ((global::libopcodes.BfdTarget.__Internal*)__Instance)->_new_section_hook = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::libopcodes.Delegates.Func_int_IntPtr_IntPtr_IntPtr_long_ulong BfdGetSectionContents
        {
            get
            {
                var __ptr0 = ((global::libopcodes.BfdTarget.__Internal*) __Instance)->_bfd_get_section_contents;
                return __ptr0 == IntPtr.Zero? null : (global::libopcodes.Delegates.Func_int_IntPtr_IntPtr_IntPtr_long_ulong) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::libopcodes.Delegates.Func_int_IntPtr_IntPtr_IntPtr_long_ulong));
            }

            set
            {
                ((global::libopcodes.BfdTarget.__Internal*)__Instance)->_bfd_get_section_contents = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::libopcodes.Delegates.Func_int_IntPtr_IntPtr_IntPtr_long_ulong BfdGetSectionContentsInWindow
        {
            get
            {
                var __ptr0 = ((global::libopcodes.BfdTarget.__Internal*) __Instance)->_bfd_get_section_contents_in_window;
                return __ptr0 == IntPtr.Zero? null : (global::libopcodes.Delegates.Func_int_IntPtr_IntPtr_IntPtr_long_ulong) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::libopcodes.Delegates.Func_int_IntPtr_IntPtr_IntPtr_long_ulong));
            }

            set
            {
                ((global::libopcodes.BfdTarget.__Internal*)__Instance)->_bfd_get_section_contents_in_window = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::libopcodes.Delegates.Func_int_IntPtr_IntPtr BfdCopyPrivateBfdData
        {
            get
            {
                var __ptr0 = ((global::libopcodes.BfdTarget.__Internal*) __Instance)->_bfd_copy_private_bfd_data;
                return __ptr0 == IntPtr.Zero? null : (global::libopcodes.Delegates.Func_int_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::libopcodes.Delegates.Func_int_IntPtr_IntPtr));
            }

            set
            {
                ((global::libopcodes.BfdTarget.__Internal*)__Instance)->_bfd_copy_private_bfd_data = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::libopcodes.Delegates.Func_int_IntPtr_IntPtr BfdMergePrivateBfdData
        {
            get
            {
                var __ptr0 = ((global::libopcodes.BfdTarget.__Internal*) __Instance)->_bfd_merge_private_bfd_data;
                return __ptr0 == IntPtr.Zero? null : (global::libopcodes.Delegates.Func_int_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::libopcodes.Delegates.Func_int_IntPtr_IntPtr));
            }

            set
            {
                ((global::libopcodes.BfdTarget.__Internal*)__Instance)->_bfd_merge_private_bfd_data = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::libopcodes.Delegates.Func_int_IntPtr_IntPtr_IntPtr_IntPtr_IntPtr BfdInitPrivateSectionData
        {
            get
            {
                var __ptr0 = ((global::libopcodes.BfdTarget.__Internal*) __Instance)->_bfd_init_private_section_data;
                return __ptr0 == IntPtr.Zero? null : (global::libopcodes.Delegates.Func_int_IntPtr_IntPtr_IntPtr_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::libopcodes.Delegates.Func_int_IntPtr_IntPtr_IntPtr_IntPtr_IntPtr));
            }

            set
            {
                ((global::libopcodes.BfdTarget.__Internal*)__Instance)->_bfd_init_private_section_data = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::libopcodes.Delegates.Func_int_IntPtr_IntPtr_IntPtr_IntPtr BfdCopyPrivateSectionData
        {
            get
            {
                var __ptr0 = ((global::libopcodes.BfdTarget.__Internal*) __Instance)->_bfd_copy_private_section_data;
                return __ptr0 == IntPtr.Zero? null : (global::libopcodes.Delegates.Func_int_IntPtr_IntPtr_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::libopcodes.Delegates.Func_int_IntPtr_IntPtr_IntPtr_IntPtr));
            }

            set
            {
                ((global::libopcodes.BfdTarget.__Internal*)__Instance)->_bfd_copy_private_section_data = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::libopcodes.Delegates.Func_int_IntPtr_IntPtr_IntPtr_IntPtr BfdCopyPrivateSymbolData
        {
            get
            {
                var __ptr0 = ((global::libopcodes.BfdTarget.__Internal*) __Instance)->_bfd_copy_private_symbol_data;
                return __ptr0 == IntPtr.Zero? null : (global::libopcodes.Delegates.Func_int_IntPtr_IntPtr_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::libopcodes.Delegates.Func_int_IntPtr_IntPtr_IntPtr_IntPtr));
            }

            set
            {
                ((global::libopcodes.BfdTarget.__Internal*)__Instance)->_bfd_copy_private_symbol_data = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::libopcodes.Delegates.Func_int_IntPtr_IntPtr BfdCopyPrivateHeaderData
        {
            get
            {
                var __ptr0 = ((global::libopcodes.BfdTarget.__Internal*) __Instance)->_bfd_copy_private_header_data;
                return __ptr0 == IntPtr.Zero? null : (global::libopcodes.Delegates.Func_int_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::libopcodes.Delegates.Func_int_IntPtr_IntPtr));
            }

            set
            {
                ((global::libopcodes.BfdTarget.__Internal*)__Instance)->_bfd_copy_private_header_data = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::libopcodes.Delegates.Func_int_IntPtr_uint BfdSetPrivateFlags
        {
            get
            {
                var __ptr0 = ((global::libopcodes.BfdTarget.__Internal*) __Instance)->_bfd_set_private_flags;
                return __ptr0 == IntPtr.Zero? null : (global::libopcodes.Delegates.Func_int_IntPtr_uint) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::libopcodes.Delegates.Func_int_IntPtr_uint));
            }

            set
            {
                ((global::libopcodes.BfdTarget.__Internal*)__Instance)->_bfd_set_private_flags = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::libopcodes.Delegates.Func_int_IntPtr_IntPtr BfdPrintPrivateBfdData
        {
            get
            {
                var __ptr0 = ((global::libopcodes.BfdTarget.__Internal*) __Instance)->_bfd_print_private_bfd_data;
                return __ptr0 == IntPtr.Zero? null : (global::libopcodes.Delegates.Func_int_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::libopcodes.Delegates.Func_int_IntPtr_IntPtr));
            }

            set
            {
                ((global::libopcodes.BfdTarget.__Internal*)__Instance)->_bfd_print_private_bfd_data = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::libopcodes.Delegates.Func_sbytePtr_IntPtr CoreFileFailingCommand
        {
            get
            {
                var __ptr0 = ((global::libopcodes.BfdTarget.__Internal*) __Instance)->_core_file_failing_command;
                return __ptr0 == IntPtr.Zero? null : (global::libopcodes.Delegates.Func_sbytePtr_IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::libopcodes.Delegates.Func_sbytePtr_IntPtr));
            }

            set
            {
                ((global::libopcodes.BfdTarget.__Internal*)__Instance)->_core_file_failing_command = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::libopcodes.Delegates.Func_int_IntPtr CoreFileFailingSignal
        {
            get
            {
                var __ptr0 = ((global::libopcodes.BfdTarget.__Internal*) __Instance)->_core_file_failing_signal;
                return __ptr0 == IntPtr.Zero? null : (global::libopcodes.Delegates.Func_int_IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::libopcodes.Delegates.Func_int_IntPtr));
            }

            set
            {
                ((global::libopcodes.BfdTarget.__Internal*)__Instance)->_core_file_failing_signal = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::libopcodes.Delegates.Func_int_IntPtr_IntPtr CoreFileMatchesExecutableP
        {
            get
            {
                var __ptr0 = ((global::libopcodes.BfdTarget.__Internal*) __Instance)->_core_file_matches_executable_p;
                return __ptr0 == IntPtr.Zero? null : (global::libopcodes.Delegates.Func_int_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::libopcodes.Delegates.Func_int_IntPtr_IntPtr));
            }

            set
            {
                ((global::libopcodes.BfdTarget.__Internal*)__Instance)->_core_file_matches_executable_p = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::libopcodes.Delegates.Func_int_IntPtr CoreFilePid
        {
            get
            {
                var __ptr0 = ((global::libopcodes.BfdTarget.__Internal*) __Instance)->_core_file_pid;
                return __ptr0 == IntPtr.Zero? null : (global::libopcodes.Delegates.Func_int_IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::libopcodes.Delegates.Func_int_IntPtr));
            }

            set
            {
                ((global::libopcodes.BfdTarget.__Internal*)__Instance)->_core_file_pid = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::libopcodes.Delegates.Func_int_IntPtr BfdSlurpArmap
        {
            get
            {
                var __ptr0 = ((global::libopcodes.BfdTarget.__Internal*) __Instance)->_bfd_slurp_armap;
                return __ptr0 == IntPtr.Zero? null : (global::libopcodes.Delegates.Func_int_IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::libopcodes.Delegates.Func_int_IntPtr));
            }

            set
            {
                ((global::libopcodes.BfdTarget.__Internal*)__Instance)->_bfd_slurp_armap = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::libopcodes.Delegates.Func_int_IntPtr BfdSlurpExtendedNameTable
        {
            get
            {
                var __ptr0 = ((global::libopcodes.BfdTarget.__Internal*) __Instance)->_bfd_slurp_extended_name_table;
                return __ptr0 == IntPtr.Zero? null : (global::libopcodes.Delegates.Func_int_IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::libopcodes.Delegates.Func_int_IntPtr));
            }

            set
            {
                ((global::libopcodes.BfdTarget.__Internal*)__Instance)->_bfd_slurp_extended_name_table = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::libopcodes.Delegates.Func_int_IntPtr_sbytePtrPtr_ulongPtr_sbytePtrPtr BfdConstructExtendedNameTable
        {
            get
            {
                var __ptr0 = ((global::libopcodes.BfdTarget.__Internal*) __Instance)->_bfd_construct_extended_name_table;
                return __ptr0 == IntPtr.Zero? null : (global::libopcodes.Delegates.Func_int_IntPtr_sbytePtrPtr_ulongPtr_sbytePtrPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::libopcodes.Delegates.Func_int_IntPtr_sbytePtrPtr_ulongPtr_sbytePtrPtr));
            }

            set
            {
                ((global::libopcodes.BfdTarget.__Internal*)__Instance)->_bfd_construct_extended_name_table = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::libopcodes.Delegates.Action_IntPtr_string_sbytePtr BfdTruncateArname
        {
            get
            {
                var __ptr0 = ((global::libopcodes.BfdTarget.__Internal*) __Instance)->_bfd_truncate_arname;
                return __ptr0 == IntPtr.Zero? null : (global::libopcodes.Delegates.Action_IntPtr_string_sbytePtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::libopcodes.Delegates.Action_IntPtr_string_sbytePtr));
            }

            set
            {
                ((global::libopcodes.BfdTarget.__Internal*)__Instance)->_bfd_truncate_arname = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::libopcodes.Delegates.Func_int_IntPtr_uint_IntPtr_uint_int WriteArmap
        {
            get
            {
                var __ptr0 = ((global::libopcodes.BfdTarget.__Internal*) __Instance)->write_armap;
                return __ptr0 == IntPtr.Zero? null : (global::libopcodes.Delegates.Func_int_IntPtr_uint_IntPtr_uint_int) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::libopcodes.Delegates.Func_int_IntPtr_uint_IntPtr_uint_int));
            }

            set
            {
                ((global::libopcodes.BfdTarget.__Internal*)__Instance)->write_armap = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::libopcodes.Delegates.Func_IntPtr_IntPtr BfdReadArHdrFn
        {
            get
            {
                var __ptr0 = ((global::libopcodes.BfdTarget.__Internal*) __Instance)->_bfd_read_ar_hdr_fn;
                return __ptr0 == IntPtr.Zero? null : (global::libopcodes.Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::libopcodes.Delegates.Func_IntPtr_IntPtr));
            }

            set
            {
                ((global::libopcodes.BfdTarget.__Internal*)__Instance)->_bfd_read_ar_hdr_fn = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::libopcodes.Delegates.Func_int_IntPtr_IntPtr BfdWriteArHdrFn
        {
            get
            {
                var __ptr0 = ((global::libopcodes.BfdTarget.__Internal*) __Instance)->_bfd_write_ar_hdr_fn;
                return __ptr0 == IntPtr.Zero? null : (global::libopcodes.Delegates.Func_int_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::libopcodes.Delegates.Func_int_IntPtr_IntPtr));
            }

            set
            {
                ((global::libopcodes.BfdTarget.__Internal*)__Instance)->_bfd_write_ar_hdr_fn = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::libopcodes.Delegates.Func_IntPtr_IntPtr_IntPtr OpenrNextArchivedFile
        {
            get
            {
                var __ptr0 = ((global::libopcodes.BfdTarget.__Internal*) __Instance)->openr_next_archived_file;
                return __ptr0 == IntPtr.Zero? null : (global::libopcodes.Delegates.Func_IntPtr_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::libopcodes.Delegates.Func_IntPtr_IntPtr_IntPtr));
            }

            set
            {
                ((global::libopcodes.BfdTarget.__Internal*)__Instance)->openr_next_archived_file = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::libopcodes.Delegates.Func_IntPtr_IntPtr_uint BfdGetEltAtIndex
        {
            get
            {
                var __ptr0 = ((global::libopcodes.BfdTarget.__Internal*) __Instance)->_bfd_get_elt_at_index;
                return __ptr0 == IntPtr.Zero? null : (global::libopcodes.Delegates.Func_IntPtr_IntPtr_uint) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::libopcodes.Delegates.Func_IntPtr_IntPtr_uint));
            }

            set
            {
                ((global::libopcodes.BfdTarget.__Internal*)__Instance)->_bfd_get_elt_at_index = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::libopcodes.Delegates.Func_int_IntPtr BfdUpdateArmapTimestamp
        {
            get
            {
                var __ptr0 = ((global::libopcodes.BfdTarget.__Internal*) __Instance)->_bfd_update_armap_timestamp;
                return __ptr0 == IntPtr.Zero? null : (global::libopcodes.Delegates.Func_int_IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::libopcodes.Delegates.Func_int_IntPtr));
            }

            set
            {
                ((global::libopcodes.BfdTarget.__Internal*)__Instance)->_bfd_update_armap_timestamp = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::libopcodes.Delegates.Func_int_IntPtr BfdGetSymtabUpperBound
        {
            get
            {
                var __ptr0 = ((global::libopcodes.BfdTarget.__Internal*) __Instance)->_bfd_get_symtab_upper_bound;
                return __ptr0 == IntPtr.Zero? null : (global::libopcodes.Delegates.Func_int_IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::libopcodes.Delegates.Func_int_IntPtr));
            }

            set
            {
                ((global::libopcodes.BfdTarget.__Internal*)__Instance)->_bfd_get_symtab_upper_bound = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::libopcodes.Delegates.Func_int_IntPtr_IntPtr BfdCanonicalizeSymtab
        {
            get
            {
                var __ptr0 = ((global::libopcodes.BfdTarget.__Internal*) __Instance)->_bfd_canonicalize_symtab;
                return __ptr0 == IntPtr.Zero? null : (global::libopcodes.Delegates.Func_int_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::libopcodes.Delegates.Func_int_IntPtr_IntPtr));
            }

            set
            {
                ((global::libopcodes.BfdTarget.__Internal*)__Instance)->_bfd_canonicalize_symtab = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::libopcodes.Delegates.Func_IntPtr_IntPtr BfdMakeEmptySymbol
        {
            get
            {
                var __ptr0 = ((global::libopcodes.BfdTarget.__Internal*) __Instance)->_bfd_make_empty_symbol;
                return __ptr0 == IntPtr.Zero? null : (global::libopcodes.Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::libopcodes.Delegates.Func_IntPtr_IntPtr));
            }

            set
            {
                ((global::libopcodes.BfdTarget.__Internal*)__Instance)->_bfd_make_empty_symbol = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::libopcodes.Delegates.Action_IntPtr_IntPtr_IntPtr_libopcodes_bfd_print_symbol BfdPrintSymbol
        {
            get
            {
                var __ptr0 = ((global::libopcodes.BfdTarget.__Internal*) __Instance)->_bfd_print_symbol;
                return __ptr0 == IntPtr.Zero? null : (global::libopcodes.Delegates.Action_IntPtr_IntPtr_IntPtr_libopcodes_bfd_print_symbol) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::libopcodes.Delegates.Action_IntPtr_IntPtr_IntPtr_libopcodes_bfd_print_symbol));
            }

            set
            {
                ((global::libopcodes.BfdTarget.__Internal*)__Instance)->_bfd_print_symbol = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::libopcodes.Delegates.Action_IntPtr_IntPtr_IntPtr BfdGetSymbolInfo
        {
            get
            {
                var __ptr0 = ((global::libopcodes.BfdTarget.__Internal*) __Instance)->_bfd_get_symbol_info;
                return __ptr0 == IntPtr.Zero? null : (global::libopcodes.Delegates.Action_IntPtr_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::libopcodes.Delegates.Action_IntPtr_IntPtr_IntPtr));
            }

            set
            {
                ((global::libopcodes.BfdTarget.__Internal*)__Instance)->_bfd_get_symbol_info = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::libopcodes.Delegates.Func_IntPtr_IntPtr_IntPtr_intPtr BfdGetSymbolVersionString
        {
            get
            {
                var __ptr0 = ((global::libopcodes.BfdTarget.__Internal*) __Instance)->_bfd_get_symbol_version_string;
                return __ptr0 == IntPtr.Zero? null : (global::libopcodes.Delegates.Func_IntPtr_IntPtr_IntPtr_intPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::libopcodes.Delegates.Func_IntPtr_IntPtr_IntPtr_intPtr));
            }

            set
            {
                ((global::libopcodes.BfdTarget.__Internal*)__Instance)->_bfd_get_symbol_version_string = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::libopcodes.Delegates.Func_int_IntPtr_string BfdIsLocalLabelName
        {
            get
            {
                var __ptr0 = ((global::libopcodes.BfdTarget.__Internal*) __Instance)->_bfd_is_local_label_name;
                return __ptr0 == IntPtr.Zero? null : (global::libopcodes.Delegates.Func_int_IntPtr_string) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::libopcodes.Delegates.Func_int_IntPtr_string));
            }

            set
            {
                ((global::libopcodes.BfdTarget.__Internal*)__Instance)->_bfd_is_local_label_name = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::libopcodes.Delegates.Func_int_IntPtr_IntPtr BfdIsTargetSpecialSymbol
        {
            get
            {
                var __ptr0 = ((global::libopcodes.BfdTarget.__Internal*) __Instance)->_bfd_is_target_special_symbol;
                return __ptr0 == IntPtr.Zero? null : (global::libopcodes.Delegates.Func_int_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::libopcodes.Delegates.Func_int_IntPtr_IntPtr));
            }

            set
            {
                ((global::libopcodes.BfdTarget.__Internal*)__Instance)->_bfd_is_target_special_symbol = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::libopcodes.Delegates.Func_IntPtr_IntPtr_IntPtr GetLineno
        {
            get
            {
                var __ptr0 = ((global::libopcodes.BfdTarget.__Internal*) __Instance)->_get_lineno;
                return __ptr0 == IntPtr.Zero? null : (global::libopcodes.Delegates.Func_IntPtr_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::libopcodes.Delegates.Func_IntPtr_IntPtr_IntPtr));
            }

            set
            {
                ((global::libopcodes.BfdTarget.__Internal*)__Instance)->_get_lineno = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::libopcodes.Delegates.Func_int_IntPtr_IntPtr_IntPtr_ulong_sbytePtrPtr_sbytePtrPtr_uintPtr_uintPtr BfdFindNearestLine
        {
            get
            {
                var __ptr0 = ((global::libopcodes.BfdTarget.__Internal*) __Instance)->_bfd_find_nearest_line;
                return __ptr0 == IntPtr.Zero? null : (global::libopcodes.Delegates.Func_int_IntPtr_IntPtr_IntPtr_ulong_sbytePtrPtr_sbytePtrPtr_uintPtr_uintPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::libopcodes.Delegates.Func_int_IntPtr_IntPtr_IntPtr_ulong_sbytePtrPtr_sbytePtrPtr_uintPtr_uintPtr));
            }

            set
            {
                ((global::libopcodes.BfdTarget.__Internal*)__Instance)->_bfd_find_nearest_line = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::libopcodes.Delegates.Func_int_IntPtr_IntPtr_IntPtr_sbytePtrPtr_uintPtr BfdFindLine
        {
            get
            {
                var __ptr0 = ((global::libopcodes.BfdTarget.__Internal*) __Instance)->_bfd_find_line;
                return __ptr0 == IntPtr.Zero? null : (global::libopcodes.Delegates.Func_int_IntPtr_IntPtr_IntPtr_sbytePtrPtr_uintPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::libopcodes.Delegates.Func_int_IntPtr_IntPtr_IntPtr_sbytePtrPtr_uintPtr));
            }

            set
            {
                ((global::libopcodes.BfdTarget.__Internal*)__Instance)->_bfd_find_line = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::libopcodes.Delegates.Func_int_IntPtr_sbytePtrPtr_sbytePtrPtr_uintPtr BfdFindInlinerInfo
        {
            get
            {
                var __ptr0 = ((global::libopcodes.BfdTarget.__Internal*) __Instance)->_bfd_find_inliner_info;
                return __ptr0 == IntPtr.Zero? null : (global::libopcodes.Delegates.Func_int_IntPtr_sbytePtrPtr_sbytePtrPtr_uintPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::libopcodes.Delegates.Func_int_IntPtr_sbytePtrPtr_sbytePtrPtr_uintPtr));
            }

            set
            {
                ((global::libopcodes.BfdTarget.__Internal*)__Instance)->_bfd_find_inliner_info = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::libopcodes.Delegates.Func_IntPtr_IntPtr_IntPtr_uint BfdMakeDebugSymbol
        {
            get
            {
                var __ptr0 = ((global::libopcodes.BfdTarget.__Internal*) __Instance)->_bfd_make_debug_symbol;
                return __ptr0 == IntPtr.Zero? null : (global::libopcodes.Delegates.Func_IntPtr_IntPtr_IntPtr_uint) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::libopcodes.Delegates.Func_IntPtr_IntPtr_IntPtr_uint));
            }

            set
            {
                ((global::libopcodes.BfdTarget.__Internal*)__Instance)->_bfd_make_debug_symbol = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::libopcodes.Delegates.Func_int_IntPtr_int_voidPtrPtr_uintPtr ReadMinisymbols
        {
            get
            {
                var __ptr0 = ((global::libopcodes.BfdTarget.__Internal*) __Instance)->_read_minisymbols;
                return __ptr0 == IntPtr.Zero? null : (global::libopcodes.Delegates.Func_int_IntPtr_int_voidPtrPtr_uintPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::libopcodes.Delegates.Func_int_IntPtr_int_voidPtrPtr_uintPtr));
            }

            set
            {
                ((global::libopcodes.BfdTarget.__Internal*)__Instance)->_read_minisymbols = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::libopcodes.Delegates.Func_IntPtr_IntPtr_int_IntPtr_IntPtr MinisymbolToSymbol
        {
            get
            {
                var __ptr0 = ((global::libopcodes.BfdTarget.__Internal*) __Instance)->_minisymbol_to_symbol;
                return __ptr0 == IntPtr.Zero? null : (global::libopcodes.Delegates.Func_IntPtr_IntPtr_int_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::libopcodes.Delegates.Func_IntPtr_IntPtr_int_IntPtr_IntPtr));
            }

            set
            {
                ((global::libopcodes.BfdTarget.__Internal*)__Instance)->_minisymbol_to_symbol = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::libopcodes.Delegates.Func_int_IntPtr_IntPtr GetRelocUpperBound
        {
            get
            {
                var __ptr0 = ((global::libopcodes.BfdTarget.__Internal*) __Instance)->_get_reloc_upper_bound;
                return __ptr0 == IntPtr.Zero? null : (global::libopcodes.Delegates.Func_int_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::libopcodes.Delegates.Func_int_IntPtr_IntPtr));
            }

            set
            {
                ((global::libopcodes.BfdTarget.__Internal*)__Instance)->_get_reloc_upper_bound = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::libopcodes.Delegates.Func_int_IntPtr_IntPtr_IntPtr_IntPtr BfdCanonicalizeReloc
        {
            get
            {
                var __ptr0 = ((global::libopcodes.BfdTarget.__Internal*) __Instance)->_bfd_canonicalize_reloc;
                return __ptr0 == IntPtr.Zero? null : (global::libopcodes.Delegates.Func_int_IntPtr_IntPtr_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::libopcodes.Delegates.Func_int_IntPtr_IntPtr_IntPtr_IntPtr));
            }

            set
            {
                ((global::libopcodes.BfdTarget.__Internal*)__Instance)->_bfd_canonicalize_reloc = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::libopcodes.Delegates.Action_IntPtr_IntPtr_IntPtr_uint BfdSetReloc
        {
            get
            {
                var __ptr0 = ((global::libopcodes.BfdTarget.__Internal*) __Instance)->_bfd_set_reloc;
                return __ptr0 == IntPtr.Zero? null : (global::libopcodes.Delegates.Action_IntPtr_IntPtr_IntPtr_uint) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::libopcodes.Delegates.Action_IntPtr_IntPtr_IntPtr_uint));
            }

            set
            {
                ((global::libopcodes.BfdTarget.__Internal*)__Instance)->_bfd_set_reloc = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::libopcodes.Delegates.Func_IntPtr_IntPtr_libopcodes_bfd_reloc_code_real RelocTypeLookup
        {
            get
            {
                var __ptr0 = ((global::libopcodes.BfdTarget.__Internal*) __Instance)->reloc_type_lookup;
                return __ptr0 == IntPtr.Zero? null : (global::libopcodes.Delegates.Func_IntPtr_IntPtr_libopcodes_bfd_reloc_code_real) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::libopcodes.Delegates.Func_IntPtr_IntPtr_libopcodes_bfd_reloc_code_real));
            }

            set
            {
                ((global::libopcodes.BfdTarget.__Internal*)__Instance)->reloc_type_lookup = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::libopcodes.Delegates.Func_IntPtr_IntPtr_string RelocNameLookup
        {
            get
            {
                var __ptr0 = ((global::libopcodes.BfdTarget.__Internal*) __Instance)->reloc_name_lookup;
                return __ptr0 == IntPtr.Zero? null : (global::libopcodes.Delegates.Func_IntPtr_IntPtr_string) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::libopcodes.Delegates.Func_IntPtr_IntPtr_string));
            }

            set
            {
                ((global::libopcodes.BfdTarget.__Internal*)__Instance)->reloc_name_lookup = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::libopcodes.Delegates.Func_int_IntPtr_libopcodes_bfd_architecture_uint BfdSetArchMach
        {
            get
            {
                var __ptr0 = ((global::libopcodes.BfdTarget.__Internal*) __Instance)->_bfd_set_arch_mach;
                return __ptr0 == IntPtr.Zero? null : (global::libopcodes.Delegates.Func_int_IntPtr_libopcodes_bfd_architecture_uint) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::libopcodes.Delegates.Func_int_IntPtr_libopcodes_bfd_architecture_uint));
            }

            set
            {
                ((global::libopcodes.BfdTarget.__Internal*)__Instance)->_bfd_set_arch_mach = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::libopcodes.Delegates.Func_int_IntPtr_IntPtr_IntPtr_long_ulong BfdSetSectionContents
        {
            get
            {
                var __ptr0 = ((global::libopcodes.BfdTarget.__Internal*) __Instance)->_bfd_set_section_contents;
                return __ptr0 == IntPtr.Zero? null : (global::libopcodes.Delegates.Func_int_IntPtr_IntPtr_IntPtr_long_ulong) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::libopcodes.Delegates.Func_int_IntPtr_IntPtr_IntPtr_long_ulong));
            }

            set
            {
                ((global::libopcodes.BfdTarget.__Internal*)__Instance)->_bfd_set_section_contents = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::libopcodes.Delegates.Func_int_IntPtr_IntPtr BfdSizeofHeaders
        {
            get
            {
                var __ptr0 = ((global::libopcodes.BfdTarget.__Internal*) __Instance)->_bfd_sizeof_headers;
                return __ptr0 == IntPtr.Zero? null : (global::libopcodes.Delegates.Func_int_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::libopcodes.Delegates.Func_int_IntPtr_IntPtr));
            }

            set
            {
                ((global::libopcodes.BfdTarget.__Internal*)__Instance)->_bfd_sizeof_headers = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::libopcodes.Delegates.Func_bytePtr_IntPtr_IntPtr_IntPtr_bytePtr_int_IntPtr BfdGetRelocatedSectionContents
        {
            get
            {
                var __ptr0 = ((global::libopcodes.BfdTarget.__Internal*) __Instance)->_bfd_get_relocated_section_contents;
                return __ptr0 == IntPtr.Zero? null : (global::libopcodes.Delegates.Func_bytePtr_IntPtr_IntPtr_IntPtr_bytePtr_int_IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::libopcodes.Delegates.Func_bytePtr_IntPtr_IntPtr_IntPtr_bytePtr_int_IntPtr));
            }

            set
            {
                ((global::libopcodes.BfdTarget.__Internal*)__Instance)->_bfd_get_relocated_section_contents = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::libopcodes.Delegates.Func_int_IntPtr_IntPtr_IntPtr_intPtr BfdRelaxSection
        {
            get
            {
                var __ptr0 = ((global::libopcodes.BfdTarget.__Internal*) __Instance)->_bfd_relax_section;
                return __ptr0 == IntPtr.Zero? null : (global::libopcodes.Delegates.Func_int_IntPtr_IntPtr_IntPtr_intPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::libopcodes.Delegates.Func_int_IntPtr_IntPtr_IntPtr_intPtr));
            }

            set
            {
                ((global::libopcodes.BfdTarget.__Internal*)__Instance)->_bfd_relax_section = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::libopcodes.Delegates.Func_IntPtr_IntPtr BfdLinkHashTableCreate
        {
            get
            {
                var __ptr0 = ((global::libopcodes.BfdTarget.__Internal*) __Instance)->_bfd_link_hash_table_create;
                return __ptr0 == IntPtr.Zero? null : (global::libopcodes.Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::libopcodes.Delegates.Func_IntPtr_IntPtr));
            }

            set
            {
                ((global::libopcodes.BfdTarget.__Internal*)__Instance)->_bfd_link_hash_table_create = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::libopcodes.Delegates.Func_int_IntPtr_IntPtr BfdLinkAddSymbols
        {
            get
            {
                var __ptr0 = ((global::libopcodes.BfdTarget.__Internal*) __Instance)->_bfd_link_add_symbols;
                return __ptr0 == IntPtr.Zero? null : (global::libopcodes.Delegates.Func_int_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::libopcodes.Delegates.Func_int_IntPtr_IntPtr));
            }

            set
            {
                ((global::libopcodes.BfdTarget.__Internal*)__Instance)->_bfd_link_add_symbols = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::libopcodes.Delegates.Action_IntPtr_IntPtr BfdLinkJustSyms
        {
            get
            {
                var __ptr0 = ((global::libopcodes.BfdTarget.__Internal*) __Instance)->_bfd_link_just_syms;
                return __ptr0 == IntPtr.Zero? null : (global::libopcodes.Delegates.Action_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::libopcodes.Delegates.Action_IntPtr_IntPtr));
            }

            set
            {
                ((global::libopcodes.BfdTarget.__Internal*)__Instance)->_bfd_link_just_syms = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::libopcodes.Delegates.Action_IntPtr_IntPtr_IntPtr BfdCopyLinkHashSymbolType
        {
            get
            {
                var __ptr0 = ((global::libopcodes.BfdTarget.__Internal*) __Instance)->_bfd_copy_link_hash_symbol_type;
                return __ptr0 == IntPtr.Zero? null : (global::libopcodes.Delegates.Action_IntPtr_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::libopcodes.Delegates.Action_IntPtr_IntPtr_IntPtr));
            }

            set
            {
                ((global::libopcodes.BfdTarget.__Internal*)__Instance)->_bfd_copy_link_hash_symbol_type = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::libopcodes.Delegates.Func_int_IntPtr_IntPtr BfdFinalLink
        {
            get
            {
                var __ptr0 = ((global::libopcodes.BfdTarget.__Internal*) __Instance)->_bfd_final_link;
                return __ptr0 == IntPtr.Zero? null : (global::libopcodes.Delegates.Func_int_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::libopcodes.Delegates.Func_int_IntPtr_IntPtr));
            }

            set
            {
                ((global::libopcodes.BfdTarget.__Internal*)__Instance)->_bfd_final_link = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::libopcodes.Delegates.Func_int_IntPtr_IntPtr BfdLinkSplitSection
        {
            get
            {
                var __ptr0 = ((global::libopcodes.BfdTarget.__Internal*) __Instance)->_bfd_link_split_section;
                return __ptr0 == IntPtr.Zero? null : (global::libopcodes.Delegates.Func_int_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::libopcodes.Delegates.Func_int_IntPtr_IntPtr));
            }

            set
            {
                ((global::libopcodes.BfdTarget.__Internal*)__Instance)->_bfd_link_split_section = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::libopcodes.Delegates.Func_int_IntPtr_IntPtr BfdLinkCheckRelocs
        {
            get
            {
                var __ptr0 = ((global::libopcodes.BfdTarget.__Internal*) __Instance)->_bfd_link_check_relocs;
                return __ptr0 == IntPtr.Zero? null : (global::libopcodes.Delegates.Func_int_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::libopcodes.Delegates.Func_int_IntPtr_IntPtr));
            }

            set
            {
                ((global::libopcodes.BfdTarget.__Internal*)__Instance)->_bfd_link_check_relocs = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::libopcodes.Delegates.Func_int_IntPtr_IntPtr BfdGcSections
        {
            get
            {
                var __ptr0 = ((global::libopcodes.BfdTarget.__Internal*) __Instance)->_bfd_gc_sections;
                return __ptr0 == IntPtr.Zero? null : (global::libopcodes.Delegates.Func_int_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::libopcodes.Delegates.Func_int_IntPtr_IntPtr));
            }

            set
            {
                ((global::libopcodes.BfdTarget.__Internal*)__Instance)->_bfd_gc_sections = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::libopcodes.Delegates.Func_int_IntPtr_IntPtr_IntPtr BfdLookupSectionFlags
        {
            get
            {
                var __ptr0 = ((global::libopcodes.BfdTarget.__Internal*) __Instance)->_bfd_lookup_section_flags;
                return __ptr0 == IntPtr.Zero? null : (global::libopcodes.Delegates.Func_int_IntPtr_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::libopcodes.Delegates.Func_int_IntPtr_IntPtr_IntPtr));
            }

            set
            {
                ((global::libopcodes.BfdTarget.__Internal*)__Instance)->_bfd_lookup_section_flags = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::libopcodes.Delegates.Func_int_IntPtr_IntPtr BfdMergeSections
        {
            get
            {
                var __ptr0 = ((global::libopcodes.BfdTarget.__Internal*) __Instance)->_bfd_merge_sections;
                return __ptr0 == IntPtr.Zero? null : (global::libopcodes.Delegates.Func_int_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::libopcodes.Delegates.Func_int_IntPtr_IntPtr));
            }

            set
            {
                ((global::libopcodes.BfdTarget.__Internal*)__Instance)->_bfd_merge_sections = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::libopcodes.Delegates.Func_int_IntPtr_IntPtr BfdIsGroupSection
        {
            get
            {
                var __ptr0 = ((global::libopcodes.BfdTarget.__Internal*) __Instance)->_bfd_is_group_section;
                return __ptr0 == IntPtr.Zero? null : (global::libopcodes.Delegates.Func_int_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::libopcodes.Delegates.Func_int_IntPtr_IntPtr));
            }

            set
            {
                ((global::libopcodes.BfdTarget.__Internal*)__Instance)->_bfd_is_group_section = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::libopcodes.Delegates.Func_IntPtr_IntPtr_IntPtr BfdGroupName
        {
            get
            {
                var __ptr0 = ((global::libopcodes.BfdTarget.__Internal*) __Instance)->_bfd_group_name;
                return __ptr0 == IntPtr.Zero? null : (global::libopcodes.Delegates.Func_IntPtr_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::libopcodes.Delegates.Func_IntPtr_IntPtr_IntPtr));
            }

            set
            {
                ((global::libopcodes.BfdTarget.__Internal*)__Instance)->_bfd_group_name = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::libopcodes.Delegates.Func_int_IntPtr_IntPtr BfdDiscardGroup
        {
            get
            {
                var __ptr0 = ((global::libopcodes.BfdTarget.__Internal*) __Instance)->_bfd_discard_group;
                return __ptr0 == IntPtr.Zero? null : (global::libopcodes.Delegates.Func_int_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::libopcodes.Delegates.Func_int_IntPtr_IntPtr));
            }

            set
            {
                ((global::libopcodes.BfdTarget.__Internal*)__Instance)->_bfd_discard_group = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::libopcodes.Delegates.Func_int_IntPtr_IntPtr_IntPtr SectionAlreadyLinked
        {
            get
            {
                var __ptr0 = ((global::libopcodes.BfdTarget.__Internal*) __Instance)->_section_already_linked;
                return __ptr0 == IntPtr.Zero? null : (global::libopcodes.Delegates.Func_int_IntPtr_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::libopcodes.Delegates.Func_int_IntPtr_IntPtr_IntPtr));
            }

            set
            {
                ((global::libopcodes.BfdTarget.__Internal*)__Instance)->_section_already_linked = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::libopcodes.Delegates.Func_int_IntPtr_IntPtr_IntPtr BfdDefineCommonSymbol
        {
            get
            {
                var __ptr0 = ((global::libopcodes.BfdTarget.__Internal*) __Instance)->_bfd_define_common_symbol;
                return __ptr0 == IntPtr.Zero? null : (global::libopcodes.Delegates.Func_int_IntPtr_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::libopcodes.Delegates.Func_int_IntPtr_IntPtr_IntPtr));
            }

            set
            {
                ((global::libopcodes.BfdTarget.__Internal*)__Instance)->_bfd_define_common_symbol = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::libopcodes.Delegates.Action_IntPtr_IntPtr_IntPtr BfdLinkHideSymbol
        {
            get
            {
                var __ptr0 = ((global::libopcodes.BfdTarget.__Internal*) __Instance)->_bfd_link_hide_symbol;
                return __ptr0 == IntPtr.Zero? null : (global::libopcodes.Delegates.Action_IntPtr_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::libopcodes.Delegates.Action_IntPtr_IntPtr_IntPtr));
            }

            set
            {
                ((global::libopcodes.BfdTarget.__Internal*)__Instance)->_bfd_link_hide_symbol = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::libopcodes.Delegates.Func_IntPtr_IntPtr_string_IntPtr BfdDefineStartStop
        {
            get
            {
                var __ptr0 = ((global::libopcodes.BfdTarget.__Internal*) __Instance)->_bfd_define_start_stop;
                return __ptr0 == IntPtr.Zero? null : (global::libopcodes.Delegates.Func_IntPtr_IntPtr_string_IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::libopcodes.Delegates.Func_IntPtr_IntPtr_string_IntPtr));
            }

            set
            {
                ((global::libopcodes.BfdTarget.__Internal*)__Instance)->_bfd_define_start_stop = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::libopcodes.Delegates.Func_int_IntPtr BfdGetDynamicSymtabUpperBound
        {
            get
            {
                var __ptr0 = ((global::libopcodes.BfdTarget.__Internal*) __Instance)->_bfd_get_dynamic_symtab_upper_bound;
                return __ptr0 == IntPtr.Zero? null : (global::libopcodes.Delegates.Func_int_IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::libopcodes.Delegates.Func_int_IntPtr));
            }

            set
            {
                ((global::libopcodes.BfdTarget.__Internal*)__Instance)->_bfd_get_dynamic_symtab_upper_bound = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::libopcodes.Delegates.Func_int_IntPtr_IntPtr BfdCanonicalizeDynamicSymtab
        {
            get
            {
                var __ptr0 = ((global::libopcodes.BfdTarget.__Internal*) __Instance)->_bfd_canonicalize_dynamic_symtab;
                return __ptr0 == IntPtr.Zero? null : (global::libopcodes.Delegates.Func_int_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::libopcodes.Delegates.Func_int_IntPtr_IntPtr));
            }

            set
            {
                ((global::libopcodes.BfdTarget.__Internal*)__Instance)->_bfd_canonicalize_dynamic_symtab = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::libopcodes.Delegates.Func_int_IntPtr_int_IntPtr_int_IntPtr_IntPtr BfdGetSyntheticSymtab
        {
            get
            {
                var __ptr0 = ((global::libopcodes.BfdTarget.__Internal*) __Instance)->_bfd_get_synthetic_symtab;
                return __ptr0 == IntPtr.Zero? null : (global::libopcodes.Delegates.Func_int_IntPtr_int_IntPtr_int_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::libopcodes.Delegates.Func_int_IntPtr_int_IntPtr_int_IntPtr_IntPtr));
            }

            set
            {
                ((global::libopcodes.BfdTarget.__Internal*)__Instance)->_bfd_get_synthetic_symtab = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::libopcodes.Delegates.Func_int_IntPtr BfdGetDynamicRelocUpperBound
        {
            get
            {
                var __ptr0 = ((global::libopcodes.BfdTarget.__Internal*) __Instance)->_bfd_get_dynamic_reloc_upper_bound;
                return __ptr0 == IntPtr.Zero? null : (global::libopcodes.Delegates.Func_int_IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::libopcodes.Delegates.Func_int_IntPtr));
            }

            set
            {
                ((global::libopcodes.BfdTarget.__Internal*)__Instance)->_bfd_get_dynamic_reloc_upper_bound = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::libopcodes.Delegates.Func_int_IntPtr_IntPtr_IntPtr BfdCanonicalizeDynamicReloc
        {
            get
            {
                var __ptr0 = ((global::libopcodes.BfdTarget.__Internal*) __Instance)->_bfd_canonicalize_dynamic_reloc;
                return __ptr0 == IntPtr.Zero? null : (global::libopcodes.Delegates.Func_int_IntPtr_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::libopcodes.Delegates.Func_int_IntPtr_IntPtr_IntPtr));
            }

            set
            {
                ((global::libopcodes.BfdTarget.__Internal*)__Instance)->_bfd_canonicalize_dynamic_reloc = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::libopcodes.BfdTarget AlternativeTarget
        {
            get
            {
                global::libopcodes.BfdTarget __result0;
                if (((global::libopcodes.BfdTarget.__Internal*) __Instance)->alternative_target == IntPtr.Zero) __result0 = null;
                else if (global::libopcodes.BfdTarget.NativeToManagedMap.ContainsKey(((global::libopcodes.BfdTarget.__Internal*) __Instance)->alternative_target))
                    __result0 = (global::libopcodes.BfdTarget) global::libopcodes.BfdTarget.NativeToManagedMap[((global::libopcodes.BfdTarget.__Internal*) __Instance)->alternative_target];
                else __result0 = global::libopcodes.BfdTarget.__CreateInstance(((global::libopcodes.BfdTarget.__Internal*) __Instance)->alternative_target);
                return __result0;
            }

            set
            {
                ((global::libopcodes.BfdTarget.__Internal*)__Instance)->alternative_target = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public global::System.IntPtr BackendData
        {
            get
            {
                return ((global::libopcodes.BfdTarget.__Internal*) __Instance)->backend_data;
            }

            set
            {
                ((global::libopcodes.BfdTarget.__Internal*)__Instance)->backend_data = (global::System.IntPtr) value;
            }
        }
    }

    public unsafe partial class bfd
    {
        public partial struct __Internal
        {
        }

        public static uint BfdUseReservedId
        {
            get
            {
                var __ptr = (uint*)CppSharp.SymbolResolver.ResolveSymbol("opcodes", "bfd_use_reserved_id");
                return *__ptr;
            }

            set
            {
                var __ptr = (uint*)CppSharp.SymbolResolver.ResolveSymbol("opcodes", "bfd_use_reserved_id");
                *__ptr = value;
            }
        }
    }

    namespace Delegates
    {
        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
        public unsafe delegate ulong Func_ulong_IntPtr(global::System.IntPtr _0);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
        public unsafe delegate long Func_long_IntPtr(global::System.IntPtr _0);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
        public unsafe delegate void Action_ulong_IntPtr(ulong _0, global::System.IntPtr _1);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
        public unsafe delegate int Func_int_IntPtr(global::System.IntPtr _0);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
        public unsafe delegate int Func_int_IntPtr_IntPtr(global::System.IntPtr _0, global::System.IntPtr _1);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
        public unsafe delegate int Func_int_IntPtr_IntPtr_IntPtr_long_ulong(global::System.IntPtr _0, global::System.IntPtr _1, global::System.IntPtr _2, long _3, ulong _4);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
        public unsafe delegate int Func_int_IntPtr_IntPtr_IntPtr_IntPtr_IntPtr(global::System.IntPtr _0, global::System.IntPtr _1, global::System.IntPtr _2, global::System.IntPtr _3, global::System.IntPtr _4);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
        public unsafe delegate int Func_int_IntPtr_IntPtr_IntPtr_IntPtr(global::System.IntPtr _0, global::System.IntPtr _1, global::System.IntPtr _2, global::System.IntPtr _3);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
        public unsafe delegate int Func_int_IntPtr_uint(global::System.IntPtr _0, uint _1);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
        public unsafe delegate sbyte* Func_sbytePtr_IntPtr(global::System.IntPtr _0);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
        public unsafe delegate int Func_int_IntPtr_sbytePtrPtr_ulongPtr_sbytePtrPtr(global::System.IntPtr _0, sbyte** _1, ulong* _2, sbyte** _3);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
        public unsafe delegate void Action_IntPtr_string_sbytePtr(global::System.IntPtr _0, [MarshalAs(UnmanagedType.LPUTF8Str)] string _1, sbyte* _2);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
        public unsafe delegate int Func_int_IntPtr_uint_IntPtr_uint_int(global::System.IntPtr _0, uint _1, global::System.IntPtr _2, uint _3, int _4);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
        public unsafe delegate global::System.IntPtr Func_IntPtr_IntPtr(global::System.IntPtr _0);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
        public unsafe delegate global::System.IntPtr Func_IntPtr_IntPtr_IntPtr(global::System.IntPtr _0, global::System.IntPtr _1);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
        public unsafe delegate global::System.IntPtr Func_IntPtr_IntPtr_uint(global::System.IntPtr _0, uint _1);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
        public unsafe delegate void Action_IntPtr_IntPtr_IntPtr_libopcodes_bfd_print_symbol(global::System.IntPtr _0, global::System.IntPtr _1, global::System.IntPtr _2, global::libopcodes.BfdPrintSymbol _3);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
        public unsafe delegate void Action_IntPtr_IntPtr_IntPtr(global::System.IntPtr _0, global::System.IntPtr _1, global::System.IntPtr _2);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
        public unsafe delegate global::System.IntPtr Func_IntPtr_IntPtr_IntPtr_intPtr(global::System.IntPtr _0, global::System.IntPtr _1, int* _2);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
        public unsafe delegate int Func_int_IntPtr_string(global::System.IntPtr _0, [MarshalAs(UnmanagedType.LPUTF8Str)] string _1);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
        public unsafe delegate int Func_int_IntPtr_IntPtr_IntPtr_ulong_sbytePtrPtr_sbytePtrPtr_uintPtr_uintPtr(global::System.IntPtr _0, global::System.IntPtr _1, global::System.IntPtr _2, ulong _3, sbyte** _4, sbyte** _5, uint* _6, uint* _7);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
        public unsafe delegate int Func_int_IntPtr_IntPtr_IntPtr_sbytePtrPtr_uintPtr(global::System.IntPtr _0, global::System.IntPtr _1, global::System.IntPtr _2, sbyte** _3, uint* _4);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
        public unsafe delegate int Func_int_IntPtr_sbytePtrPtr_sbytePtrPtr_uintPtr(global::System.IntPtr _0, sbyte** _1, sbyte** _2, uint* _3);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
        public unsafe delegate global::System.IntPtr Func_IntPtr_IntPtr_IntPtr_uint(global::System.IntPtr _0, global::System.IntPtr _1, uint size);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
        public unsafe delegate int Func_int_IntPtr_int_voidPtrPtr_uintPtr(global::System.IntPtr _0, int _1, void** _2, uint* _3);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
        public unsafe delegate global::System.IntPtr Func_IntPtr_IntPtr_int_IntPtr_IntPtr(global::System.IntPtr _0, int _1, global::System.IntPtr _2, global::System.IntPtr _3);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
        public unsafe delegate void Action_IntPtr_IntPtr_IntPtr_uint(global::System.IntPtr _0, global::System.IntPtr _1, global::System.IntPtr _2, uint _3);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
        public unsafe delegate global::libopcodes.BfdRelocStatus Func_libopcodes_bfd_reloc_status_IntPtr_IntPtr_IntPtr_IntPtr_IntPtr_IntPtr_sbytePtrPtr(global::System.IntPtr _0, global::System.IntPtr _1, global::System.IntPtr _2, global::System.IntPtr _3, global::System.IntPtr _4, global::System.IntPtr _5, sbyte** _6);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
        public unsafe delegate global::System.IntPtr Func_IntPtr_IntPtr_libopcodes_bfd_reloc_code_real(global::System.IntPtr _0, global::libopcodes.BfdRelocCodeReal _1);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
        public unsafe delegate global::System.IntPtr Func_IntPtr_IntPtr_string(global::System.IntPtr _0, [MarshalAs(UnmanagedType.LPUTF8Str)] string _1);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
        public unsafe delegate int Func_int_IntPtr_libopcodes_bfd_architecture_uint(global::System.IntPtr _0, global::libopcodes.BfdArchitecture _1, uint _2);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
        public unsafe delegate byte* Func_bytePtr_IntPtr_IntPtr_IntPtr_bytePtr_int_IntPtr(global::System.IntPtr _0, global::System.IntPtr _1, global::System.IntPtr _2, byte* _3, int _4, global::System.IntPtr _5);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
        public unsafe delegate int Func_int_IntPtr_IntPtr_IntPtr_intPtr(global::System.IntPtr _0, global::System.IntPtr _1, global::System.IntPtr _2, int* _3);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
        public unsafe delegate void Action_IntPtr_IntPtr(global::System.IntPtr _0, global::System.IntPtr _1);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
        public unsafe delegate int Func_int_IntPtr_IntPtr_IntPtr(global::System.IntPtr _0, global::System.IntPtr _1, global::System.IntPtr _2);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
        public unsafe delegate global::System.IntPtr Func_IntPtr_IntPtr_string_IntPtr(global::System.IntPtr _0, [MarshalAs(UnmanagedType.LPUTF8Str)] string _1, global::System.IntPtr _2);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
        public unsafe delegate int Func_int_IntPtr_int_IntPtr_int_IntPtr_IntPtr(global::System.IntPtr _0, int _1, global::System.IntPtr _2, int _3, global::System.IntPtr _4, global::System.IntPtr _5);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
        public unsafe delegate global::System.IntPtr Func_IntPtr_IntPtr_IntPtr_string(global::System.IntPtr _0, global::System.IntPtr _1, [MarshalAs(UnmanagedType.LPUTF8Str)] string _2);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
        public unsafe delegate global::System.IntPtr Func_IntPtr_ulong_int_int(ulong count, int is_bigendian, int code);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
        public unsafe delegate int Func_int_ulong_bytePtr_ulong(ulong vma, byte* myaddr, ulong len);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
        public unsafe delegate int Func_int_ulong_bytePtr_uint_IntPtr(ulong memaddr, byte* myaddr, uint length, global::System.IntPtr dinfo);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
        public unsafe delegate void Action_int_ulong_IntPtr(int status, ulong memaddr, global::System.IntPtr dinfo);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
        public unsafe delegate int Func_int_ulong_IntPtr(ulong addr, global::System.IntPtr dinfo);
    }
}
